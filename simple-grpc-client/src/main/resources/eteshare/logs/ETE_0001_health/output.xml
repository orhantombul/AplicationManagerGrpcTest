<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180806 11:44:45.146" generator="Robot 3.0.4 (Python 2.7.15rc1 on linux2)">
<suite source="/var/opt/OpenECOMP_ETE" id="s1" name="OpenECOMP ETE">
<suite source="/var/opt/OpenECOMP_ETE/robot" id="s1-s1" name="Robot">
<suite source="/var/opt/OpenECOMP_ETE/robot/testsuites" id="s1-s1-s1" name="Testsuites">
<suite source="/var/opt/OpenECOMP_ETE/robot/testsuites/health-check.robot" id="s1-s1-s1-s1" name="Health-Check">
<test id="s1-s1-s1-s1-t1" name="Basic A&amp;AI Health Check">
<kw name="Run A&amp;AI Health Check" library="aai_interface">
<doc>Runs an A&amp;AI health check</doc>
<msg timestamp="20180806 11:44:45.732" level="TRACE">Arguments: [  ]</msg>
<kw name="Run A&amp;AI Get Request" library="aai_interface">
<doc>Runs an A&amp;AI get request</doc>
<arguments>
<arg>${AAI_HEALTH_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:44:45.733" level="TRACE">Arguments: [ ${data_path}='/aai/util/echo?action=long' ]</msg>
<kw name="Disable Warnings" library="HTTPUtils">
<doc>Disable the cert warnings when creating sessions for A&amp;AI API Calls</doc>
<msg timestamp="20180806 11:44:45.734" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:44:45.734" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 11:44:45.734" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:44:45.734" starttime="20180806 11:44:45.733"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_AAI_USERNAME}</arg>
<arg>${GLOBAL_AAI_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:44:45.735" level="TRACE">Arguments: [ b'AAI' | b'AAI' ]</msg>
<msg timestamp="20180806 11:44:45.735" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:44:45.735" level="TRACE">Return: [b'AAI', b'AAI']</msg>
<msg timestamp="20180806 11:44:45.735" level="INFO">${auth} = ['AAI', 'AAI']</msg>
<status status="PASS" endtime="20180806 11:44:45.735" starttime="20180806 11:44:45.734"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>aai</arg>
<arg>${AAI_FRONTEND_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:44:45.736" level="TRACE">Arguments: [ 'aai' | 'https://192.168.61.18:8443' | auth=[b'AAI', b'AAI'] ]</msg>
<msg timestamp="20180806 11:44:45.736" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:44:45.736" level="INFO">Creating Session using : alias=aai, url=https://192.168.61.18:8443, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe674ac450&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:44:45.736" level="DEBUG">Creating session: aai</msg>
<msg timestamp="20180806 11:44:45.736" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:44:45.736" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe66ebc810&gt;</msg>
<msg timestamp="20180806 11:44:45.737" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe66ebc810&gt;</msg>
<status status="PASS" endtime="20180806 11:44:45.737" starttime="20180806 11:44:45.735"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:44:45.737" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:44:45.737" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:44:45.737" level="TRACE">Return: UUID('7713259c-4a06-470d-94b0-264b658711d7')</msg>
<msg timestamp="20180806 11:44:45.737" level="INFO">${uuid} = 7713259c-4a06-470d-94b0-264b658711d7</msg>
<status status="PASS" endtime="20180806 11:44:45.738" starttime="20180806 11:44:45.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:44:45.738" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:44:45.739" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-7713259c-4a06-470d-94b0-264b658711d7'}</msg>
<msg timestamp="20180806 11:44:45.739" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-7713259c-4a06-470d-94b0-264b658711d7', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:44:45.739" starttime="20180806 11:44:45.738"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>aai</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:44:45.740" level="TRACE">Arguments: [ 'aai' | '/aai/util/echo?action=long' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-7713259c-4a06-470d-94b0-264b658711d7'} ]</msg>
<msg timestamp="20180806 11:44:45.740" level="DEBUG">Test timeout 1 minute active. 59.991 seconds left.</msg>
<msg timestamp="20180806 11:44:45.741" level="DEBUG">Starting new HTTPS connection (1): 192.168.61.18</msg>
<msg timestamp="20180806 11:44:45.763" level="DEBUG">https://192.168.61.18:8443 "GET /aai/util/echo?action=long HTTP/1.1" 200 252</msg>
<msg timestamp="20180806 11:44:45.764" level="INFO">Get Request using : alias=aai, uri=/aai/util/echo?action=long, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-7713259c-4a06-470d-94b0-264b658711d7', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180806 11:44:45.764" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:44:45.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:44:45.764" starttime="20180806 11:44:45.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from aai ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:44:45.766" level="TRACE">Arguments: [ 'Received response from aai {"responseMessages":{"responseMessage":[{"messageId":"INF0001","text":"Success X-FromAppId=%1 X-TransactionId=%2 (msg=%3) (rc=%4)","variables":{"variable":["robot-ete","5ea1b1e2-0c67-4c99-a3d1-036316ed1a3d","Successful health check:OK","0.0.0002"]}}]}}' ]</msg>
<msg timestamp="20180806 11:44:45.766" level="DEBUG">Test timeout 1 minute active. 59.965 seconds left.</msg>
<msg timestamp="20180806 11:44:45.766" level="INFO">Received response from aai {"responseMessages":{"responseMessage":[{"messageId":"INF0001","text":"Success X-FromAppId=%1 X-TransactionId=%2 (msg=%3) (rc=%4)","variables":{"variable":["robot-ete","5ea1b1e2-0c67-4c99-a3d1-036316ed1a3d","Successful health check:OK","0.0.0002"]}}]}}</msg>
<msg timestamp="20180806 11:44:45.766" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:44:45.766" starttime="20180806 11:44:45.765"></status>
</kw>
<msg timestamp="20180806 11:44:45.767" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:44:45.767" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:44:45.767" starttime="20180806 11:44:45.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:44:45.768" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:44:45.768" level="DEBUG">Test timeout 1 minute active. 59.963 seconds left.</msg>
<msg timestamp="20180806 11:44:45.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:44:45.768" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:44:45.768" starttime="20180806 11:44:45.767"></status>
</kw>
<msg timestamp="20180806 11:44:45.768" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:44:45.769" starttime="20180806 11:44:45.732"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:44:45.769" critical="yes" starttime="20180806 11:44:45.731"></status>
</test>
<test id="s1-s1-s1-s1-t2" name="Basic AAF Health Check">
<kw name="Run AAF Health Check" library="aaf_interface">
<doc>Runs AAF Health check</doc>
<msg timestamp="20180806 11:44:45.772" level="TRACE">Arguments: [  ]</msg>
<kw name="Run AAF Get Request" library="aaf_interface">
<doc>Runs AAF Get request</doc>
<arguments>
<arg>${AAF_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:44:45.773" level="TRACE">Arguments: [ ${data_path}='/authz/perms/user/demo@people.osaaf.org' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_AAF_USERNAME}</arg>
<arg>${GLOBAL_AAF_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:44:45.773" level="TRACE">Arguments: [ b'demo@people.osaaf.org' | b'demo123456!' ]</msg>
<msg timestamp="20180806 11:44:45.774" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:44:45.774" level="TRACE">Return: [b'demo@people.osaaf.org', b'demo123456!']</msg>
<msg timestamp="20180806 11:44:45.774" level="INFO">${auth} = ['demo@people.osaaf.org', 'demo123456!']</msg>
<status status="PASS" endtime="20180806 11:44:45.774" starttime="20180806 11:44:45.773"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>aaf</arg>
<arg>${GLOBAL_AAF_SERVER}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:44:45.775" level="TRACE">Arguments: [ 'aaf' | b'https://aaf.api.simpledemo.onap.org:8100' | auth=[b'demo@people.osaaf.org', b'demo123456!'] ]</msg>
<msg timestamp="20180806 11:44:45.775" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:44:45.775" level="INFO">Creating Session using : alias=aaf, url=https://aaf.api.simpledemo.onap.org:8100, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe64a9d710&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:44:45.775" level="DEBUG">Creating session: aaf</msg>
<msg timestamp="20180806 11:44:45.775" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:44:45.776" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64a9d550&gt;</msg>
<msg timestamp="20180806 11:44:45.776" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64a9d550&gt;</msg>
<status status="PASS" endtime="20180806 11:44:45.776" starttime="20180806 11:44:45.774"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:44:45.776" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:44:45.776" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:44:45.776" level="TRACE">Return: UUID('8ceb0034-353b-4010-b6ee-8d5f9810e109')</msg>
<msg timestamp="20180806 11:44:45.777" level="INFO">${uuid} = 8ceb0034-353b-4010-b6ee-8d5f9810e109</msg>
<status status="PASS" endtime="20180806 11:44:45.777" starttime="20180806 11:44:45.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:44:45.777" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:44:45.778" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-8ceb0034-353b-4010-b6ee-8d5f9810e109'}</msg>
<msg timestamp="20180806 11:44:45.778" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-8ceb0034-353b-4010-b6ee-8d5f9810e109', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:44:45.778" starttime="20180806 11:44:45.777"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>aaf</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:44:45.778" level="TRACE">Arguments: [ 'aaf' | '/authz/perms/user/demo@people.osaaf.org' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-8ceb0034-353b-4010-b6ee-8d5f9810e109'} ]</msg>
<msg timestamp="20180806 11:44:45.779" level="DEBUG">Test timeout 1 minute active. 59.991 seconds left.</msg>
<msg timestamp="20180806 11:44:45.780" level="DEBUG">Starting new HTTPS connection (1): aaf.api.simpledemo.onap.org</msg>
<msg timestamp="20180806 11:45:45.770" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:45:45.771" starttime="20180806 11:44:45.778"></status>
</kw>
<status status="FAIL" endtime="20180806 11:45:45.771" starttime="20180806 11:44:45.772"></status>
</kw>
<status status="FAIL" endtime="20180806 11:45:45.772" starttime="20180806 11:44:45.771"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:45:45.772" critical="yes" starttime="20180806 11:44:45.770">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t3" name="Basic AAF SMS Health Check">
<kw name="Run SMS Health Check" library="sms_interface">
<doc>Runs SMS Health check</doc>
<msg timestamp="20180806 11:45:45.776" level="TRACE">Arguments: [  ]</msg>
<kw name="Run SMS Get Request" library="sms_interface">
<doc>Runs SMS Get request</doc>
<arguments>
<arg>${SMS_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:45:45.778" level="TRACE">Arguments: [ ${data_path}='/v1/sms/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>smssession</arg>
<arg>${SMS_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:45:45.778" level="TRACE">Arguments: [ 'smssession' | 'https://aaf-sms.api.simpledemo.onap.org:10443' ]</msg>
<msg timestamp="20180806 11:45:45.779" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:45:45.779" level="INFO">Creating Session using : alias=smssession, url=https://aaf-sms.api.simpledemo.onap.org:10443, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:45:45.779" level="DEBUG">Creating session: smssession</msg>
<msg timestamp="20180806 11:45:45.779" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:45:45.780" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64b4fe50&gt;</msg>
<msg timestamp="20180806 11:45:45.780" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64b4fe50&gt;</msg>
<status status="PASS" endtime="20180806 11:45:45.780" starttime="20180806 11:45:45.778"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>smssession</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:45:45.781" level="TRACE">Arguments: [ 'smssession' | '/v1/sms/healthcheck' ]</msg>
<msg timestamp="20180806 11:45:45.781" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:45:45.783" level="DEBUG">Starting new HTTPS connection (1): aaf-sms.api.simpledemo.onap.org</msg>
<msg timestamp="20180806 11:46:45.774" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:46:45.775" starttime="20180806 11:45:45.780"></status>
</kw>
<status status="FAIL" endtime="20180806 11:46:45.775" starttime="20180806 11:45:45.777"></status>
</kw>
<status status="FAIL" endtime="20180806 11:46:45.776" starttime="20180806 11:45:45.776"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:46:45.776" critical="yes" starttime="20180806 11:45:45.774">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t4" name="Basic APPC Health Check">
<kw name="Run APPC Health Check" library="appc_interface">
<doc>Runs an APPC healthcheck</doc>
<msg timestamp="20180806 11:46:45.780" level="TRACE">Arguments: [  ]</msg>
<kw name="Run APPC Post Request" library="appc_interface">
<doc>Runs an APPC post request</doc>
<arguments>
<arg>${APPC_INDEX PATH}${APPC_HEALTHCHECK_OPERATION_PATH}</arg>
<arg>${None}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:46:45.782" level="TRACE">Arguments: [ ${data_path}='/restconf/operations/SLI-API:healthcheck' | ${data}=None | ${content}='json' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_APPC_USERNAME}</arg>
<arg>${GLOBAL_APPC_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:46:45.783" level="TRACE">Arguments: [ b'admin' | b'admin' ]</msg>
<msg timestamp="20180806 11:46:45.783" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:46:45.784" level="TRACE">Return: [b'admin', b'admin']</msg>
<msg timestamp="20180806 11:46:45.784" level="INFO">${auth} = ['admin', 'admin']</msg>
<status status="PASS" endtime="20180806 11:46:45.784" starttime="20180806 11:46:45.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${APPC_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180806 11:46:45.785" level="TRACE">Arguments: [ 'Creating session http://192.168.61.15:8282' ]</msg>
<msg timestamp="20180806 11:46:45.785" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:46:45.785" level="INFO">Creating session http://192.168.61.15:8282</msg>
<msg timestamp="20180806 11:46:45.785" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:46:45.785" starttime="20180806 11:46:45.784"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>appc</arg>
<arg>${APPC_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:46:45.786" level="TRACE">Arguments: [ 'appc' | 'http://192.168.61.15:8282' | auth=[b'admin', b'admin'] ]</msg>
<msg timestamp="20180806 11:46:45.786" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:46:45.786" level="INFO">Creating Session using : alias=appc, url=http://192.168.61.15:8282, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe64a15d10&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:46:45.786" level="DEBUG">Creating session: appc</msg>
<msg timestamp="20180806 11:46:45.786" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:46:45.787" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64a15f10&gt;</msg>
<msg timestamp="20180806 11:46:45.787" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64a15f10&gt;</msg>
<status status="PASS" endtime="20180806 11:46:45.787" starttime="20180806 11:46:45.785"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:46:45.788" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:46:45.788" level="DEBUG">Test timeout 1 minute active. 59.99 seconds left.</msg>
<msg timestamp="20180806 11:46:45.788" level="TRACE">Return: UUID('a5d22584-927a-4783-83b3-04bed6eea7d1')</msg>
<msg timestamp="20180806 11:46:45.788" level="INFO">${uuid} = a5d22584-927a-4783-83b3-04bed6eea7d1</msg>
<status status="PASS" endtime="20180806 11:46:45.788" starttime="20180806 11:46:45.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/${content}</arg>
<arg>Content-Type=application/${content}</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:46:45.789" level="TRACE">Arguments: [ 'Accept=application/${content}' | 'Content-Type=application/${content}' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:46:45.790" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-a5d22584-927a-4783-83b3-04bed6eea7d1'}</msg>
<msg timestamp="20180806 11:46:45.790" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-a5d22584-927a-4783-83b3-04bed6eea7d1', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:46:45.790" starttime="20180806 11:46:45.789"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>appc</arg>
<arg>${data_path}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:46:45.791" level="TRACE">Arguments: [ 'appc' | '/restconf/operations/SLI-API:healthcheck' | data=None | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-a5d22584-927a-4783-83b3-04bed6eea7d1'} ]</msg>
<msg timestamp="20180806 11:46:45.792" level="DEBUG">Test timeout 1 minute active. 59.987 seconds left.</msg>
<msg timestamp="20180806 11:46:45.794" level="DEBUG">Starting new HTTP connection (1): 192.168.61.15</msg>
<msg timestamp="20180806 11:46:45.843" level="DEBUG">http://192.168.61.15:8282 "POST /restconf/operations/SLI-API:healthcheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180806 11:46:45.845" level="DEBUG">post response: {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180806 11:46:45.845" level="INFO">Post Request using : alias=appc, uri=/restconf/operations/SLI-API:healthcheck, data=None,                     headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-a5d22584-927a-4783-83b3-04bed6eea7d1', u'X-FromAppId': u'robot-ete'}, files=None, allow_redirects=True </msg>
<msg timestamp="20180806 11:46:45.845" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:46:45.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:46:45.845" starttime="20180806 11:46:45.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from appc ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:46:45.847" level="TRACE">Arguments: [ 'Received response from appc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}' ]</msg>
<msg timestamp="20180806 11:46:45.847" level="DEBUG">Test timeout 1 minute active. 59.931 seconds left.</msg>
<msg timestamp="20180806 11:46:45.847" level="INFO">Received response from appc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180806 11:46:45.847" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:46:45.847" starttime="20180806 11:46:45.846"></status>
</kw>
<msg timestamp="20180806 11:46:45.847" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:46:45.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:46:45.848" starttime="20180806 11:46:45.781"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:46:45.849" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:46:45.849" level="DEBUG">Test timeout 1 minute active. 59.929 seconds left.</msg>
<msg timestamp="20180806 11:46:45.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:46:45.849" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:46:45.850" starttime="20180806 11:46:45.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['output']['response-code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:46:45.851" level="TRACE">Arguments: [ '200' | '200' ]</msg>
<msg timestamp="20180806 11:46:45.851" level="DEBUG">Test timeout 1 minute active. 59.927 seconds left.</msg>
<msg timestamp="20180806 11:46:45.851" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:46:45.851" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:46:45.852" starttime="20180806 11:46:45.850"></status>
</kw>
<msg timestamp="20180806 11:46:45.852" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:46:45.852" starttime="20180806 11:46:45.780"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:46:45.852" critical="yes" starttime="20180806 11:46:45.778"></status>
</test>
<test id="s1-s1-s1-s1-t5" name="Basic CLI Health Check">
<kw name="Run CLI Health Check" library="cli_interface">
<doc>Runs CLI Health check</doc>
<msg timestamp="20180806 11:46:45.855" level="TRACE">Arguments: [  ]</msg>
<kw name="Run CLI Get Request" library="cli_interface">
<doc>Runs CLI Get request</doc>
<arguments>
<arg>${CLI_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:46:45.856" level="TRACE">Arguments: [ ${data_path}='/' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>cli</arg>
<arg>${CLI_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:46:45.857" level="TRACE">Arguments: [ 'cli' | 'http://10.0.9.1:8080' ]</msg>
<msg timestamp="20180806 11:46:45.857" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 11:46:45.857" level="INFO">Creating Session using : alias=cli, url=http://10.0.9.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:46:45.857" level="DEBUG">Creating session: cli</msg>
<msg timestamp="20180806 11:46:45.857" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:46:45.858" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64aa5990&gt;</msg>
<msg timestamp="20180806 11:46:45.858" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64aa5990&gt;</msg>
<status status="PASS" endtime="20180806 11:46:45.858" starttime="20180806 11:46:45.856"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>cli</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:46:45.858" level="TRACE">Arguments: [ 'cli' | '/' ]</msg>
<msg timestamp="20180806 11:46:45.859" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:46:45.860" level="DEBUG">Starting new HTTP connection (1): 10.0.9.1</msg>
<msg timestamp="20180806 11:47:45.854" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:47:45.855" starttime="20180806 11:46:45.858"></status>
</kw>
<status status="FAIL" endtime="20180806 11:47:45.855" starttime="20180806 11:46:45.855"></status>
</kw>
<status status="FAIL" endtime="20180806 11:47:45.855" starttime="20180806 11:46:45.855"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:47:45.856" critical="yes" starttime="20180806 11:46:45.853">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t6" name="Basic CLAMP Health Check">
<kw name="Run CLAMP Health Check" library="clamp_interface">
<doc>Runs CLAMP Health check</doc>
<msg timestamp="20180806 11:47:45.859" level="TRACE">Arguments: [  ]</msg>
<kw name="Run CLAMP Get Request" library="clamp_interface">
<doc>Runs CLAMP Get request</doc>
<arguments>
<arg>${CLAMP_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:45.860" level="TRACE">Arguments: [ ${data_path}='/restservices/clds/v1/clds/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${CLAMP_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:47:45.861" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.21:8080' ]</msg>
<msg timestamp="20180806 11:47:45.861" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:47:45.862" level="INFO">Creating Session using : alias=session, url=http://192.168.61.21:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:47:45.862" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180806 11:47:45.863" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:47:45.863" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64a27d50&gt;</msg>
<msg timestamp="20180806 11:47:45.863" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64a27d50&gt;</msg>
<status status="PASS" endtime="20180806 11:47:45.863" starttime="20180806 11:47:45.861"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:45.864" level="TRACE">Arguments: [ 'session' | '/restservices/clds/v1/clds/healthcheck' ]</msg>
<msg timestamp="20180806 11:47:45.864" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:47:45.866" level="DEBUG">Starting new HTTP connection (1): 192.168.61.21</msg>
<msg timestamp="20180806 11:47:45.957" level="DEBUG">http://192.168.61.21:8080 "GET /restservices/clds/v1/clds/healthcheck HTTP/1.1" 200 79</msg>
<msg timestamp="20180806 11:47:45.958" level="INFO">Get Request using : alias=session, uri=/restservices/clds/v1/clds/healthcheck, headers=None </msg>
<msg timestamp="20180806 11:47:45.958" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:47:45.959" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:47:45.959" starttime="20180806 11:47:45.864"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:47:45.960" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:47:45.960" level="DEBUG">Test timeout 1 minute active. 59.897 seconds left.</msg>
<msg timestamp="20180806 11:47:45.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:47:45.961" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:45.961" starttime="20180806 11:47:45.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from CLAMP ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:47:45.962" level="TRACE">Arguments: [ 'Received response from CLAMP {"healthCheckComponent":"CLDS-APP","healthCheckStatus":"UP","description":"OK"}' ]</msg>
<msg timestamp="20180806 11:47:45.963" level="DEBUG">Test timeout 1 minute active. 59.894 seconds left.</msg>
<msg timestamp="20180806 11:47:45.963" level="INFO">Received response from CLAMP {"healthCheckComponent":"CLDS-APP","healthCheckStatus":"UP","description":"OK"}</msg>
<msg timestamp="20180806 11:47:45.963" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:45.963" starttime="20180806 11:47:45.962"></status>
</kw>
<msg timestamp="20180806 11:47:45.964" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:47:45.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:47:45.964" starttime="20180806 11:47:45.860"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:47:45.965" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:47:45.965" level="DEBUG">Test timeout 1 minute active. 59.892 seconds left.</msg>
<msg timestamp="20180806 11:47:45.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:47:45.966" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:45.966" starttime="20180806 11:47:45.965"></status>
</kw>
<msg timestamp="20180806 11:47:45.966" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:45.966" starttime="20180806 11:47:45.859"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:47:45.967" critical="yes" starttime="20180806 11:47:45.857"></status>
</test>
<test id="s1-s1-s1-s1-t7" name="Basic DCAE Health Check">
<kw name="Run DCAE Health Check" library="dcae_interface">
<doc>Runs a DCAE health check</doc>
<msg timestamp="20180806 11:47:45.970" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_DCAE_USERNAME}</arg>
<arg>${GLOBAL_DCAE_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:47:45.971" level="TRACE">Arguments: [ b'console' | b'ZjJkYjllMjljMTI2M2Iz' ]</msg>
<msg timestamp="20180806 11:47:45.971" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 11:47:45.971" level="TRACE">Return: [b'console', b'ZjJkYjllMjljMTI2M2Iz']</msg>
<msg timestamp="20180806 11:47:45.972" level="INFO">${auth} = ['console', 'ZjJkYjllMjljMTI2M2Iz']</msg>
<status status="PASS" endtime="20180806 11:47:45.972" starttime="20180806 11:47:45.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${DCAE_HEALTH_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180806 11:47:45.972" level="TRACE">Arguments: [ 'Creating session http://192.168.61.31:8000' ]</msg>
<msg timestamp="20180806 11:47:45.972" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:47:45.972" level="INFO">Creating session http://192.168.61.31:8000</msg>
<msg timestamp="20180806 11:47:45.973" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:45.973" starttime="20180806 11:47:45.972"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>dcae</arg>
<arg>${DCAE_HEALTH_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:47:45.973" level="TRACE">Arguments: [ 'dcae' | 'http://192.168.61.31:8000' | auth=[b'console', b'ZjJkYjllMjljMTI2M2Iz'] ]</msg>
<msg timestamp="20180806 11:47:45.974" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:47:45.974" level="INFO">Creating Session using : alias=dcae, url=http://192.168.61.31:8000, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe64a15a50&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:47:45.974" level="DEBUG">Creating session: dcae</msg>
<msg timestamp="20180806 11:47:45.974" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:47:45.974" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe643900d0&gt;</msg>
<msg timestamp="20180806 11:47:45.974" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe643900d0&gt;</msg>
<status status="PASS" endtime="20180806 11:47:45.975" starttime="20180806 11:47:45.973"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:47:45.975" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:47:45.975" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:47:45.975" level="TRACE">Return: UUID('22450b5b-fa09-4466-9ad8-1a5fd0d97898')</msg>
<msg timestamp="20180806 11:47:45.975" level="INFO">${uuid} = 22450b5b-fa09-4466-9ad8-1a5fd0d97898</msg>
<status status="PASS" endtime="20180806 11:47:45.976" starttime="20180806 11:47:45.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>X-ECOMP-Client-Version=ONAP-R2</arg>
<arg>action=getTable</arg>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:47:45.976" level="TRACE">Arguments: [ 'X-ECOMP-Client-Version=ONAP-R2' | 'action=getTable' | 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:47:45.977" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-ECOMP-Client-Version': 'ONAP-R2', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-22450b5b-fa09-4466-9ad8-1a5fd0d97898', 'action': 'getTable'}</msg>
<msg timestamp="20180806 11:47:45.977" level="INFO">${headers} = {u'X-ECOMP-Client-Version': u'ONAP-R2', u'action': u'getTable', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-22450b5b-fa09-4466-9ad8-1a5fd0d978...</msg>
<status status="PASS" endtime="20180806 11:47:45.977" starttime="20180806 11:47:45.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>dcae</arg>
<arg>${DCAE_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:45.978" level="TRACE">Arguments: [ 'dcae' | '/healthcheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-ECOMP-Client-Version': 'ONAP-R2', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-22450b5b-fa09-4466-9ad8-1a5fd0d97898', 'action': 'getTable'} ]</msg>
<msg timestamp="20180806 11:47:45.978" level="DEBUG">Test timeout 1 minute active. 59.99 seconds left.</msg>
<msg timestamp="20180806 11:47:45.980" level="DEBUG">Starting new HTTP connection (1): 192.168.61.31</msg>
<msg timestamp="20180806 11:47:45.983" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=2, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180806 11:47:45.983" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe64390d50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180806 11:47:45.983" level="DEBUG">Starting new HTTP connection (2): 192.168.61.31</msg>
<msg timestamp="20180806 11:47:45.985" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=1, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180806 11:47:46.186" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe64390f90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180806 11:47:46.187" level="DEBUG">Starting new HTTP connection (3): 192.168.61.31</msg>
<msg timestamp="20180806 11:47:46.191" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=0, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180806 11:47:46.592" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe643a2210&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180806 11:47:46.592" level="DEBUG">Starting new HTTP connection (4): 192.168.61.31</msg>
<msg timestamp="20180806 11:47:46.597" level="FAIL">ConnectionError: HTTPConnectionPool(host='192.168.61.31', port=8000): Max retries exceeded with url: /healthcheck (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe643908d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<msg timestamp="20180806 11:47:46.597" level="DEBUG">Traceback (most recent call last):
  File "/var/opt/OpenECOMP_ETE/robot/library/RequestsLibrary/RequestsKeywords.py", line 338, in get_request
    session, uri, params, headers, redir, timeout)
  File "/var/opt/OpenECOMP_ETE/robot/library/RequestsLibrary/RequestsKeywords.py", line 842, in _get_request
    cookies=self.cookies)
  File "/var/opt/OpenECOMP_ETE/robot/library/requests/sessions.py", line 521, in get
    return self.request('GET', url, **kwargs)
  File "/var/opt/OpenECOMP_ETE/robot/library/requests/sessions.py", line 508, in request
    resp = self.send(prep, **send_kwargs)
  File "/var/opt/OpenECOMP_ETE/robot/library/requests/sessions.py", line 618, in send
    r = adapter.send(request, **kwargs)
  File "/var/opt/OpenECOMP_ETE/robot/library/requests/adapters.py", line 508, in send
    raise ConnectionError(e, request=request)</msg>
<status status="FAIL" endtime="20180806 11:47:46.597" starttime="20180806 11:47:45.978"></status>
</kw>
<status status="FAIL" endtime="20180806 11:47:46.597" starttime="20180806 11:47:45.970"></status>
</kw>
<tags>
<tag>dcae</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:47:46.598" critical="yes" starttime="20180806 11:47:45.968">ConnectionError: HTTPConnectionPool(host='192.168.61.31', port=8000): Max retries exceeded with url: /healthcheck (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe643908d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</status>
</test>
<test id="s1-s1-s1-s1-t8" name="Basic DMAAP Message Router Health Check">
<kw name="Run MR Health Check" library="mr_interface">
<doc>Runs MR Health check</doc>
<msg timestamp="20180806 11:47:46.602" level="TRACE">Arguments: [  ]</msg>
<kw name="Run MR Get Request" library="mr_interface">
<doc>Runs MR Get request</doc>
<arguments>
<arg>${MR_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:46.602" level="TRACE">Arguments: [ ${data_path}='/topics' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>mr</arg>
<arg>${MR_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:47:46.603" level="TRACE">Arguments: [ 'mr' | 'http://192.168.61.17:3904' ]</msg>
<msg timestamp="20180806 11:47:46.603" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:47:46.604" level="INFO">Creating Session using : alias=mr, url=http://192.168.61.17:3904, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:47:46.604" level="DEBUG">Creating session: mr</msg>
<msg timestamp="20180806 11:47:46.604" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:47:46.604" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64390990&gt;</msg>
<msg timestamp="20180806 11:47:46.605" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64390990&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.605" starttime="20180806 11:47:46.603"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:47:46.606" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:47:46.606" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:47:46.606" level="TRACE">Return: UUID('1b19e8c3-8247-43f5-95d6-f485a56e606b')</msg>
<msg timestamp="20180806 11:47:46.606" level="INFO">${uuid} = 1b19e8c3-8247-43f5-95d6-f485a56e606b</msg>
<status status="PASS" endtime="20180806 11:47:46.606" starttime="20180806 11:47:46.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:47:46.607" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:47:46.608" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-1b19e8c3-8247-43f5-95d6-f485a56e606b'}</msg>
<msg timestamp="20180806 11:47:46.608" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-1b19e8c3-8247-43f5-95d6-f485a56e606b', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:47:46.608" starttime="20180806 11:47:46.607"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>mr</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:46.609" level="TRACE">Arguments: [ 'mr' | '/topics' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-1b19e8c3-8247-43f5-95d6-f485a56e606b'} ]</msg>
<msg timestamp="20180806 11:47:46.609" level="DEBUG">Test timeout 1 minute active. 59.99 seconds left.</msg>
<msg timestamp="20180806 11:47:46.611" level="DEBUG">Starting new HTTP connection (1): 192.168.61.17</msg>
<msg timestamp="20180806 11:47:46.629" level="DEBUG">http://192.168.61.17:3904 "GET /topics HTTP/1.1" 200 724</msg>
<msg timestamp="20180806 11:47:46.631" level="INFO">Get Request using : alias=mr, uri=/topics, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-1b19e8c3-8247-43f5-95d6-f485a56e606b', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180806 11:47:46.631" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:47:46.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.631" starttime="20180806 11:47:46.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from message router ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:47:46.633" level="TRACE">Arguments: [ 'Received response from message router {"topics": [\n    "ECOMP-PORTAL-OUTBOX-APP1",\n    "unauthenticated.MEASUREMENT_OSAM_OUTPUT",\n    "ECOMP-PORTAL-OUTBOX-POL1",\n    "SDC-DISTR-STATUS-TOPIC-AUTO",\n    "msgrtr.apinode.metrics.dmaap",\n    "APPC-CL",\n    "PDPD-CONFIGURATION",\n    "POLICY-CL-MGT",\n    "SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1",\n    "SDC-DISTR-NOTIF-TOPIC-AUTO",\n    "unauthenticated.SEC_MEASUREMENT_OUTPUT",\n    "SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1",\n    "AAI-EVENT",\n    "ECOMP-PORTAL-OUTBOX-VID1",\n    "ECOMP-PORTAL-INBOX",\n    "ECOMP-PORTAL-OUTBOX-SDC1",\n    "unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT",\n    "unauthenticated.TCA_EVENT_OUTPUT",\n    "DCAE-CL-EVENT",\n    "APPC-TEST2",\n    "APPC-TEST1",\n    "ECOMP-PORTAL-OUTBOX-DBC1"\n]}' ]</msg>
<msg timestamp="20180806 11:47:46.633" level="DEBUG">Test timeout 1 minute active. 59.966 seconds left.</msg>
<msg timestamp="20180806 11:47:46.633" level="INFO">Received response from message router {"topics": [
    "ECOMP-PORTAL-OUTBOX-APP1",
    "unauthenticated.MEASUREMENT_OSAM_OUTPUT",
    "ECOMP-PORTAL-OUTBOX-POL1",
    "SDC-DISTR-STATUS-TOPIC-AUTO",
    "msgrtr.apinode.metrics.dmaap",
    "APPC-CL",
    "PDPD-CONFIGURATION",
    "POLICY-CL-MGT",
    "SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1",
    "SDC-DISTR-NOTIF-TOPIC-AUTO",
    "unauthenticated.SEC_MEASUREMENT_OUTPUT",
    "SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1",
    "AAI-EVENT",
    "ECOMP-PORTAL-OUTBOX-VID1",
    "ECOMP-PORTAL-INBOX",
    "ECOMP-PORTAL-OUTBOX-SDC1",
    "unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT",
    "unauthenticated.TCA_EVENT_OUTPUT",
    "DCAE-CL-EVENT",
    "APPC-TEST2",
    "APPC-TEST1",
    "ECOMP-PORTAL-OUTBOX-DBC1"
]}</msg>
<msg timestamp="20180806 11:47:46.634" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.634" starttime="20180806 11:47:46.632"></status>
</kw>
<msg timestamp="20180806 11:47:46.634" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:47:46.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.635" starttime="20180806 11:47:46.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:47:46.636" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:47:46.636" level="DEBUG">Test timeout 1 minute active. 59.963 seconds left.</msg>
<msg timestamp="20180806 11:47:46.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:47:46.637" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.637" starttime="20180806 11:47:46.635"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>topics</arg>
</arguments>
<msg timestamp="20180806 11:47:46.638" level="TRACE">Arguments: [ {'topics': ['ECOMP-PORTAL-OUTBOX-APP1',
            'unauthenticated.MEASUREMENT_OSAM_OUTPUT',
            'ECOMP-PORTAL-OUTBOX-POL1',
            'SDC-DISTR-STATUS-TOPIC-AUTO',
            'msgrtr.apinode.metrics.dmaap',
            'APPC-CL',
            'PDPD-CONFIGURATION',
            'POLICY-CL-MGT',
            'SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1',
            'SDC-DISTR-NOTIF-TOPIC-AUTO',
            'unauthenticated.SEC_MEASUREMENT_OUTPUT',
            'SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1',
            'AAI-EVENT',
            'ECOMP-PORTAL-OUTBOX-VID1',
            'ECOMP-PORTAL-INBOX',
            'ECOMP-PORTAL-OUTBOX-SDC1',
            'unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT',
            'unauthenticated.TCA_EVENT_OUTPUT',
            'DCAE-CL-EVENT',
            'APPC-TEST2',
            'APPC-TEST1',
            'ECOMP-PORTAL-OUTBOX-DBC1']} | 'topics' ]</msg>
<msg timestamp="20180806 11:47:46.638" level="DEBUG">Test timeout 1 minute active. 59.961 seconds left.</msg>
<msg timestamp="20180806 11:47:46.639" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.639" starttime="20180806 11:47:46.638"></status>
</kw>
<msg timestamp="20180806 11:47:46.639" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.639" starttime="20180806 11:47:46.601"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:47:46.639" critical="yes" starttime="20180806 11:47:46.599"></status>
</test>
<test id="s1-s1-s1-s1-t9" name="Basic External API NBI Health Check">
<kw name="Run NBI Health Check" library="nbi_interface">
<doc>Runs NBI Health check</doc>
<msg timestamp="20180806 11:47:46.642" level="TRACE">Arguments: [  ]</msg>
<kw name="Run NBI Get Request" library="nbi_interface">
<doc>Runs NBI Get request</doc>
<arguments>
<arg>${NBI_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:46.643" level="TRACE">Arguments: [ ${data_path}='/nbi/api/v1/status' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${NBI_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:47:46.644" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.19:8080' ]</msg>
<msg timestamp="20180806 11:47:46.644" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:47:46.644" level="INFO">Creating Session using : alias=session, url=http://192.168.61.19:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:47:46.644" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180806 11:47:46.644" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:47:46.645" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64398910&gt;</msg>
<msg timestamp="20180806 11:47:46.645" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64398910&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.645" starttime="20180806 11:47:46.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:46.646" level="TRACE">Arguments: [ 'session' | '/nbi/api/v1/status' ]</msg>
<msg timestamp="20180806 11:47:46.646" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:47:46.647" level="DEBUG">Starting new HTTP connection (1): 192.168.61.19</msg>
<msg timestamp="20180806 11:47:46.670" level="DEBUG">http://192.168.61.19:8080 "GET /nbi/api/v1/status HTTP/1.1" 200 None</msg>
<msg timestamp="20180806 11:47:46.671" level="INFO">Get Request using : alias=session, uri=/nbi/api/v1/status, headers=None </msg>
<msg timestamp="20180806 11:47:46.671" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:47:46.671" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.671" starttime="20180806 11:47:46.645"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:47:46.672" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:47:46.672" level="DEBUG">Test timeout 1 minute active. 59.968 seconds left.</msg>
<msg timestamp="20180806 11:47:46.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:47:46.673" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.673" starttime="20180806 11:47:46.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from NBI ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:47:46.674" level="TRACE">Arguments: [ 'Received response from NBI {"name":"nbi","status":"ok","version":"v1"}' ]</msg>
<msg timestamp="20180806 11:47:46.674" level="DEBUG">Test timeout 1 minute active. 59.966 seconds left.</msg>
<msg timestamp="20180806 11:47:46.674" level="INFO">Received response from NBI {"name":"nbi","status":"ok","version":"v1"}</msg>
<msg timestamp="20180806 11:47:46.674" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.674" starttime="20180806 11:47:46.673"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20180806 11:47:46.675" level="TRACE">Arguments: [ {'name': 'nbi', 'status': 'ok', 'version': 'v1'} ]</msg>
<msg timestamp="20180806 11:47:46.675" level="DEBUG">Test timeout 1 minute active. 59.965 seconds left.</msg>
<msg timestamp="20180806 11:47:46.675" level="TRACE">Return: {'name': 'nbi', 'status': 'ok', 'version': 'v1'}</msg>
<msg timestamp="20180806 11:47:46.676" level="INFO">${json} = {u'status': u'ok', u'version': u'v1', u'name': u'nbi'}</msg>
<status status="PASS" endtime="20180806 11:47:46.676" starttime="20180806 11:47:46.675"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${json}</arg>
<arg>status</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20180806 11:47:46.677" level="TRACE">Arguments: [ {'name': 'nbi', 'status': 'ok', 'version': 'v1'} | 'status' ]</msg>
<msg timestamp="20180806 11:47:46.677" level="DEBUG">Test timeout 1 minute active. 59.963 seconds left.</msg>
<msg timestamp="20180806 11:47:46.677" level="TRACE">Return: 'ok'</msg>
<msg timestamp="20180806 11:47:46.677" level="INFO">${status} = ok</msg>
<status status="PASS" endtime="20180806 11:47:46.677" starttime="20180806 11:47:46.676"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>ok</arg>
</arguments>
<msg timestamp="20180806 11:47:46.678" level="TRACE">Arguments: [ 'ok' | 'ok' ]</msg>
<msg timestamp="20180806 11:47:46.678" level="DEBUG">Test timeout 1 minute active. 59.962 seconds left.</msg>
<msg timestamp="20180806 11:47:46.678" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:47:46.678" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.678" starttime="20180806 11:47:46.678"></status>
</kw>
<msg timestamp="20180806 11:47:46.679" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:47:46.679" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.679" starttime="20180806 11:47:46.642"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:47:46.680" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:47:46.680" level="DEBUG">Test timeout 1 minute active. 59.96 seconds left.</msg>
<msg timestamp="20180806 11:47:46.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:47:46.680" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.680" starttime="20180806 11:47:46.679"></status>
</kw>
<msg timestamp="20180806 11:47:46.680" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:47:46.681" starttime="20180806 11:47:46.641"></status>
</kw>
<tags>
<tag>api</tag>
<tag>externalapi</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:47:46.681" critical="yes" starttime="20180806 11:47:46.640"></status>
</test>
<test id="s1-s1-s1-s1-t10" name="Basic Microservice Bus Health Check">
<kw name="Run MSB Health Check" library="msb_interface">
<doc>Runs MSB Health check</doc>
<msg timestamp="20180806 11:47:46.683" level="TRACE">Arguments: [  ]</msg>
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>${MSB_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:46.684" level="TRACE">Arguments: [ ${data_path}='/iui/microservices/default.html' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:47:46.684" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:47:46.684" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 11:47:46.685" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:47:46.685" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:47:46.685" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:47:46.685" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6433fe50&gt;</msg>
<msg timestamp="20180806 11:47:46.685" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6433fe50&gt;</msg>
<status status="PASS" endtime="20180806 11:47:46.685" starttime="20180806 11:47:46.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:47:46.686" level="TRACE">Arguments: [ 'msb' | '/iui/microservices/default.html' ]</msg>
<msg timestamp="20180806 11:47:46.686" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:47:46.687" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:48:46.682" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:48:46.682" starttime="20180806 11:47:46.686"></status>
</kw>
<status status="FAIL" endtime="20180806 11:48:46.683" starttime="20180806 11:47:46.683"></status>
</kw>
<status status="FAIL" endtime="20180806 11:48:46.683" starttime="20180806 11:47:46.683"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:48:46.683" critical="yes" starttime="20180806 11:47:46.682">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t11" name="Basic Multicloud API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:48:46.688" level="TRACE">Arguments: [ ${data_path}='/api/multicloud/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:48:46.689" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:48:46.689" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:48:46.690" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:48:46.690" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:48:46.690" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:48:46.691" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64352110&gt;</msg>
<msg timestamp="20180806 11:48:46.691" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64352110&gt;</msg>
<status status="PASS" endtime="20180806 11:48:46.691" starttime="20180806 11:48:46.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:48:46.692" level="TRACE">Arguments: [ 'msb' | '/api/multicloud/v0/swagger.json' ]</msg>
<msg timestamp="20180806 11:48:46.692" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:48:46.694" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:49:46.686" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:49:46.686" starttime="20180806 11:48:46.692"></status>
</kw>
<status status="FAIL" endtime="20180806 11:49:46.687" starttime="20180806 11:48:46.687"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:49:46.687" critical="yes" starttime="20180806 11:48:46.685">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t12" name="Basic Multicloud-ocata API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-ocata/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:49:46.693" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-ocata/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:49:46.694" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:49:46.694" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:49:46.695" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:49:46.695" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:49:46.699" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:49:46.699" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64360e50&gt;</msg>
<msg timestamp="20180806 11:49:46.700" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64360e50&gt;</msg>
<status status="PASS" endtime="20180806 11:49:46.700" starttime="20180806 11:49:46.694"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:49:46.701" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-ocata/v0/swagger.json' ]</msg>
<msg timestamp="20180806 11:49:46.701" level="DEBUG">Test timeout 1 minute active. 59.988 seconds left.</msg>
<msg timestamp="20180806 11:49:46.702" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:50:46.690" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:50:46.690" starttime="20180806 11:49:46.701"></status>
</kw>
<status status="FAIL" endtime="20180806 11:50:46.691" starttime="20180806 11:49:46.692"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:50:46.691" critical="yes" starttime="20180806 11:49:46.689">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t13" name="Basic Multicloud-titanium_cloud API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-titanium_cloud/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:50:46.694" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-titanium_cloud/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:50:46.695" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:50:46.695" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 11:50:46.695" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:50:46.695" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:50:46.696" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:50:46.696" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6436bf10&gt;</msg>
<msg timestamp="20180806 11:50:46.696" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6436bf10&gt;</msg>
<status status="PASS" endtime="20180806 11:50:46.696" starttime="20180806 11:50:46.694"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:50:46.697" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-titanium_cloud/v0/swagger.json' ]</msg>
<msg timestamp="20180806 11:50:46.697" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:50:46.698" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:51:46.693" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:51:46.693" starttime="20180806 11:50:46.696"></status>
</kw>
<status status="FAIL" endtime="20180806 11:51:46.693" starttime="20180806 11:50:46.693"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:51:46.694" critical="yes" starttime="20180806 11:50:46.692">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t14" name="Basic Multicloud-vio API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-vio/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:51:46.698" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-vio/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:51:46.699" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:51:46.700" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:51:46.700" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:51:46.700" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:51:46.700" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:51:46.701" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe643525d0&gt;</msg>
<msg timestamp="20180806 11:51:46.701" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe643525d0&gt;</msg>
<status status="PASS" endtime="20180806 11:51:46.701" starttime="20180806 11:51:46.699"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:51:46.702" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-vio/v0/swagger.json' ]</msg>
<msg timestamp="20180806 11:51:46.702" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:51:46.703" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:52:46.697" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:52:46.697" starttime="20180806 11:51:46.702"></status>
</kw>
<status status="FAIL" endtime="20180806 11:52:46.698" starttime="20180806 11:51:46.697"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:52:46.698" critical="yes" starttime="20180806 11:51:46.695">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t15" name="Basic OOF-Homing Health Check">
<kw name="Run OOF-Homing Health Check" library="oof_interface">
<doc>Runs OOF-Homing Health check</doc>
<msg timestamp="20180806 11:52:46.703" level="TRACE">Arguments: [  ]</msg>
<kw name="Run OOF-Homing Get Request" library="oof_interface">
<doc>Runs OOF-Homing Get request</doc>
<arguments>
<arg>${OOF_HOMING_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:46.704" level="TRACE">Arguments: [ ${data_path}='/v1/plans/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${OOF_HOMING_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:52:46.706" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.23:8091' ]</msg>
<msg timestamp="20180806 11:52:46.706" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:52:46.706" level="INFO">Creating Session using : alias=session, url=http://192.168.61.23:8091, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:52:46.706" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180806 11:52:46.707" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:52:46.707" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6439ddd0&gt;</msg>
<msg timestamp="20180806 11:52:46.707" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6439ddd0&gt;</msg>
<status status="PASS" endtime="20180806 11:52:46.708" starttime="20180806 11:52:46.705"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:46.709" level="TRACE">Arguments: [ 'session' | '/v1/plans/healthcheck' ]</msg>
<msg timestamp="20180806 11:52:46.709" level="DEBUG">Test timeout 1 minute active. 59.991 seconds left.</msg>
<msg timestamp="20180806 11:52:46.711" level="DEBUG">Starting new HTTP connection (1): 192.168.61.23</msg>
<msg timestamp="20180806 11:52:48.783" level="DEBUG">http://192.168.61.23:8091 "GET /v1/plans/healthcheck HTTP/1.1" 200 155</msg>
<msg timestamp="20180806 11:52:48.784" level="INFO">Get Request using : alias=session, uri=/v1/plans/healthcheck, headers=None </msg>
<msg timestamp="20180806 11:52:48.784" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.785" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.785" starttime="20180806 11:52:46.708"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.786" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.786" level="DEBUG">Test timeout 1 minute active. 57.914 seconds left.</msg>
<msg timestamp="20180806 11:52:48.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.787" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.787" starttime="20180806 11:52:48.786"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from OOF-Homing ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.788" level="TRACE">Arguments: [ 'Received response from OOF-Homing {"plans": [{"status": "done", "name": "foo", "links": [[{"href": "http://192.168.61.23:8091/v1/plans/healthcheck", "rel": "self"}]], "id": "healthcheck"}]}' ]</msg>
<msg timestamp="20180806 11:52:48.789" level="DEBUG">Test timeout 1 minute active. 57.912 seconds left.</msg>
<msg timestamp="20180806 11:52:48.789" level="INFO">Received response from OOF-Homing {"plans": [{"status": "done", "name": "foo", "links": [[{"href": "http://192.168.61.23:8091/v1/plans/healthcheck", "rel": "self"}]], "id": "healthcheck"}]}</msg>
<msg timestamp="20180806 11:52:48.789" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.789" starttime="20180806 11:52:48.788"></status>
</kw>
<msg timestamp="20180806 11:52:48.790" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.790" starttime="20180806 11:52:46.703"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.791" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.792" level="DEBUG">Test timeout 1 minute active. 57.908 seconds left.</msg>
<msg timestamp="20180806 11:52:48.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.792" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.792" starttime="20180806 11:52:48.791"></status>
</kw>
<msg timestamp="20180806 11:52:48.793" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.793" starttime="20180806 11:52:46.702"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:52:48.793" critical="yes" starttime="20180806 11:52:46.700"></status>
</test>
<test id="s1-s1-s1-s1-t16" name="Basic OOF-SNIRO Health Check">
<kw name="Run OOF-SNIRO Health Check" library="oof_interface">
<doc>Runs OOF-SNIRO Health check</doc>
<msg timestamp="20180806 11:52:48.797" level="TRACE">Arguments: [  ]</msg>
<kw name="Run OOF-SNIRO Get Request" library="oof_interface">
<doc>Runs OOF-SNIRO Get request</doc>
<arguments>
<arg>${OOF_SNIRO_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:48.798" level="TRACE">Arguments: [ ${data_path}='/api/oof/v1/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${OOF_SNIRO_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:52:48.799" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.23:8698' ]</msg>
<msg timestamp="20180806 11:52:48.799" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:52:48.799" level="INFO">Creating Session using : alias=session, url=http://192.168.61.23:8698, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:52:48.799" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180806 11:52:48.799" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:52:48.799" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6439d9d0&gt;</msg>
<msg timestamp="20180806 11:52:48.799" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6439d9d0&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.800" starttime="20180806 11:52:48.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:48.800" level="TRACE">Arguments: [ 'session' | '/api/oof/v1/healthcheck' ]</msg>
<msg timestamp="20180806 11:52:48.800" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:52:48.801" level="DEBUG">Starting new HTTP connection (1): 192.168.61.23</msg>
<msg timestamp="20180806 11:52:48.810" level="DEBUG">http://192.168.61.23:8698 "GET /api/oof/v1/healthcheck HTTP/1.1" 200 2</msg>
<msg timestamp="20180806 11:52:48.811" level="INFO">Get Request using : alias=session, uri=/api/oof/v1/healthcheck, headers=None </msg>
<msg timestamp="20180806 11:52:48.811" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.812" starttime="20180806 11:52:48.800"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.813" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.813" level="DEBUG">Test timeout 1 minute active. 59.982 seconds left.</msg>
<msg timestamp="20180806 11:52:48.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.814" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.814" starttime="20180806 11:52:48.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from OOF-SNIRO ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.815" level="TRACE">Arguments: [ 'Received response from OOF-SNIRO OK' ]</msg>
<msg timestamp="20180806 11:52:48.815" level="DEBUG">Test timeout 1 minute active. 59.979 seconds left.</msg>
<msg timestamp="20180806 11:52:48.816" level="INFO">Received response from OOF-SNIRO OK</msg>
<msg timestamp="20180806 11:52:48.816" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.816" starttime="20180806 11:52:48.815"></status>
</kw>
<msg timestamp="20180806 11:52:48.816" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.817" starttime="20180806 11:52:48.798"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.818" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.818" level="DEBUG">Test timeout 1 minute active. 59.977 seconds left.</msg>
<msg timestamp="20180806 11:52:48.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.818" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.818" starttime="20180806 11:52:48.817"></status>
</kw>
<msg timestamp="20180806 11:52:48.818" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.819" starttime="20180806 11:52:48.797"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:52:48.819" critical="yes" starttime="20180806 11:52:48.795"></status>
</test>
<test id="s1-s1-s1-s1-t17" name="Basic Policy Health Check">
<kw name="Run Policy Health Check" library="policy_interface">
<doc>Runs Policy Health check</doc>
<msg timestamp="20180806 11:52:48.821" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_POLICY_USERNAME}</arg>
<arg>${GLOBAL_POLICY_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:52:48.822" level="TRACE">Arguments: [ b'healthcheck' | b'zb!XztG34' ]</msg>
<msg timestamp="20180806 11:52:48.822" level="DEBUG">Test timeout 1 minute active. 59.998 seconds left.</msg>
<msg timestamp="20180806 11:52:48.822" level="TRACE">Return: [b'healthcheck', b'zb!XztG34']</msg>
<msg timestamp="20180806 11:52:48.823" level="INFO">${auth} = ['healthcheck', 'zb!XztG34']</msg>
<status status="PASS" endtime="20180806 11:52:48.823" starttime="20180806 11:52:48.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${POLICY_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.823" level="TRACE">Arguments: [ 'Creating session http://192.168.61.14:8081' ]</msg>
<msg timestamp="20180806 11:52:48.824" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:52:48.824" level="INFO">Creating session http://192.168.61.14:8081</msg>
<msg timestamp="20180806 11:52:48.824" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.824" starttime="20180806 11:52:48.823"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>policy</arg>
<arg>${POLICY_HEALTHCHECK_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:52:48.825" level="TRACE">Arguments: [ 'policy' | 'http://192.168.61.14:6969' | auth=[b'healthcheck', b'zb!XztG34'] ]</msg>
<msg timestamp="20180806 11:52:48.825" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:52:48.825" level="INFO">Creating Session using : alias=policy, url=http://192.168.61.14:6969, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe64a15090&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:52:48.825" level="DEBUG">Creating session: policy</msg>
<msg timestamp="20180806 11:52:48.826" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:52:48.826" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64bf09d0&gt;</msg>
<msg timestamp="20180806 11:52:48.826" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64bf09d0&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.826" starttime="20180806 11:52:48.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:52:48.827" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' ]</msg>
<msg timestamp="20180806 11:52:48.827" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20180806 11:52:48.827" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20180806 11:52:48.828" starttime="20180806 11:52:48.827"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>policy</arg>
<arg>${POLICY_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:48.828" level="TRACE">Arguments: [ 'policy' | '/healthcheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20180806 11:52:48.829" level="DEBUG">Test timeout 1 minute active. 59.991 seconds left.</msg>
<msg timestamp="20180806 11:52:48.830" level="DEBUG">Starting new HTTP connection (1): 192.168.61.14</msg>
<msg timestamp="20180806 11:52:48.853" level="DEBUG">http://192.168.61.14:6969 "GET /healthcheck HTTP/1.1" 200 276</msg>
<msg timestamp="20180806 11:52:48.853" level="INFO">Get Request using : alias=policy, uri=/healthcheck, headers={u'Accept': u'application/json', u'Content-Type': u'application/json'} </msg>
<msg timestamp="20180806 11:52:48.853" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.854" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.854" starttime="20180806 11:52:48.828"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from policy ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.854" level="TRACE">Arguments: [ 'Received response from policy {"healthy":true,"details":[{"name":"PDP-D","url":"self","healthy":true,"code":200,"message":"alive"},{"name":"PAP","url":"http://pap:9091/pap/test","healthy":true,"code":200,"message":""},{"name":"PDP","url":"http://pdp:8081/pdp/test","healthy":true,"code":200,"message":""}]}' ]</msg>
<msg timestamp="20180806 11:52:48.854" level="DEBUG">Test timeout 1 minute active. 59.965 seconds left.</msg>
<msg timestamp="20180806 11:52:48.855" level="INFO">Received response from policy {"healthy":true,"details":[{"name":"PDP-D","url":"self","healthy":true,"code":200,"message":"alive"},{"name":"PAP","url":"http://pap:9091/pap/test","healthy":true,"code":200,"message":""},{"name":"PDP","url":"http://pdp:8081/pdp/test","healthy":true,"code":200,"message":""}]}</msg>
<msg timestamp="20180806 11:52:48.855" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.855" starttime="20180806 11:52:48.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.855" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.855" level="DEBUG">Test timeout 1 minute active. 59.964 seconds left.</msg>
<msg timestamp="20180806 11:52:48.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.856" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.856" starttime="20180806 11:52:48.855"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp.json()['healthy']}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.856" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180806 11:52:48.856" level="DEBUG">Test timeout 1 minute active. 59.963 seconds left.</msg>
<msg timestamp="20180806 11:52:48.857" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.857" starttime="20180806 11:52:48.856"></status>
</kw>
<kw name="Copy List" library="Collections">
<doc>Returns a copy of the given list.</doc>
<arguments>
<arg>${resp.json()['details']}</arg>
</arguments>
<assign>
<var>@{ITEMS}</var>
</assign>
<msg timestamp="20180806 11:52:48.857" level="TRACE">Arguments: [ [{'code': 200, 'healthy': True, 'message': 'alive', 'name': 'PDP-D', 'url': 'self'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PAP', 'url': 'http://pap:9091/pap/test'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PDP', 'url': 'http://pdp:8081/pdp/test'}] ]</msg>
<msg timestamp="20180806 11:52:48.858" level="DEBUG">Test timeout 1 minute active. 59.962 seconds left.</msg>
<msg timestamp="20180806 11:52:48.858" level="TRACE">Return: [{'code': 200, 'healthy': True, 'message': 'alive', 'name': 'PDP-D', 'url': 'self'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PAP', 'url': 'http://pap:9091/pap/test'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PDP', 'url': 'http://pdp:8081/pdp/test'}]</msg>
<msg timestamp="20180806 11:52:48.858" level="INFO">@{ITEMS} = [ {u'url': u'self', u'healthy': True, u'message': u'alive', u'code': 200, u'name': u'PDP-D'} | {u'url': u'http://pap:9091/pap/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PAP'} |...</msg>
<status status="PASS" endtime="20180806 11:52:48.858" starttime="20180806 11:52:48.857"></status>
</kw>
<kw type="for" name="${ELEMENT} IN [ @{ITEMS} ]">
<kw type="foritem" name="${ELEMENT} = {u'url': u'self', u'healthy': True, u'message': u'alive', u'code': 200, u'name': u'PDP-D'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.859" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.859" level="DEBUG">Test timeout 1 minute active. 59.961 seconds left.</msg>
<msg timestamp="20180806 11:52:48.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.859" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.859" starttime="20180806 11:52:48.859"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.860" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180806 11:52:48.860" level="DEBUG">Test timeout 1 minute active. 59.96 seconds left.</msg>
<msg timestamp="20180806 11:52:48.860" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.860" starttime="20180806 11:52:48.860"></status>
</kw>
<status status="PASS" endtime="20180806 11:52:48.860" starttime="20180806 11:52:48.859"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = {u'url': u'http://pap:9091/pap/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PAP'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.861" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.861" level="DEBUG">Test timeout 1 minute active. 59.959 seconds left.</msg>
<msg timestamp="20180806 11:52:48.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.861" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.861" starttime="20180806 11:52:48.861"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.862" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180806 11:52:48.862" level="DEBUG">Test timeout 1 minute active. 59.958 seconds left.</msg>
<msg timestamp="20180806 11:52:48.862" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.862" starttime="20180806 11:52:48.862"></status>
</kw>
<status status="PASS" endtime="20180806 11:52:48.862" starttime="20180806 11:52:48.860"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = {u'url': u'http://pdp:8081/pdp/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PDP'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.863" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.863" level="DEBUG">Test timeout 1 minute active. 59.957 seconds left.</msg>
<msg timestamp="20180806 11:52:48.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.863" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.863" starttime="20180806 11:52:48.863"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.864" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180806 11:52:48.864" level="DEBUG">Test timeout 1 minute active. 59.956 seconds left.</msg>
<msg timestamp="20180806 11:52:48.864" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.864" starttime="20180806 11:52:48.864"></status>
</kw>
<status status="PASS" endtime="20180806 11:52:48.864" starttime="20180806 11:52:48.862"></status>
</kw>
<status status="PASS" endtime="20180806 11:52:48.864" starttime="20180806 11:52:48.858"></status>
</kw>
<msg timestamp="20180806 11:52:48.864" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.864" starttime="20180806 11:52:48.821"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:52:48.865" critical="yes" starttime="20180806 11:52:48.820"></status>
</test>
<test id="s1-s1-s1-s1-t18" name="Basic Portal Health Check">
<kw name="Run Portal Health Check" library="portal_interface">
<doc>Runs Portal Health check</doc>
<msg timestamp="20180806 11:52:48.866" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Portal Get Request" library="portal_interface">
<doc>Runs Portal Get request</doc>
<arguments>
<arg>${PORTAL_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:48.867" level="TRACE">Arguments: [ ${data_path}='/ONAPPORTAL/portalApi/healthCheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>portal</arg>
<arg>${PORTAL_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:52:48.868" level="TRACE">Arguments: [ 'portal' | 'http://192.168.61.16:8989' ]</msg>
<msg timestamp="20180806 11:52:48.868" level="DEBUG">Test timeout 1 minute active. 59.998 seconds left.</msg>
<msg timestamp="20180806 11:52:48.868" level="INFO">Creating Session using : alias=portal, url=http://192.168.61.16:8989, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:52:48.868" level="DEBUG">Creating session: portal</msg>
<msg timestamp="20180806 11:52:48.868" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:52:48.868" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6439d390&gt;</msg>
<msg timestamp="20180806 11:52:48.869" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6439d390&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.869" starttime="20180806 11:52:48.867"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:52:48.869" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:52:48.869" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:52:48.869" level="TRACE">Return: UUID('879deb2c-d3d0-49f6-8f7c-d7f8b10a44de')</msg>
<msg timestamp="20180806 11:52:48.870" level="INFO">${uuid} = 879deb2c-d3d0-49f6-8f7c-d7f8b10a44de</msg>
<status status="PASS" endtime="20180806 11:52:48.870" starttime="20180806 11:52:48.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:52:48.870" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:52:48.871" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-879deb2c-d3d0-49f6-8f7c-d7f8b10a44de'}</msg>
<msg timestamp="20180806 11:52:48.871" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-879deb2c-d3d0-49f6-8f7c-d7f8b10a44de', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:52:48.871" starttime="20180806 11:52:48.870"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>portal</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:48.872" level="TRACE">Arguments: [ 'portal' | '/ONAPPORTAL/portalApi/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-879deb2c-d3d0-49f6-8f7c-d7f8b10a44de'} ]</msg>
<msg timestamp="20180806 11:52:48.872" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:52:48.873" level="DEBUG">Starting new HTTP connection (1): 192.168.61.16</msg>
<msg timestamp="20180806 11:52:48.948" level="DEBUG">http://192.168.61.16:8989 "GET /ONAPPORTAL/portalApi/healthCheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180806 11:52:48.970" level="INFO">Get Request using : alias=portal, uri=/ONAPPORTAL/portalApi/healthCheck, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-879deb2c-d3d0-49f6-8f7c-d7f8b10a44de', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180806 11:52:48.970" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.971" starttime="20180806 11:52:48.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from portal ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:52:48.972" level="TRACE">Arguments: [ 'Received response from portal {"statusCode":200,"body":"[{\\"healthCheckComponent\\":\\"BE\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"65111bf67c9e\\",\\"ipAddress\\":\\"172.18.0.7\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"},{\\"healthCheckComponent\\":\\"FE\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"},{\\"healthCheckComponent\\":\\"DB\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"OK\\",\\"dbPermissions\\":\\"OK\\"},{\\"healthCheckComponent\\":\\"UEB\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"}]"}' ]</msg>
<msg timestamp="20180806 11:52:48.972" level="DEBUG">Test timeout 1 minute active. 59.893 seconds left.</msg>
<msg timestamp="20180806 11:52:48.973" level="INFO">Received response from portal {"statusCode":200,"body":"[{\"healthCheckComponent\":\"BE\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"65111bf67c9e\",\"ipAddress\":\"172.18.0.7\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"},{\"healthCheckComponent\":\"FE\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"},{\"healthCheckComponent\":\"DB\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"OK\",\"dbPermissions\":\"OK\"},{\"healthCheckComponent\":\"UEB\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"}]"}</msg>
<msg timestamp="20180806 11:52:48.973" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.973" starttime="20180806 11:52:48.971"></status>
</kw>
<msg timestamp="20180806 11:52:48.974" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:52:48.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.974" starttime="20180806 11:52:48.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.975" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.976" level="DEBUG">Test timeout 1 minute active. 59.89 seconds left.</msg>
<msg timestamp="20180806 11:52:48.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.976" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.976" starttime="20180806 11:52:48.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['statusCode']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:52:48.978" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:52:48.978" level="DEBUG">Test timeout 1 minute active. 59.887 seconds left.</msg>
<msg timestamp="20180806 11:52:48.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:52:48.978" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.978" starttime="20180806 11:52:48.977"></status>
</kw>
<msg timestamp="20180806 11:52:48.978" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:52:48.979" starttime="20180806 11:52:48.866"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:52:48.979" critical="yes" starttime="20180806 11:52:48.865"></status>
</test>
<test id="s1-s1-s1-s1-t19" name="Basic SDC Health Check">
<kw name="Run ASDC Health Check" library="asdc_interface">
<doc>Runs a ASDC health check</doc>
<msg timestamp="20180806 11:52:48.981" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>asdc</arg>
<arg>${ASDC_FE_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:52:48.982" level="TRACE">Arguments: [ 'asdc' | 'http://10.0.3.1:8181' ]</msg>
<msg timestamp="20180806 11:52:48.982" level="DEBUG">Test timeout 1 minute active. 59.998 seconds left.</msg>
<msg timestamp="20180806 11:52:48.982" level="INFO">Creating Session using : alias=asdc, url=http://10.0.3.1:8181, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:52:48.982" level="DEBUG">Creating session: asdc</msg>
<msg timestamp="20180806 11:52:48.983" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:52:48.983" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64b8cb50&gt;</msg>
<msg timestamp="20180806 11:52:48.983" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64b8cb50&gt;</msg>
<status status="PASS" endtime="20180806 11:52:48.983" starttime="20180806 11:52:48.982"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:52:48.984" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:52:48.984" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:52:48.984" level="TRACE">Return: UUID('ef8d2c72-cc41-4565-ac2b-4155211eccf2')</msg>
<msg timestamp="20180806 11:52:48.984" level="INFO">${uuid} = ef8d2c72-cc41-4565-ac2b-4155211eccf2</msg>
<status status="PASS" endtime="20180806 11:52:48.984" starttime="20180806 11:52:48.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:52:48.985" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:52:48.986" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-ef8d2c72-cc41-4565-ac2b-4155211eccf2'}</msg>
<msg timestamp="20180806 11:52:48.986" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-ef8d2c72-cc41-4565-ac2b-4155211eccf2', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:52:48.986" starttime="20180806 11:52:48.985"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>asdc</arg>
<arg>${ASDC_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:52:48.987" level="TRACE">Arguments: [ 'asdc' | '/sdc1/rest/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-ef8d2c72-cc41-4565-ac2b-4155211eccf2'} ]</msg>
<msg timestamp="20180806 11:52:48.988" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:52:48.989" level="DEBUG">Starting new HTTP connection (1): 10.0.3.1</msg>
<msg timestamp="20180806 11:53:48.980" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:53:48.981" starttime="20180806 11:52:48.987"></status>
</kw>
<status status="FAIL" endtime="20180806 11:53:48.981" starttime="20180806 11:52:48.981"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:53:48.982" critical="yes" starttime="20180806 11:52:48.980">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t20" name="Basic SDNC Health Check">
<kw name="Run SDNGC Health Check" library="sdngc_interface">
<doc>Runs an SDNGC healthcheck</doc>
<msg timestamp="20180806 11:53:48.986" level="TRACE">Arguments: [  ]</msg>
<kw name="Run SDNGC Post Request" library="sdngc_interface">
<doc>Runs an SDNGC post request</doc>
<arguments>
<arg>${SDNGC_INDEX PATH}${SDNCGC_HEALTHCHECK_OPERATION_PATH}</arg>
<arg>${None}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:53:48.988" level="TRACE">Arguments: [ ${data_path}='/restconf/operations/SLI-API:healthcheck' | ${data}=None ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_SDNGC_USERNAME}</arg>
<arg>${GLOBAL_SDNGC_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:53:48.990" level="TRACE">Arguments: [ b'admin' | b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U' ]</msg>
<msg timestamp="20180806 11:53:48.990" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 11:53:48.991" level="TRACE">Return: [b'admin', b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U']</msg>
<msg timestamp="20180806 11:53:48.991" level="INFO">${auth} = ['admin', 'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U']</msg>
<status status="PASS" endtime="20180806 11:53:48.991" starttime="20180806 11:53:48.989"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${SDNGC_REST_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180806 11:53:48.992" level="TRACE">Arguments: [ 'Creating session http://192.168.61.24:8282' ]</msg>
<msg timestamp="20180806 11:53:48.993" level="DEBUG">Test timeout 1 minute active. 59.991 seconds left.</msg>
<msg timestamp="20180806 11:53:48.993" level="INFO">Creating session http://192.168.61.24:8282</msg>
<msg timestamp="20180806 11:53:48.993" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:48.993" starttime="20180806 11:53:48.992"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>sdngc</arg>
<arg>${SDNGC_REST_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:53:48.995" level="TRACE">Arguments: [ 'sdngc' | 'http://192.168.61.24:8282' | auth=[b'admin', b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U'] ]</msg>
<msg timestamp="20180806 11:53:48.995" level="DEBUG">Test timeout 1 minute active. 59.989 seconds left.</msg>
<msg timestamp="20180806 11:53:48.995" level="INFO">Creating Session using : alias=sdngc, url=http://192.168.61.24:8282, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe64babb50&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:53:48.995" level="DEBUG">Creating session: sdngc</msg>
<msg timestamp="20180806 11:53:48.996" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:53:48.996" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64bab250&gt;</msg>
<msg timestamp="20180806 11:53:48.997" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64bab250&gt;</msg>
<status status="PASS" endtime="20180806 11:53:48.997" starttime="20180806 11:53:48.994"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:53:48.998" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:53:48.998" level="DEBUG">Test timeout 1 minute active. 59.986 seconds left.</msg>
<msg timestamp="20180806 11:53:48.998" level="TRACE">Return: UUID('b40f689c-5849-4d7d-bb87-e2e3111f19d8')</msg>
<msg timestamp="20180806 11:53:48.998" level="INFO">${uuid} = b40f689c-5849-4d7d-bb87-e2e3111f19d8</msg>
<status status="PASS" endtime="20180806 11:53:48.998" starttime="20180806 11:53:48.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:53:48.999" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:53:49.000" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-b40f689c-5849-4d7d-bb87-e2e3111f19d8'}</msg>
<msg timestamp="20180806 11:53:49.000" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-b40f689c-5849-4d7d-bb87-e2e3111f19d8', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:53:49.000" starttime="20180806 11:53:48.999"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>sdngc</arg>
<arg>${data_path}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:53:49.001" level="TRACE">Arguments: [ 'sdngc' | '/restconf/operations/SLI-API:healthcheck' | data=None | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-b40f689c-5849-4d7d-bb87-e2e3111f19d8'} ]</msg>
<msg timestamp="20180806 11:53:49.001" level="DEBUG">Test timeout 1 minute active. 59.982 seconds left.</msg>
<msg timestamp="20180806 11:53:49.003" level="DEBUG">Starting new HTTP connection (1): 192.168.61.24</msg>
<msg timestamp="20180806 11:53:49.047" level="DEBUG">http://192.168.61.24:8282 "POST /restconf/operations/SLI-API:healthcheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180806 11:53:49.048" level="DEBUG">post response: {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180806 11:53:49.049" level="INFO">Post Request using : alias=sdngc, uri=/restconf/operations/SLI-API:healthcheck, data=None,                     headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-b40f689c-5849-4d7d-bb87-e2e3111f19d8', u'X-FromAppId': u'robot-ete'}, files=None, allow_redirects=True </msg>
<msg timestamp="20180806 11:53:49.049" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:53:49.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:53:49.049" starttime="20180806 11:53:49.001"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from sdngc ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 11:53:49.051" level="TRACE">Arguments: [ 'Received response from sdngc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}' ]</msg>
<msg timestamp="20180806 11:53:49.051" level="DEBUG">Test timeout 1 minute active. 59.933 seconds left.</msg>
<msg timestamp="20180806 11:53:49.051" level="INFO">Received response from sdngc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180806 11:53:49.051" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:49.052" starttime="20180806 11:53:49.050"></status>
</kw>
<msg timestamp="20180806 11:53:49.052" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:53:49.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:53:49.052" starttime="20180806 11:53:48.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:53:49.054" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:53:49.054" level="DEBUG">Test timeout 1 minute active. 59.93 seconds left.</msg>
<msg timestamp="20180806 11:53:49.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:53:49.054" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:49.055" starttime="20180806 11:53:49.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['output']['response-code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:53:49.056" level="TRACE">Arguments: [ '200' | '200' ]</msg>
<msg timestamp="20180806 11:53:49.056" level="DEBUG">Test timeout 1 minute active. 59.927 seconds left.</msg>
<msg timestamp="20180806 11:53:49.056" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:53:49.057" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:49.057" starttime="20180806 11:53:49.055"></status>
</kw>
<msg timestamp="20180806 11:53:49.057" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:49.057" starttime="20180806 11:53:48.986"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:53:49.058" critical="yes" starttime="20180806 11:53:48.983"></status>
</test>
<test id="s1-s1-s1-s1-t21" name="Basic SO Health Check">
<kw name="Run MSO Health Check" library="mso_interface">
<doc>Runs an MSO global health check</doc>
<msg timestamp="20180806 11:53:49.059" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_MSO_USERNAME}</arg>
<arg>${GLOBAL_MSO_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 11:53:49.060" level="TRACE">Arguments: [ b'InfraPortalClient' | b'password1$' ]</msg>
<msg timestamp="20180806 11:53:49.060" level="DEBUG">Test timeout 1 minute active. 59.998 seconds left.</msg>
<msg timestamp="20180806 11:53:49.060" level="TRACE">Return: [b'InfraPortalClient', b'password1$']</msg>
<msg timestamp="20180806 11:53:49.060" level="INFO">${auth} = ['InfraPortalClient', 'password1$']</msg>
<status status="PASS" endtime="20180806 11:53:49.060" starttime="20180806 11:53:49.060"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>mso</arg>
<arg>${MSO_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:53:49.061" level="TRACE">Arguments: [ 'mso' | 'http://192.168.61.25:8080' ]</msg>
<msg timestamp="20180806 11:53:49.061" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 11:53:49.061" level="INFO">Creating Session using : alias=mso, url=http://192.168.61.25:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:53:49.061" level="DEBUG">Creating session: mso</msg>
<msg timestamp="20180806 11:53:49.061" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:53:49.062" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64360410&gt;</msg>
<msg timestamp="20180806 11:53:49.062" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64360410&gt;</msg>
<status status="PASS" endtime="20180806 11:53:49.062" starttime="20180806 11:53:49.061"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 11:53:49.062" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 11:53:49.062" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:53:49.062" level="TRACE">Return: UUID('dd17e2f4-34be-4fb5-80c3-df9d1c1ce7fe')</msg>
<msg timestamp="20180806 11:53:49.063" level="INFO">${uuid} = dd17e2f4-34be-4fb5-80c3-df9d1c1ce7fe</msg>
<status status="PASS" endtime="20180806 11:53:49.063" starttime="20180806 11:53:49.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=text/html</arg>
<arg>Content-Type=text/html</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 11:53:49.063" level="TRACE">Arguments: [ 'Accept=text/html' | 'Content-Type=text/html' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 11:53:49.064" level="TRACE">Return: {'Accept': 'text/html', 'Content-Type': 'text/html', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-dd17e2f4-34be-4fb5-80c3-df9d1c1ce7fe'}</msg>
<msg timestamp="20180806 11:53:49.064" level="INFO">${headers} = {u'Accept': u'text/html', u'Content-Type': u'text/html', u'X-TransactionId': u'robot-ete-dd17e2f4-34be-4fb5-80c3-df9d1c1ce7fe', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180806 11:53:49.064" starttime="20180806 11:53:49.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>mso</arg>
<arg>${MSO_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:53:49.064" level="TRACE">Arguments: [ 'mso' | '/ecomp/mso/infra/globalhealthcheck' | headers={'Accept': 'text/html', 'Content-Type': 'text/html', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-dd17e2f4-34be-4fb5-80c3-df9d1c1ce7fe'} ]</msg>
<msg timestamp="20180806 11:53:49.065" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 11:53:49.066" level="DEBUG">Starting new HTTP connection (1): 192.168.61.25</msg>
<msg timestamp="20180806 11:53:49.217" level="DEBUG">http://192.168.61.25:8080 "GET /ecomp/mso/infra/globalhealthcheck HTTP/1.1" 200 125</msg>
<msg timestamp="20180806 11:53:49.218" level="INFO">Get Request using : alias=mso, uri=/ecomp/mso/infra/globalhealthcheck, headers={u'Accept': u'text/html', u'Content-Type': u'text/html', u'X-TransactionId': u'robot-ete-dd17e2f4-34be-4fb5-80c3-df9d1c1ce7fe', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180806 11:53:49.218" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 11:53:49.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 11:53:49.218" starttime="20180806 11:53:49.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 11:53:49.219" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 11:53:49.219" level="DEBUG">Test timeout 1 minute active. 59.839 seconds left.</msg>
<msg timestamp="20180806 11:53:49.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 11:53:49.220" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:49.220" starttime="20180806 11:53:49.219"></status>
</kw>
<msg timestamp="20180806 11:53:49.220" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 11:53:49.220" starttime="20180806 11:53:49.059"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 11:53:49.220" critical="yes" starttime="20180806 11:53:49.058"></status>
</test>
<test id="s1-s1-s1-s1-t22" name="Basic UseCaseUI API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/iui/usecaseui/</arg>
</arguments>
<msg timestamp="20180806 11:53:49.223" level="TRACE">Arguments: [ ${data_path}='/iui/usecaseui/' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:53:49.224" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:53:49.224" level="DEBUG">Test timeout 1 minute active. 59.998 seconds left.</msg>
<msg timestamp="20180806 11:53:49.224" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:53:49.224" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:53:49.224" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:53:49.225" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64baf610&gt;</msg>
<msg timestamp="20180806 11:53:49.225" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64baf610&gt;</msg>
<status status="PASS" endtime="20180806 11:53:49.225" starttime="20180806 11:53:49.223"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:53:49.226" level="TRACE">Arguments: [ 'msb' | '/iui/usecaseui/' ]</msg>
<msg timestamp="20180806 11:53:49.226" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:53:49.227" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:54:49.222" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:54:49.222" starttime="20180806 11:53:49.225"></status>
</kw>
<status status="FAIL" endtime="20180806 11:54:49.222" starttime="20180806 11:53:49.222"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:54:49.223" critical="yes" starttime="20180806 11:53:49.221">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t23" name="Basic VFC catalog API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/catalog/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:54:49.228" level="TRACE">Arguments: [ ${data_path}='/api/catalog/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:54:49.229" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:54:49.230" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:54:49.230" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:54:49.230" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:54:49.231" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:54:49.231" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64b59a10&gt;</msg>
<msg timestamp="20180806 11:54:49.231" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64b59a10&gt;</msg>
<status status="PASS" endtime="20180806 11:54:49.231" starttime="20180806 11:54:49.229"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:54:49.233" level="TRACE">Arguments: [ 'msb' | '/api/catalog/v1/swagger.json' ]</msg>
<msg timestamp="20180806 11:54:49.233" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:54:49.234" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:55:49.226" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:55:49.226" starttime="20180806 11:54:49.232"></status>
</kw>
<status status="FAIL" endtime="20180806 11:55:49.226" starttime="20180806 11:54:49.227"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:55:49.227" critical="yes" starttime="20180806 11:54:49.224">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t24" name="Basic VFC emsdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/emsdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:55:49.232" level="TRACE">Arguments: [ ${data_path}='/api/emsdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:55:49.233" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:55:49.233" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:55:49.234" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:55:49.234" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:55:49.234" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:55:49.235" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64a9d290&gt;</msg>
<msg timestamp="20180806 11:55:49.235" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64a9d290&gt;</msg>
<status status="PASS" endtime="20180806 11:55:49.235" starttime="20180806 11:55:49.233"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:55:49.236" level="TRACE">Arguments: [ 'msb' | '/api/emsdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 11:55:49.236" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:55:49.238" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:56:49.229" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:56:49.230" starttime="20180806 11:55:49.236"></status>
</kw>
<status status="FAIL" endtime="20180806 11:56:49.230" starttime="20180806 11:55:49.231"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:56:49.231" critical="yes" starttime="20180806 11:55:49.229">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t25" name="Basic VFC gvnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/gvnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:56:49.235" level="TRACE">Arguments: [ ${data_path}='/api/gvnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:56:49.237" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:56:49.237" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:56:49.238" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:56:49.238" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:56:49.238" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:56:49.239" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64b6add0&gt;</msg>
<msg timestamp="20180806 11:56:49.239" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64b6add0&gt;</msg>
<status status="PASS" endtime="20180806 11:56:49.239" starttime="20180806 11:56:49.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:56:49.240" level="TRACE">Arguments: [ 'msb' | '/api/gvnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 11:56:49.240" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:56:49.242" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:57:49.233" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:57:49.234" starttime="20180806 11:56:49.240"></status>
</kw>
<status status="FAIL" endtime="20180806 11:57:49.234" starttime="20180806 11:56:49.235"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:57:49.234" critical="yes" starttime="20180806 11:56:49.232">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t26" name="Basic VFC huaweivnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/huaweivnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:57:49.239" level="TRACE">Arguments: [ ${data_path}='/api/huaweivnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:57:49.241" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:57:49.241" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 11:57:49.241" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:57:49.241" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:57:49.243" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:57:49.243" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64afa890&gt;</msg>
<msg timestamp="20180806 11:57:49.243" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64afa890&gt;</msg>
<status status="PASS" endtime="20180806 11:57:49.243" starttime="20180806 11:57:49.240"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:57:49.244" level="TRACE">Arguments: [ 'msb' | '/api/huaweivnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 11:57:49.245" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:57:49.247" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:58:49.238" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:58:49.238" starttime="20180806 11:57:49.244"></status>
</kw>
<status status="FAIL" endtime="20180806 11:58:49.238" starttime="20180806 11:57:49.239"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:58:49.239" critical="yes" starttime="20180806 11:57:49.236">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t27" name="Basic VFC jujuvnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/jujuvnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:58:49.243" level="TRACE">Arguments: [ ${data_path}='/api/jujuvnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:58:49.245" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:58:49.245" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:58:49.245" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:58:49.246" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:58:49.246" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:58:49.247" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64b72310&gt;</msg>
<msg timestamp="20180806 11:58:49.247" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64b72310&gt;</msg>
<status status="PASS" endtime="20180806 11:58:49.247" starttime="20180806 11:58:49.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:58:49.248" level="TRACE">Arguments: [ 'msb' | '/api/jujuvnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 11:58:49.248" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 11:58:49.250" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 11:59:49.241" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 11:59:49.241" starttime="20180806 11:58:49.248"></status>
</kw>
<status status="FAIL" endtime="20180806 11:59:49.242" starttime="20180806 11:58:49.243"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 11:59:49.242" critical="yes" starttime="20180806 11:58:49.240">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t28" name="Basic VFC multivimproxy API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multivimproxy/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 11:59:49.245" level="TRACE">Arguments: [ ${data_path}='/api/multivimproxy/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 11:59:49.246" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 11:59:49.246" level="DEBUG">Test timeout 1 minute active. 59.998 seconds left.</msg>
<msg timestamp="20180806 11:59:49.246" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 11:59:49.246" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 11:59:49.246" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 11:59:49.247" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64baff50&gt;</msg>
<msg timestamp="20180806 11:59:49.247" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64baff50&gt;</msg>
<status status="PASS" endtime="20180806 11:59:49.247" starttime="20180806 11:59:49.245"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 11:59:49.248" level="TRACE">Arguments: [ 'msb' | '/api/multivimproxy/v1/swagger.json' ]</msg>
<msg timestamp="20180806 11:59:49.248" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 11:59:49.250" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:00:49.244" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:00:49.244" starttime="20180806 11:59:49.247"></status>
</kw>
<status status="FAIL" endtime="20180806 12:00:49.244" starttime="20180806 11:59:49.244"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:00:49.245" critical="yes" starttime="20180806 11:59:49.243">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t29" name="Basic VFC nokiavnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/nokiavnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:00:49.249" level="TRACE">Arguments: [ ${data_path}='/api/nokiavnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:00:49.250" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:00:49.250" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 12:00:49.250" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:00:49.251" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:00:49.251" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:00:49.251" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64330150&gt;</msg>
<msg timestamp="20180806 12:00:49.251" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64330150&gt;</msg>
<status status="PASS" endtime="20180806 12:00:49.252" starttime="20180806 12:00:49.250"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:00:49.253" level="TRACE">Arguments: [ 'msb' | '/api/nokiavnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:00:49.253" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 12:00:49.254" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:01:49.248" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:01:49.249" starttime="20180806 12:00:49.252"></status>
</kw>
<status status="FAIL" endtime="20180806 12:01:49.249" starttime="20180806 12:00:49.248"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:01:49.250" critical="yes" starttime="20180806 12:00:49.246">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t30" name="Basic VFC nokiav2driver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/NokiaSVNFM/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:01:49.255" level="TRACE">Arguments: [ ${data_path}='/api/NokiaSVNFM/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:01:49.256" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:01:49.256" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 12:01:49.257" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:01:49.257" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:01:49.257" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:01:49.258" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64a15110&gt;</msg>
<msg timestamp="20180806 12:01:49.258" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64a15110&gt;</msg>
<status status="PASS" endtime="20180806 12:01:49.258" starttime="20180806 12:01:49.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:01:49.259" level="TRACE">Arguments: [ 'msb' | '/api/NokiaSVNFM/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:01:49.259" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 12:01:49.260" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:02:49.253" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:02:49.253" starttime="20180806 12:01:49.259"></status>
</kw>
<status status="FAIL" endtime="20180806 12:02:49.254" starttime="20180806 12:01:49.254"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:02:49.254" critical="yes" starttime="20180806 12:01:49.251">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t31" name="Basic VFC nslcm API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/nslcm/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:02:49.259" level="TRACE">Arguments: [ ${data_path}='/api/nslcm/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:02:49.261" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:02:49.261" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 12:02:49.261" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:02:49.262" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:02:49.262" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:02:49.263" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe64322310&gt;</msg>
<msg timestamp="20180806 12:02:49.263" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe64322310&gt;</msg>
<status status="PASS" endtime="20180806 12:02:49.263" starttime="20180806 12:02:49.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:02:49.264" level="TRACE">Arguments: [ 'msb' | '/api/nslcm/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:02:49.265" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 12:02:49.267" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:03:49.257" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:03:49.258" starttime="20180806 12:02:49.264"></status>
</kw>
<status status="FAIL" endtime="20180806 12:03:49.258" starttime="20180806 12:02:49.259"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:03:49.259" critical="yes" starttime="20180806 12:02:49.256">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t32" name="Basic VFC resmgr API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/resmgr/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:03:49.264" level="TRACE">Arguments: [ ${data_path}='/api/resmgr/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:03:49.265" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:03:49.266" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 12:03:49.266" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:03:49.266" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:03:49.266" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:03:49.267" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6433aad0&gt;</msg>
<msg timestamp="20180806 12:03:49.267" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6433aad0&gt;</msg>
<status status="PASS" endtime="20180806 12:03:49.267" starttime="20180806 12:03:49.265"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:03:49.268" level="TRACE">Arguments: [ 'msb' | '/api/resmgr/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:03:49.269" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 12:03:49.271" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:04:49.262" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:04:49.262" starttime="20180806 12:03:49.268"></status>
</kw>
<status status="FAIL" endtime="20180806 12:04:49.262" starttime="20180806 12:03:49.263"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:04:49.263" critical="yes" starttime="20180806 12:03:49.260">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t33" name="Basic VFC vnflcm API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnflcm/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:04:49.267" level="TRACE">Arguments: [ ${data_path}='/api/vnflcm/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:04:49.268" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:04:49.269" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 12:04:49.269" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:04:49.269" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:04:49.270" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:04:49.270" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe642c8b90&gt;</msg>
<msg timestamp="20180806 12:04:49.271" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe642c8b90&gt;</msg>
<status status="PASS" endtime="20180806 12:04:49.271" starttime="20180806 12:04:49.268"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:04:49.272" level="TRACE">Arguments: [ 'msb' | '/api/vnflcm/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:04:49.272" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 12:04:49.273" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:05:49.266" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:05:49.266" starttime="20180806 12:04:49.271"></status>
</kw>
<status status="FAIL" endtime="20180806 12:05:49.267" starttime="20180806 12:04:49.267"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:05:49.267" critical="yes" starttime="20180806 12:04:49.264">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t34" name="Basic VFC vnfmgr API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnfmgr/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:05:49.271" level="TRACE">Arguments: [ ${data_path}='/api/vnfmgr/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:05:49.272" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:05:49.272" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 12:05:49.273" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:05:49.273" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:05:49.273" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:05:49.274" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe642c89d0&gt;</msg>
<msg timestamp="20180806 12:05:49.274" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe642c89d0&gt;</msg>
<status status="PASS" endtime="20180806 12:05:49.274" starttime="20180806 12:05:49.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:05:49.275" level="TRACE">Arguments: [ 'msb' | '/api/vnfmgr/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:05:49.275" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 12:05:49.277" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:06:49.269" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:06:49.269" starttime="20180806 12:05:49.274"></status>
</kw>
<status status="FAIL" endtime="20180806 12:06:49.270" starttime="20180806 12:05:49.270"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:06:49.270" critical="yes" starttime="20180806 12:05:49.268">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t35" name="Basic VFC vnfres API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnfres/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:06:49.275" level="TRACE">Arguments: [ ${data_path}='/api/vnfres/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:06:49.276" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:06:49.276" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 12:06:49.276" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:06:49.276" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:06:49.276" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:06:49.277" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe643224d0&gt;</msg>
<msg timestamp="20180806 12:06:49.277" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe643224d0&gt;</msg>
<status status="PASS" endtime="20180806 12:06:49.277" starttime="20180806 12:06:49.275"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:06:49.278" level="TRACE">Arguments: [ 'msb' | '/api/vnfres/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:06:49.278" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 12:06:49.280" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:07:49.273" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:07:49.273" starttime="20180806 12:06:49.278"></status>
</kw>
<status status="FAIL" endtime="20180806 12:07:49.274" starttime="20180806 12:06:49.274"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:07:49.274" critical="yes" starttime="20180806 12:06:49.272">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t36" name="Basic VFC workflow API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/workflow/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:07:49.278" level="TRACE">Arguments: [ ${data_path}='/api/workflow/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:07:49.279" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:07:49.280" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 12:07:49.280" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:07:49.280" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:07:49.281" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:07:49.281" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe642de0d0&gt;</msg>
<msg timestamp="20180806 12:07:49.281" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe642de0d0&gt;</msg>
<status status="PASS" endtime="20180806 12:07:49.281" starttime="20180806 12:07:49.279"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:07:49.282" level="TRACE">Arguments: [ 'msb' | '/api/workflow/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:07:49.282" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 12:07:49.283" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:08:49.278" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:08:49.278" starttime="20180806 12:07:49.282"></status>
</kw>
<status status="FAIL" endtime="20180806 12:08:49.278" starttime="20180806 12:07:49.278"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:08:49.279" critical="yes" starttime="20180806 12:07:49.276">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t37" name="Basic VFC ztesdncdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/ztesdncdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:08:49.283" level="TRACE">Arguments: [ ${data_path}='/api/ztesdncdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:08:49.284" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:08:49.284" level="DEBUG">Test timeout 1 minute active. 59.997 seconds left.</msg>
<msg timestamp="20180806 12:08:49.284" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:08:49.284" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:08:49.285" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:08:49.285" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe642d1350&gt;</msg>
<msg timestamp="20180806 12:08:49.285" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe642d1350&gt;</msg>
<status status="PASS" endtime="20180806 12:08:49.285" starttime="20180806 12:08:49.283"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:08:49.286" level="TRACE">Arguments: [ 'msb' | '/api/ztesdncdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:08:49.286" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 12:08:49.288" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:09:49.281" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:09:49.281" starttime="20180806 12:08:49.286"></status>
</kw>
<status status="FAIL" endtime="20180806 12:09:49.282" starttime="20180806 12:08:49.282"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:09:49.282" critical="yes" starttime="20180806 12:08:49.280">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t38" name="Basic VFC ztevnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/ztevnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180806 12:09:49.287" level="TRACE">Arguments: [ ${data_path}='/api/ztevnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:09:49.289" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180806 12:09:49.289" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 12:09:49.289" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:09:49.289" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180806 12:09:49.290" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:09:49.290" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe6436bdd0&gt;</msg>
<msg timestamp="20180806 12:09:49.290" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe6436bdd0&gt;</msg>
<status status="PASS" endtime="20180806 12:09:49.290" starttime="20180806 12:09:49.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:09:49.291" level="TRACE">Arguments: [ 'msb' | '/api/ztevnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180806 12:09:49.291" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 12:09:49.292" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:10:49.286" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:10:49.286" starttime="20180806 12:09:49.290"></status>
</kw>
<status status="FAIL" endtime="20180806 12:10:49.286" starttime="20180806 12:09:49.286"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:10:49.287" critical="yes" starttime="20180806 12:09:49.284">Test timeout 1 minute exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t39" name="Basic VID Health Check">
<kw name="Run VID Health Check" library="vid_interface">
<doc>Logs in to VID GUI</doc>
<msg timestamp="20180806 12:10:49.292" level="TRACE">Arguments: [  ]</msg>
<kw name="Run VID Get Request" library="vid_interface">
<doc>Runs an VID get request</doc>
<arguments>
<arg>${VID_HEALTHCHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:10:49.293" level="TRACE">Arguments: [ ${data_path}='/vid/healthCheck' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_VID_HEALTH_USERNAME}</arg>
<arg>${GLOBAL_VID_HEALTH_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180806 12:10:49.294" level="TRACE">Arguments: [ b'Default' | b'AppPassword!1' ]</msg>
<msg timestamp="20180806 12:10:49.294" level="DEBUG">Test timeout 1 minute active. 59.995 seconds left.</msg>
<msg timestamp="20180806 12:10:49.294" level="TRACE">Return: [b'Default', b'AppPassword!1']</msg>
<msg timestamp="20180806 12:10:49.295" level="INFO">${auth} = ['Default', 'AppPassword!1']</msg>
<status status="PASS" endtime="20180806 12:10:49.295" starttime="20180806 12:10:49.294"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${VID_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180806 12:10:49.296" level="TRACE">Arguments: [ 'Creating session http://192.168.61.32:8080' ]</msg>
<msg timestamp="20180806 12:10:49.296" level="DEBUG">Test timeout 1 minute active. 59.993 seconds left.</msg>
<msg timestamp="20180806 12:10:49.296" level="INFO">Creating session http://192.168.61.32:8080</msg>
<msg timestamp="20180806 12:10:49.296" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 12:10:49.296" starttime="20180806 12:10:49.295"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>vid</arg>
<arg>${VID_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:10:49.297" level="TRACE">Arguments: [ 'vid' | 'http://192.168.61.32:8080' | auth=[b'Default', b'AppPassword!1'] ]</msg>
<msg timestamp="20180806 12:10:49.297" level="DEBUG">Test timeout 1 minute active. 59.992 seconds left.</msg>
<msg timestamp="20180806 12:10:49.297" level="INFO">Creating Session using : alias=vid, url=http://192.168.61.32:8080, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7efe642faed0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:10:49.297" level="DEBUG">Creating session: vid</msg>
<msg timestamp="20180806 12:10:49.298" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:10:49.298" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe642fa5d0&gt;</msg>
<msg timestamp="20180806 12:10:49.298" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe642fa5d0&gt;</msg>
<status status="PASS" endtime="20180806 12:10:49.298" starttime="20180806 12:10:49.296"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180806 12:10:49.299" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180806 12:10:49.299" level="DEBUG">Test timeout 1 minute active. 59.99 seconds left.</msg>
<msg timestamp="20180806 12:10:49.300" level="TRACE">Return: UUID('043a3243-69cd-4869-8da8-94fb5156571e')</msg>
<msg timestamp="20180806 12:10:49.300" level="INFO">${uuid} = 043a3243-69cd-4869-8da8-94fb5156571e</msg>
<status status="PASS" endtime="20180806 12:10:49.300" starttime="20180806 12:10:49.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${GLOBAL_VID_HEALTH_USERNAME}</arg>
<arg>password=${GLOBAL_VID_HEALTH_PASSWORD}</arg>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180806 12:10:49.301" level="TRACE">Arguments: [ 'username=${GLOBAL_VID_HEALTH_USERNAME}' | 'password=${GLOBAL_VID_HEALTH_PASSWORD}' | 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180806 12:10:49.302" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-043a3243-69cd-4869-8da8-94fb5156571e', 'password': b'AppPassword!1', 'username': b'Default'}</msg>
<msg timestamp="20180806 12:10:49.302" level="INFO">${headers} = {u'username': 'Default', u'password': 'AppPassword!1', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-043a3243-69cd-4869-8da8-94fb5156571e', u'X-...</msg>
<status status="PASS" endtime="20180806 12:10:49.302" starttime="20180806 12:10:49.300"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>vid</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:10:49.303" level="TRACE">Arguments: [ 'vid' | '/vid/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-043a3243-69cd-4869-8da8-94fb5156571e', 'password': b'AppPassword!1', 'username': b'Default'} ]</msg>
<msg timestamp="20180806 12:10:49.303" level="DEBUG">Test timeout 1 minute active. 59.986 seconds left.</msg>
<msg timestamp="20180806 12:10:49.305" level="DEBUG">Starting new HTTP connection (1): 192.168.61.32</msg>
<msg timestamp="20180806 12:10:49.339" level="DEBUG">http://192.168.61.32:8080 "GET /vid/healthCheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180806 12:10:49.340" level="INFO">Get Request using : alias=vid, uri=/vid/healthCheck, headers={u'username': 'Default', u'password': 'AppPassword!1', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-043a3243-69cd-4869-8da8-94fb5156571e', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180806 12:10:49.340" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 12:10:49.340" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 12:10:49.340" starttime="20180806 12:10:49.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from vid ${resp.text}</arg>
</arguments>
<msg timestamp="20180806 12:10:49.342" level="TRACE">Arguments: [ 'Received response from vid {"statusCode":200,"message":"health check succeeded","date":null}' ]</msg>
<msg timestamp="20180806 12:10:49.342" level="DEBUG">Test timeout 1 minute active. 59.947 seconds left.</msg>
<msg timestamp="20180806 12:10:49.342" level="INFO">Received response from vid {"statusCode":200,"message":"health check succeeded","date":null}</msg>
<msg timestamp="20180806 12:10:49.342" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 12:10:49.342" starttime="20180806 12:10:49.341"></status>
</kw>
<msg timestamp="20180806 12:10:49.343" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180806 12:10:49.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180806 12:10:49.343" starttime="20180806 12:10:49.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180806 12:10:49.344" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180806 12:10:49.344" level="DEBUG">Test timeout 1 minute active. 59.945 seconds left.</msg>
<msg timestamp="20180806 12:10:49.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180806 12:10:49.344" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 12:10:49.345" starttime="20180806 12:10:49.343"></status>
</kw>
<kw name="Should Be String" library="String">
<doc>Fails if the given ``item`` is not a string.</doc>
<arguments>
<arg>${resp.json()['message']}</arg>
</arguments>
<msg timestamp="20180806 12:10:49.346" level="TRACE">Arguments: [ 'health check succeeded' ]</msg>
<msg timestamp="20180806 12:10:49.346" level="DEBUG">Test timeout 1 minute active. 59.943 seconds left.</msg>
<msg timestamp="20180806 12:10:49.346" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 12:10:49.346" starttime="20180806 12:10:49.345"></status>
</kw>
<msg timestamp="20180806 12:10:49.346" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180806 12:10:49.346" starttime="20180806 12:10:49.291"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="PASS" endtime="20180806 12:10:49.347" critical="yes" starttime="20180806 12:10:49.289"></status>
</test>
<test id="s1-s1-s1-s1-t40" name="Basic VNFSDK Health Check">
<kw name="Run VNFSDK Health Check" library="vnfsdk_interface">
<doc>Runs VNFSDK Health check</doc>
<msg timestamp="20180806 12:10:49.350" level="TRACE">Arguments: [  ]</msg>
<kw name="Run VNFSDK Get Request" library="vnfsdk_interface">
<doc>Runs VNFSDK Get request</doc>
<arguments>
<arg>${VNFSDK_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:10:49.351" level="TRACE">Arguments: [ ${data_path}='/onapapi/vnfsdk-marketplace/v1/PackageResource/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>vnfsdk</arg>
<arg>${VNFSDK_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180806 12:10:49.352" level="TRACE">Arguments: [ 'vnfsdk' | 'http://10.0.14.1:8702' ]</msg>
<msg timestamp="20180806 12:10:49.352" level="DEBUG">Test timeout 1 minute active. 59.996 seconds left.</msg>
<msg timestamp="20180806 12:10:49.352" level="INFO">Creating Session using : alias=vnfsdk, url=http://10.0.14.1:8702, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180806 12:10:49.352" level="DEBUG">Creating session: vnfsdk</msg>
<msg timestamp="20180806 12:10:49.353" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180806 12:10:49.353" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7efe642d1fd0&gt;</msg>
<msg timestamp="20180806 12:10:49.353" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7efe642d1fd0&gt;</msg>
<status status="PASS" endtime="20180806 12:10:49.353" starttime="20180806 12:10:49.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>vnfsdk</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180806 12:10:49.354" level="TRACE">Arguments: [ 'vnfsdk' | '/onapapi/vnfsdk-marketplace/v1/PackageResource/healthcheck' ]</msg>
<msg timestamp="20180806 12:10:49.354" level="DEBUG">Test timeout 1 minute active. 59.994 seconds left.</msg>
<msg timestamp="20180806 12:10:49.355" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180806 12:11:49.349" level="FAIL">Test timeout 1 minute exceeded.</msg>
<status status="FAIL" endtime="20180806 12:11:49.349" starttime="20180806 12:10:49.354"></status>
</kw>
<status status="FAIL" endtime="20180806 12:11:49.350" starttime="20180806 12:10:49.350"></status>
</kw>
<status status="FAIL" endtime="20180806 12:11:49.351" starttime="20180806 12:10:49.349"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="1 minute"></timeout>
<status status="FAIL" endtime="20180806 12:11:49.351" critical="yes" starttime="20180806 12:10:49.348">Test timeout 1 minute exceeded.</status>
</test>
<doc>Testing ecomp components are available via calls.

Testing ecomp components are available via calls.</doc>
<status status="FAIL" endtime="20180806 12:11:49.364" starttime="20180806 11:44:45.202"></status>
</suite>
<status status="FAIL" endtime="20180806 12:11:49.398" starttime="20180806 11:44:45.199"></status>
</suite>
<status status="FAIL" endtime="20180806 12:11:49.420" starttime="20180806 11:44:45.196"></status>
</suite>
<status status="FAIL" endtime="20180806 12:11:49.449" starttime="20180806 11:44:45.169"></status>
</suite>
<statistics>
<total>
<stat fail="28" pass="12">Critical Tests</stat>
<stat fail="28" pass="12">All Tests</stat>
</total>
<tag>
<stat fail="9" pass="0">3rdparty</stat>
<stat fail="8" pass="1">api</stat>
<stat fail="6" pass="11">core</stat>
<stat fail="1" pass="0">dcae</stat>
<stat fail="0" pass="1">externalapi</stat>
<stat fail="28" pass="12">health</stat>
<stat fail="4" pass="0">multicloud</stat>
</tag>
<suite>
<stat fail="28" id="s1" name="OpenECOMP ETE" pass="12">OpenECOMP ETE</stat>
<stat fail="28" id="s1-s1" name="Robot" pass="12">OpenECOMP ETE.Robot</stat>
<stat fail="28" id="s1-s1-s1" name="Testsuites" pass="12">OpenECOMP ETE.Robot.Testsuites</stat>
<stat fail="28" id="s1-s1-s1-s1" name="Health-Check" pass="12">OpenECOMP ETE.Robot.Testsuites.Health-Check</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20180806 11:47:45.983" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe64390d50&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180806 11:47:46.186" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe64390f90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180806 11:47:46.592" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7efe643a2210&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
</errors>
</robot>
