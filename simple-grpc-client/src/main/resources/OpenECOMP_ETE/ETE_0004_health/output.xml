<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180810 21:19:16.528" generator="Robot 3.0.4 (Python 2.7.12 on linux2)">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE" id="s1" name="OpenECOMP ETE">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot" id="s1-s1" name="Robot">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/testsuites" id="s1-s1-s1" name="Testsuites">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/testsuites/health-check.robot" id="s1-s1-s1-s1" name="Health-Check">
<test id="s1-s1-s1-s1-t1" name="Basic A&amp;AI Health Check">
<kw name="Run A&amp;AI Health Check" library="aai_interface">
<doc>Runs an A&amp;AI health check</doc>
<msg timestamp="20180810 21:19:17.055" level="TRACE">Arguments: [  ]</msg>
<kw name="Run A&amp;AI Get Request" library="aai_interface">
<doc>Runs an A&amp;AI get request</doc>
<arguments>
<arg>${AAI_HEALTH_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:17.056" level="TRACE">Arguments: [ ${data_path}='/aai/util/echo?action=long' ]</msg>
<kw name="Disable Warnings" library="HTTPUtils">
<doc>Disable the cert warnings when creating sessions for A&amp;AI API Calls</doc>
<msg timestamp="20180810 21:19:17.057" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:17.057" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:17.057" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:17.058" starttime="20180810 21:19:17.057"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_AAI_USERNAME}</arg>
<arg>${GLOBAL_AAI_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:17.059" level="TRACE">Arguments: [ b'AAI' | b'AAI' ]</msg>
<msg timestamp="20180810 21:19:17.059" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:17.059" level="TRACE">Return: [b'AAI', b'AAI']</msg>
<msg timestamp="20180810 21:19:17.059" level="INFO">${auth} = ['AAI', 'AAI']</msg>
<status status="PASS" endtime="20180810 21:19:17.059" starttime="20180810 21:19:17.058"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>aai</arg>
<arg>${AAI_FRONTEND_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:17.060" level="TRACE">Arguments: [ 'aai' | 'https://192.168.61.18:8443' | auth=[b'AAI', b'AAI'] ]</msg>
<msg timestamp="20180810 21:19:17.061" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:17.061" level="INFO">Creating Session using : alias=aai, url=https://192.168.61.18:8443, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29d139c10&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:17.061" level="DEBUG">Creating session: aai</msg>
<msg timestamp="20180810 21:19:17.061" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:17.062" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d2b3850&gt;</msg>
<msg timestamp="20180810 21:19:17.062" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d2b3850&gt;</msg>
<status status="PASS" endtime="20180810 21:19:17.062" starttime="20180810 21:19:17.060"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:17.063" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:17.063" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 21:19:17.063" level="TRACE">Return: UUID('df44f07a-70bf-4560-9413-35cc677480f9')</msg>
<msg timestamp="20180810 21:19:17.063" level="INFO">${uuid} = df44f07a-70bf-4560-9413-35cc677480f9</msg>
<status status="PASS" endtime="20180810 21:19:17.063" starttime="20180810 21:19:17.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:17.064" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:17.066" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-df44f07a-70bf-4560-9413-35cc677480f9'}</msg>
<msg timestamp="20180810 21:19:17.066" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-df44f07a-70bf-4560-9413-35cc677480f9', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:17.066" starttime="20180810 21:19:17.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>aai</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:17.067" level="TRACE">Arguments: [ 'aai' | '/aai/util/echo?action=long' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-df44f07a-70bf-4560-9413-35cc677480f9'} ]</msg>
<msg timestamp="20180810 21:19:17.068" level="DEBUG">Test timeout 2 seconds active. 1.985 seconds left.</msg>
<msg timestamp="20180810 21:19:17.070" level="DEBUG">Starting new HTTPS connection (1): 192.168.61.18</msg>
<msg timestamp="20180810 21:19:17.091" level="DEBUG">https://192.168.61.18:8443 "GET /aai/util/echo?action=long HTTP/1.1" 200 252</msg>
<msg timestamp="20180810 21:19:17.092" level="INFO">Get Request using : alias=aai, uri=/aai/util/echo?action=long, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-df44f07a-70bf-4560-9413-35cc677480f9', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 21:19:17.093" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:17.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:17.093" starttime="20180810 21:19:17.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from aai ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:17.094" level="TRACE">Arguments: [ 'Received response from aai {"responseMessages":{"responseMessage":[{"messageId":"INF0001","text":"Success X-FromAppId=%1 X-TransactionId=%2 (msg=%3) (rc=%4)","variables":{"variable":["robot-ete","9b2e9301-f340-4ce4-9369-6da88c4a5dd5","Successful health check:OK","0.0.0002"]}}]}}' ]</msg>
<msg timestamp="20180810 21:19:17.095" level="DEBUG">Test timeout 2 seconds active. 1.958 seconds left.</msg>
<msg timestamp="20180810 21:19:17.095" level="INFO">Received response from aai {"responseMessages":{"responseMessage":[{"messageId":"INF0001","text":"Success X-FromAppId=%1 X-TransactionId=%2 (msg=%3) (rc=%4)","variables":{"variable":["robot-ete","9b2e9301-f340-4ce4-9369-6da88c4a5dd5","Successful health check:OK","0.0.0002"]}}]}}</msg>
<msg timestamp="20180810 21:19:17.095" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:17.095" starttime="20180810 21:19:17.094"></status>
</kw>
<msg timestamp="20180810 21:19:17.096" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:17.096" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:17.096" starttime="20180810 21:19:17.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:17.098" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:17.098" level="DEBUG">Test timeout 2 seconds active. 1.955 seconds left.</msg>
<msg timestamp="20180810 21:19:17.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:17.099" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:17.099" starttime="20180810 21:19:17.097"></status>
</kw>
<msg timestamp="20180810 21:19:17.099" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:17.100" starttime="20180810 21:19:17.055"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:17.100" critical="yes" starttime="20180810 21:19:17.053"></status>
</test>
<test id="s1-s1-s1-s1-t2" name="Basic AAF Health Check">
<kw name="Run AAF Health Check" library="aaf_interface">
<doc>Runs AAF Health check</doc>
<msg timestamp="20180810 21:19:17.104" level="TRACE">Arguments: [  ]</msg>
<kw name="Run AAF Get Request" library="aaf_interface">
<doc>Runs AAF Get request</doc>
<arguments>
<arg>${AAF_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:17.105" level="TRACE">Arguments: [ ${data_path}='/authz/perms/user/demo@people.osaaf.org' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_AAF_USERNAME}</arg>
<arg>${GLOBAL_AAF_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:17.107" level="TRACE">Arguments: [ b'demo@people.osaaf.org' | b'demo123456!' ]</msg>
<msg timestamp="20180810 21:19:17.107" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:17.107" level="TRACE">Return: [b'demo@people.osaaf.org', b'demo123456!']</msg>
<msg timestamp="20180810 21:19:17.107" level="INFO">${auth} = ['demo@people.osaaf.org', 'demo123456!']</msg>
<status status="PASS" endtime="20180810 21:19:17.108" starttime="20180810 21:19:17.106"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>aaf</arg>
<arg>${GLOBAL_AAF_SERVER}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:17.108" level="TRACE">Arguments: [ 'aaf' | b'https://aaf.api.simpledemo.onap.org:8100' | auth=[b'demo@people.osaaf.org', b'demo123456!'] ]</msg>
<msg timestamp="20180810 21:19:17.108" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:17.109" level="INFO">Creating Session using : alias=aaf, url=https://aaf.api.simpledemo.onap.org:8100, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29d288bd0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:17.109" level="DEBUG">Creating session: aaf</msg>
<msg timestamp="20180810 21:19:17.109" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:17.109" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d2bdbd0&gt;</msg>
<msg timestamp="20180810 21:19:17.110" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d2bdbd0&gt;</msg>
<status status="PASS" endtime="20180810 21:19:17.110" starttime="20180810 21:19:17.108"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:17.110" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:17.110" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:17.110" level="TRACE">Return: UUID('972f2dca-1265-4f46-89ab-6d67c8cdf1e5')</msg>
<msg timestamp="20180810 21:19:17.110" level="INFO">${uuid} = 972f2dca-1265-4f46-89ab-6d67c8cdf1e5</msg>
<status status="PASS" endtime="20180810 21:19:17.111" starttime="20180810 21:19:17.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:17.111" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:17.112" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-972f2dca-1265-4f46-89ab-6d67c8cdf1e5'}</msg>
<msg timestamp="20180810 21:19:17.112" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-972f2dca-1265-4f46-89ab-6d67c8cdf1e5', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:17.112" starttime="20180810 21:19:17.111"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>aaf</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:17.112" level="TRACE">Arguments: [ 'aaf' | '/authz/perms/user/demo@people.osaaf.org' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-972f2dca-1265-4f46-89ab-6d67c8cdf1e5'} ]</msg>
<msg timestamp="20180810 21:19:17.113" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 21:19:17.114" level="DEBUG">Starting new HTTPS connection (1): aaf.api.simpledemo.onap.org</msg>
<msg timestamp="20180810 21:19:22.121" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:22.121" starttime="20180810 21:19:17.112"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:22.122" starttime="20180810 21:19:17.105"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:22.122" starttime="20180810 21:19:17.104"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:22.123" critical="yes" starttime="20180810 21:19:17.102">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t3" name="Basic AAF SMS Health Check">
<kw name="Run SMS Health Check" library="sms_interface">
<doc>Runs SMS Health check</doc>
<msg timestamp="20180810 21:19:22.128" level="TRACE">Arguments: [  ]</msg>
<kw name="Run SMS Get Request" library="sms_interface">
<doc>Runs SMS Get request</doc>
<arguments>
<arg>${SMS_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:22.129" level="TRACE">Arguments: [ ${data_path}='/v1/sms/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>smssession</arg>
<arg>${SMS_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:22.131" level="TRACE">Arguments: [ 'smssession' | 'https://aaf-sms.api.simpledemo.onap.org:10443' ]</msg>
<msg timestamp="20180810 21:19:22.131" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:22.132" level="INFO">Creating Session using : alias=smssession, url=https://aaf-sms.api.simpledemo.onap.org:10443, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:22.132" level="DEBUG">Creating session: smssession</msg>
<msg timestamp="20180810 21:19:22.133" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:22.133" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d288f10&gt;</msg>
<msg timestamp="20180810 21:19:22.134" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d288f10&gt;</msg>
<status status="PASS" endtime="20180810 21:19:22.134" starttime="20180810 21:19:22.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>smssession</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:22.135" level="TRACE">Arguments: [ 'smssession' | '/v1/sms/healthcheck' ]</msg>
<msg timestamp="20180810 21:19:22.135" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 21:19:22.137" level="DEBUG">Starting new HTTPS connection (1): aaf-sms.api.simpledemo.onap.org</msg>
<msg timestamp="20180810 21:19:27.141" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:27.142" starttime="20180810 21:19:22.135"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:27.142" starttime="20180810 21:19:22.128"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:27.142" starttime="20180810 21:19:22.127"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:27.143" critical="yes" starttime="20180810 21:19:22.125">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t4" name="Basic APPC Health Check">
<kw name="Run APPC Health Check" library="appc_interface">
<doc>Runs an APPC healthcheck</doc>
<msg timestamp="20180810 21:19:27.146" level="TRACE">Arguments: [  ]</msg>
<kw name="Run APPC Post Request" library="appc_interface">
<doc>Runs an APPC post request</doc>
<arguments>
<arg>${APPC_INDEX PATH}${APPC_HEALTHCHECK_OPERATION_PATH}</arg>
<arg>${None}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:27.147" level="TRACE">Arguments: [ ${data_path}='/restconf/operations/SLI-API:healthcheck' | ${data}=None | ${content}='json' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_APPC_USERNAME}</arg>
<arg>${GLOBAL_APPC_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:27.149" level="TRACE">Arguments: [ b'admin' | b'admin' ]</msg>
<msg timestamp="20180810 21:19:27.149" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:27.149" level="TRACE">Return: [b'admin', b'admin']</msg>
<msg timestamp="20180810 21:19:27.149" level="INFO">${auth} = ['admin', 'admin']</msg>
<status status="PASS" endtime="20180810 21:19:27.149" starttime="20180810 21:19:27.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${APPC_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 21:19:27.150" level="TRACE">Arguments: [ 'Creating session http://192.168.61.15:8282' ]</msg>
<msg timestamp="20180810 21:19:27.150" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:27.150" level="INFO">Creating session http://192.168.61.15:8282</msg>
<msg timestamp="20180810 21:19:27.150" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:27.151" starttime="20180810 21:19:27.150"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>appc</arg>
<arg>${APPC_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:27.151" level="TRACE">Arguments: [ 'appc' | 'http://192.168.61.15:8282' | auth=[b'admin', b'admin'] ]</msg>
<msg timestamp="20180810 21:19:27.152" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:27.152" level="INFO">Creating Session using : alias=appc, url=http://192.168.61.15:8282, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29d24ff50&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:27.152" level="DEBUG">Creating session: appc</msg>
<msg timestamp="20180810 21:19:27.152" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:27.153" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d24fb90&gt;</msg>
<msg timestamp="20180810 21:19:27.153" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d24fb90&gt;</msg>
<status status="PASS" endtime="20180810 21:19:27.153" starttime="20180810 21:19:27.151"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:27.155" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:27.155" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 21:19:27.155" level="TRACE">Return: UUID('62ca8ed9-acf0-4b81-aa17-11571799694b')</msg>
<msg timestamp="20180810 21:19:27.156" level="INFO">${uuid} = 62ca8ed9-acf0-4b81-aa17-11571799694b</msg>
<status status="PASS" endtime="20180810 21:19:27.156" starttime="20180810 21:19:27.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/${content}</arg>
<arg>Content-Type=application/${content}</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:27.157" level="TRACE">Arguments: [ 'Accept=application/${content}' | 'Content-Type=application/${content}' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:27.160" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-62ca8ed9-acf0-4b81-aa17-11571799694b'}</msg>
<msg timestamp="20180810 21:19:27.160" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-62ca8ed9-acf0-4b81-aa17-11571799694b', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:27.160" starttime="20180810 21:19:27.156"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>appc</arg>
<arg>${data_path}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:27.161" level="TRACE">Arguments: [ 'appc' | '/restconf/operations/SLI-API:healthcheck' | data=None | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-62ca8ed9-acf0-4b81-aa17-11571799694b'} ]</msg>
<msg timestamp="20180810 21:19:27.162" level="DEBUG">Test timeout 2 seconds active. 1.983 seconds left.</msg>
<msg timestamp="20180810 21:19:27.164" level="DEBUG">Starting new HTTP connection (1): 192.168.61.15</msg>
<msg timestamp="20180810 21:19:27.206" level="DEBUG">http://192.168.61.15:8282 "POST /restconf/operations/SLI-API:healthcheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 21:19:27.207" level="DEBUG">post response: {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 21:19:27.207" level="INFO">Post Request using : alias=appc, uri=/restconf/operations/SLI-API:healthcheck, data=None,                     headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-62ca8ed9-acf0-4b81-aa17-11571799694b', u'X-FromAppId': u'robot-ete'}, files=None, allow_redirects=True </msg>
<msg timestamp="20180810 21:19:27.207" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:27.208" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:27.208" starttime="20180810 21:19:27.161"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from appc ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:27.209" level="TRACE">Arguments: [ 'Received response from appc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}' ]</msg>
<msg timestamp="20180810 21:19:27.209" level="DEBUG">Test timeout 2 seconds active. 1.936 seconds left.</msg>
<msg timestamp="20180810 21:19:27.209" level="INFO">Received response from appc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 21:19:27.209" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:27.209" starttime="20180810 21:19:27.208"></status>
</kw>
<msg timestamp="20180810 21:19:27.210" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:27.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:27.210" starttime="20180810 21:19:27.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:27.211" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:27.211" level="DEBUG">Test timeout 2 seconds active. 1.934 seconds left.</msg>
<msg timestamp="20180810 21:19:27.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:27.211" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:27.211" starttime="20180810 21:19:27.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['output']['response-code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:27.212" level="TRACE">Arguments: [ '200' | '200' ]</msg>
<msg timestamp="20180810 21:19:27.212" level="DEBUG">Test timeout 2 seconds active. 1.932 seconds left.</msg>
<msg timestamp="20180810 21:19:27.212" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:27.212" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:27.212" starttime="20180810 21:19:27.212"></status>
</kw>
<msg timestamp="20180810 21:19:27.213" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:27.213" starttime="20180810 21:19:27.146"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:27.213" critical="yes" starttime="20180810 21:19:27.144"></status>
</test>
<test id="s1-s1-s1-s1-t5" name="Basic CLI Health Check">
<kw name="Run CLI Health Check" library="cli_interface">
<doc>Runs CLI Health check</doc>
<msg timestamp="20180810 21:19:27.216" level="TRACE">Arguments: [  ]</msg>
<kw name="Run CLI Get Request" library="cli_interface">
<doc>Runs CLI Get request</doc>
<arguments>
<arg>${CLI_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:27.216" level="TRACE">Arguments: [ ${data_path}='/' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>cli</arg>
<arg>${CLI_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:27.217" level="TRACE">Arguments: [ 'cli' | 'http://10.0.9.1:8080' ]</msg>
<msg timestamp="20180810 21:19:27.217" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:19:27.218" level="INFO">Creating Session using : alias=cli, url=http://10.0.9.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:27.218" level="DEBUG">Creating session: cli</msg>
<msg timestamp="20180810 21:19:27.218" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:27.218" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d122190&gt;</msg>
<msg timestamp="20180810 21:19:27.218" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d122190&gt;</msg>
<status status="PASS" endtime="20180810 21:19:27.218" starttime="20180810 21:19:27.217"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>cli</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:27.219" level="TRACE">Arguments: [ 'cli' | '/' ]</msg>
<msg timestamp="20180810 21:19:27.219" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:27.220" level="DEBUG">Starting new HTTP connection (1): 10.0.9.1</msg>
<msg timestamp="20180810 21:19:29.215" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:29.215" starttime="20180810 21:19:27.219"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:29.216" starttime="20180810 21:19:27.216"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:29.216" starttime="20180810 21:19:27.215"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:29.216" critical="yes" starttime="20180810 21:19:27.214">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t6" name="Basic CLAMP Health Check">
<kw name="Run CLAMP Health Check" library="clamp_interface">
<doc>Runs CLAMP Health check</doc>
<msg timestamp="20180810 21:19:29.220" level="TRACE">Arguments: [  ]</msg>
<kw name="Run CLAMP Get Request" library="clamp_interface">
<doc>Runs CLAMP Get request</doc>
<arguments>
<arg>${CLAMP_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.221" level="TRACE">Arguments: [ ${data_path}='/restservices/clds/v1/clds/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${CLAMP_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:29.222" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.21:8080' ]</msg>
<msg timestamp="20180810 21:19:29.222" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:29.222" level="INFO">Creating Session using : alias=session, url=http://192.168.61.21:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:29.223" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 21:19:29.223" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:29.224" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d255d90&gt;</msg>
<msg timestamp="20180810 21:19:29.224" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d255d90&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.224" starttime="20180810 21:19:29.221"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.225" level="TRACE">Arguments: [ 'session' | '/restservices/clds/v1/clds/healthcheck' ]</msg>
<msg timestamp="20180810 21:19:29.225" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:29.227" level="DEBUG">Starting new HTTP connection (1): 192.168.61.21</msg>
<msg timestamp="20180810 21:19:29.306" level="DEBUG">http://192.168.61.21:8080 "GET /restservices/clds/v1/clds/healthcheck HTTP/1.1" 200 79</msg>
<msg timestamp="20180810 21:19:29.307" level="INFO">Get Request using : alias=session, uri=/restservices/clds/v1/clds/healthcheck, headers=None </msg>
<msg timestamp="20180810 21:19:29.308" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:29.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.308" starttime="20180810 21:19:29.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:29.310" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:29.310" level="DEBUG">Test timeout 2 seconds active. 1.908 seconds left.</msg>
<msg timestamp="20180810 21:19:29.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:29.310" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.311" starttime="20180810 21:19:29.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from CLAMP ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:29.312" level="TRACE">Arguments: [ 'Received response from CLAMP {"healthCheckComponent":"CLDS-APP","healthCheckStatus":"UP","description":"OK"}' ]</msg>
<msg timestamp="20180810 21:19:29.312" level="DEBUG">Test timeout 2 seconds active. 1.906 seconds left.</msg>
<msg timestamp="20180810 21:19:29.312" level="INFO">Received response from CLAMP {"healthCheckComponent":"CLDS-APP","healthCheckStatus":"UP","description":"OK"}</msg>
<msg timestamp="20180810 21:19:29.312" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.312" starttime="20180810 21:19:29.311"></status>
</kw>
<msg timestamp="20180810 21:19:29.313" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:29.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.313" starttime="20180810 21:19:29.220"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:29.314" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:29.314" level="DEBUG">Test timeout 2 seconds active. 1.904 seconds left.</msg>
<msg timestamp="20180810 21:19:29.314" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:29.314" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.314" starttime="20180810 21:19:29.313"></status>
</kw>
<msg timestamp="20180810 21:19:29.315" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.315" starttime="20180810 21:19:29.219"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:29.315" critical="yes" starttime="20180810 21:19:29.217"></status>
</test>
<test id="s1-s1-s1-s1-t7" name="Basic DCAE Health Check">
<kw name="Run DCAE Health Check" library="dcae_interface">
<doc>Runs a DCAE health check</doc>
<msg timestamp="20180810 21:19:29.318" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_DCAE_USERNAME}</arg>
<arg>${GLOBAL_DCAE_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:29.319" level="TRACE">Arguments: [ b'console' | b'ZjJkYjllMjljMTI2M2Iz' ]</msg>
<msg timestamp="20180810 21:19:29.319" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:19:29.319" level="TRACE">Return: [b'console', b'ZjJkYjllMjljMTI2M2Iz']</msg>
<msg timestamp="20180810 21:19:29.320" level="INFO">${auth} = ['console', 'ZjJkYjllMjljMTI2M2Iz']</msg>
<status status="PASS" endtime="20180810 21:19:29.320" starttime="20180810 21:19:29.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${DCAE_HEALTH_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 21:19:29.321" level="TRACE">Arguments: [ 'Creating session http://192.168.61.31:8000' ]</msg>
<msg timestamp="20180810 21:19:29.321" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:29.321" level="INFO">Creating session http://192.168.61.31:8000</msg>
<msg timestamp="20180810 21:19:29.321" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.321" starttime="20180810 21:19:29.320"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>dcae</arg>
<arg>${DCAE_HEALTH_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:29.322" level="TRACE">Arguments: [ 'dcae' | 'http://192.168.61.31:8000' | auth=[b'console', b'ZjJkYjllMjljMTI2M2Iz'] ]</msg>
<msg timestamp="20180810 21:19:29.322" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:29.322" level="INFO">Creating Session using : alias=dcae, url=http://192.168.61.31:8000, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29d266f10&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:29.323" level="DEBUG">Creating session: dcae</msg>
<msg timestamp="20180810 21:19:29.323" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:29.323" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d266910&gt;</msg>
<msg timestamp="20180810 21:19:29.323" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d266910&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.323" starttime="20180810 21:19:29.322"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:29.324" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:29.324" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:29.324" level="TRACE">Return: UUID('e932b9fb-ac22-47b7-b14c-57e72b7dbc3b')</msg>
<msg timestamp="20180810 21:19:29.324" level="INFO">${uuid} = e932b9fb-ac22-47b7-b14c-57e72b7dbc3b</msg>
<status status="PASS" endtime="20180810 21:19:29.324" starttime="20180810 21:19:29.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>X-ECOMP-Client-Version=ONAP-R2</arg>
<arg>action=getTable</arg>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:29.325" level="TRACE">Arguments: [ 'X-ECOMP-Client-Version=ONAP-R2' | 'action=getTable' | 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:29.325" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-ECOMP-Client-Version': 'ONAP-R2', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-e932b9fb-ac22-47b7-b14c-57e72b7dbc3b', 'action': 'getTable'}</msg>
<msg timestamp="20180810 21:19:29.326" level="INFO">${headers} = {u'X-ECOMP-Client-Version': u'ONAP-R2', u'action': u'getTable', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-e932b9fb-ac22-47b7-b14c-57e72b7dbc...</msg>
<status status="PASS" endtime="20180810 21:19:29.326" starttime="20180810 21:19:29.324"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>dcae</arg>
<arg>${DCAE_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.326" level="TRACE">Arguments: [ 'dcae' | '/healthcheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-ECOMP-Client-Version': 'ONAP-R2', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-e932b9fb-ac22-47b7-b14c-57e72b7dbc3b', 'action': 'getTable'} ]</msg>
<msg timestamp="20180810 21:19:29.327" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 21:19:29.328" level="DEBUG">Starting new HTTP connection (1): 192.168.61.31</msg>
<msg timestamp="20180810 21:19:29.331" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=2, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180810 21:19:29.331" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d26ed10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 21:19:29.331" level="DEBUG">Starting new HTTP connection (2): 192.168.61.31</msg>
<msg timestamp="20180810 21:19:29.333" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=1, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180810 21:19:29.534" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d276c90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 21:19:29.535" level="DEBUG">Starting new HTTP connection (3): 192.168.61.31</msg>
<msg timestamp="20180810 21:19:29.539" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=0, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180810 21:19:29.940" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d276810&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 21:19:29.941" level="DEBUG">Starting new HTTP connection (4): 192.168.61.31</msg>
<msg timestamp="20180810 21:19:29.946" level="FAIL">ConnectionError: HTTPConnectionPool(host='192.168.61.31', port=8000): Max retries exceeded with url: /healthcheck (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d26e750&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<msg timestamp="20180810 21:19:29.946" level="DEBUG">Traceback (most recent call last):
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/library/RequestsLibrary/RequestsKeywords.py", line 338, in get_request
    session, uri, params, headers, redir, timeout)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/library/RequestsLibrary/RequestsKeywords.py", line 842, in _get_request
    cookies=self.cookies)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/library/requests/sessions.py", line 521, in get
    return self.request('GET', url, **kwargs)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/library/requests/sessions.py", line 508, in request
    resp = self.send(prep, **send_kwargs)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/library/requests/sessions.py", line 618, in send
    r = adapter.send(request, **kwargs)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/main/resources/OpenECOMP_ETE/robot/library/requests/adapters.py", line 508, in send
    raise ConnectionError(e, request=request)</msg>
<status status="FAIL" endtime="20180810 21:19:29.946" starttime="20180810 21:19:29.326"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:29.947" starttime="20180810 21:19:29.317"></status>
</kw>
<tags>
<tag>dcae</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:29.947" critical="yes" starttime="20180810 21:19:29.316">ConnectionError: HTTPConnectionPool(host='192.168.61.31', port=8000): Max retries exceeded with url: /healthcheck (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d26e750&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</status>
</test>
<test id="s1-s1-s1-s1-t8" name="Basic DMAAP Message Router Health Check">
<kw name="Run MR Health Check" library="mr_interface">
<doc>Runs MR Health check</doc>
<msg timestamp="20180810 21:19:29.951" level="TRACE">Arguments: [  ]</msg>
<kw name="Run MR Get Request" library="mr_interface">
<doc>Runs MR Get request</doc>
<arguments>
<arg>${MR_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.952" level="TRACE">Arguments: [ ${data_path}='/topics' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>mr</arg>
<arg>${MR_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:29.953" level="TRACE">Arguments: [ 'mr' | 'http://192.168.61.17:3904' ]</msg>
<msg timestamp="20180810 21:19:29.953" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:29.953" level="INFO">Creating Session using : alias=mr, url=http://192.168.61.17:3904, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:29.954" level="DEBUG">Creating session: mr</msg>
<msg timestamp="20180810 21:19:29.954" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:29.954" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d26ef50&gt;</msg>
<msg timestamp="20180810 21:19:29.954" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d26ef50&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.954" starttime="20180810 21:19:29.953"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:29.955" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:29.955" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:29.955" level="TRACE">Return: UUID('95478364-2492-49bb-b681-4eddbdd9c9c6')</msg>
<msg timestamp="20180810 21:19:29.955" level="INFO">${uuid} = 95478364-2492-49bb-b681-4eddbdd9c9c6</msg>
<status status="PASS" endtime="20180810 21:19:29.956" starttime="20180810 21:19:29.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:29.956" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:29.957" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-95478364-2492-49bb-b681-4eddbdd9c9c6'}</msg>
<msg timestamp="20180810 21:19:29.957" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-95478364-2492-49bb-b681-4eddbdd9c9c6', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:29.957" starttime="20180810 21:19:29.956"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>mr</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.958" level="TRACE">Arguments: [ 'mr' | '/topics' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-95478364-2492-49bb-b681-4eddbdd9c9c6'} ]</msg>
<msg timestamp="20180810 21:19:29.958" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 21:19:29.960" level="DEBUG">Starting new HTTP connection (1): 192.168.61.17</msg>
<msg timestamp="20180810 21:19:29.980" level="DEBUG">http://192.168.61.17:3904 "GET /topics HTTP/1.1" 200 739</msg>
<msg timestamp="20180810 21:19:29.981" level="INFO">Get Request using : alias=mr, uri=/topics, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-95478364-2492-49bb-b681-4eddbdd9c9c6', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 21:19:29.982" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:29.982" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.982" starttime="20180810 21:19:29.958"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from message router ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:29.985" level="TRACE">Arguments: [ 'Received response from message router {"topics": [\n    "ECOMP-PORTAL-OUTBOX-APP1",\n    "unauthenticated.MEASUREMENT_OSAM_OUTPUT",\n    "ECOMP-PORTAL-OUTBOX-POL1",\n    "SDC-DISTR-STATUS-TOPIC-AUTO",\n    "msgrtr.apinode.metrics.dmaap",\n    "APPC-CL",\n    "PDPD-CONFIGURATION",\n    "POLICY-CL-MGT",\n    "SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1",\n    "SDC-DISTR-NOTIF-TOPIC-AUTO",\n    "unauthenticated.SEC_MEASUREMENT_OUTPUT",\n    "SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1",\n    "AAI-EVENT",\n    "ECOMP-PORTAL-OUTBOX-VID1",\n    "ECOMP-PORTAL-INBOX",\n    "ECOMP-PORTAL-OUTBOX-SDC1",\n    "POOLING",\n    "unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT",\n    "unauthenticated.TCA_EVENT_OUTPUT",\n    "DCAE-CL-EVENT",\n    "APPC-TEST2",\n    "APPC-TEST1",\n    "ECOMP-PORTAL-OUTBOX-DBC1"\n]}' ]</msg>
<msg timestamp="20180810 21:19:29.985" level="DEBUG">Test timeout 2 seconds active. 1.964 seconds left.</msg>
<msg timestamp="20180810 21:19:29.986" level="INFO">Received response from message router {"topics": [
    "ECOMP-PORTAL-OUTBOX-APP1",
    "unauthenticated.MEASUREMENT_OSAM_OUTPUT",
    "ECOMP-PORTAL-OUTBOX-POL1",
    "SDC-DISTR-STATUS-TOPIC-AUTO",
    "msgrtr.apinode.metrics.dmaap",
    "APPC-CL",
    "PDPD-CONFIGURATION",
    "POLICY-CL-MGT",
    "SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1",
    "SDC-DISTR-NOTIF-TOPIC-AUTO",
    "unauthenticated.SEC_MEASUREMENT_OUTPUT",
    "SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1",
    "AAI-EVENT",
    "ECOMP-PORTAL-OUTBOX-VID1",
    "ECOMP-PORTAL-INBOX",
    "ECOMP-PORTAL-OUTBOX-SDC1",
    "POOLING",
    "unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT",
    "unauthenticated.TCA_EVENT_OUTPUT",
    "DCAE-CL-EVENT",
    "APPC-TEST2",
    "APPC-TEST1",
    "ECOMP-PORTAL-OUTBOX-DBC1"
]}</msg>
<msg timestamp="20180810 21:19:29.986" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.986" starttime="20180810 21:19:29.983"></status>
</kw>
<msg timestamp="20180810 21:19:29.987" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:29.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.987" starttime="20180810 21:19:29.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:29.988" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:29.988" level="DEBUG">Test timeout 2 seconds active. 1.961 seconds left.</msg>
<msg timestamp="20180810 21:19:29.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:29.989" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.989" starttime="20180810 21:19:29.988"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>topics</arg>
</arguments>
<msg timestamp="20180810 21:19:29.990" level="TRACE">Arguments: [ {'topics': ['ECOMP-PORTAL-OUTBOX-APP1',
            'unauthenticated.MEASUREMENT_OSAM_OUTPUT',
            'ECOMP-PORTAL-OUTBOX-POL1',
            'SDC-DISTR-STATUS-TOPIC-AUTO',
            'msgrtr.apinode.metrics.dmaap',
            'APPC-CL',
            'PDPD-CONFIGURATION',
            'POLICY-CL-MGT',
            'SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1',
            'SDC-DISTR-NOTIF-TOPIC-AUTO',
            'unauthenticated.SEC_MEASUREMENT_OUTPUT',
            'SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1',
            'AAI-EVENT',
            'ECOMP-PORTAL-OUTBOX-VID1',
            'ECOMP-PORTAL-INBOX',
            'ECOMP-PORTAL-OUTBOX-SDC1',
            'POOLING',
            'unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT',
            'unauthenticated.TCA_EVENT_OUTPUT',
            'DCAE-CL-EVENT',
            'APPC-TEST2',
            'APPC-TEST1',
            'ECOMP-PORTAL-OUTBOX-DBC1']} | 'topics' ]</msg>
<msg timestamp="20180810 21:19:29.990" level="DEBUG">Test timeout 2 seconds active. 1.959 seconds left.</msg>
<msg timestamp="20180810 21:19:29.991" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.991" starttime="20180810 21:19:29.989"></status>
</kw>
<msg timestamp="20180810 21:19:29.991" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:29.991" starttime="20180810 21:19:29.951"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:29.991" critical="yes" starttime="20180810 21:19:29.949"></status>
</test>
<test id="s1-s1-s1-s1-t9" name="Basic External API NBI Health Check">
<kw name="Run NBI Health Check" library="nbi_interface">
<doc>Runs NBI Health check</doc>
<msg timestamp="20180810 21:19:29.994" level="TRACE">Arguments: [  ]</msg>
<kw name="Run NBI Get Request" library="nbi_interface">
<doc>Runs NBI Get request</doc>
<arguments>
<arg>${NBI_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.995" level="TRACE">Arguments: [ ${data_path}='/nbi/api/v1/status' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${NBI_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:29.996" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.19:8080' ]</msg>
<msg timestamp="20180810 21:19:29.996" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:29.997" level="INFO">Creating Session using : alias=session, url=http://192.168.61.19:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:29.997" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 21:19:29.997" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:29.997" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c84a590&gt;</msg>
<msg timestamp="20180810 21:19:29.998" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c84a590&gt;</msg>
<status status="PASS" endtime="20180810 21:19:29.998" starttime="20180810 21:19:29.996"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:29.998" level="TRACE">Arguments: [ 'session' | '/nbi/api/v1/status' ]</msg>
<msg timestamp="20180810 21:19:29.999" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:30.000" level="DEBUG">Starting new HTTP connection (1): 192.168.61.19</msg>
<msg timestamp="20180810 21:19:30.022" level="DEBUG">http://192.168.61.19:8080 "GET /nbi/api/v1/status HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 21:19:30.023" level="INFO">Get Request using : alias=session, uri=/nbi/api/v1/status, headers=None </msg>
<msg timestamp="20180810 21:19:30.024" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:30.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:30.024" starttime="20180810 21:19:29.998"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:30.025" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:30.026" level="DEBUG">Test timeout 2 seconds active. 1.967 seconds left.</msg>
<msg timestamp="20180810 21:19:30.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:30.026" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:30.026" starttime="20180810 21:19:30.025"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from NBI ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:30.027" level="TRACE">Arguments: [ 'Received response from NBI {"name":"nbi","status":"ok","version":"v1"}' ]</msg>
<msg timestamp="20180810 21:19:30.027" level="DEBUG">Test timeout 2 seconds active. 1.965 seconds left.</msg>
<msg timestamp="20180810 21:19:30.028" level="INFO">Received response from NBI {"name":"nbi","status":"ok","version":"v1"}</msg>
<msg timestamp="20180810 21:19:30.028" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:30.028" starttime="20180810 21:19:30.027"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20180810 21:19:30.029" level="TRACE">Arguments: [ {'name': 'nbi', 'status': 'ok', 'version': 'v1'} ]</msg>
<msg timestamp="20180810 21:19:30.029" level="DEBUG">Test timeout 2 seconds active. 1.963 seconds left.</msg>
<msg timestamp="20180810 21:19:30.030" level="TRACE">Return: {'name': 'nbi', 'status': 'ok', 'version': 'v1'}</msg>
<msg timestamp="20180810 21:19:30.030" level="INFO">${json} = {u'status': u'ok', u'version': u'v1', u'name': u'nbi'}</msg>
<status status="PASS" endtime="20180810 21:19:30.030" starttime="20180810 21:19:30.029"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${json}</arg>
<arg>status</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20180810 21:19:30.031" level="TRACE">Arguments: [ {'name': 'nbi', 'status': 'ok', 'version': 'v1'} | 'status' ]</msg>
<msg timestamp="20180810 21:19:30.032" level="DEBUG">Test timeout 2 seconds active. 1.961 seconds left.</msg>
<msg timestamp="20180810 21:19:30.032" level="TRACE">Return: 'ok'</msg>
<msg timestamp="20180810 21:19:30.032" level="INFO">${status} = ok</msg>
<status status="PASS" endtime="20180810 21:19:30.032" starttime="20180810 21:19:30.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>ok</arg>
</arguments>
<msg timestamp="20180810 21:19:30.033" level="TRACE">Arguments: [ 'ok' | 'ok' ]</msg>
<msg timestamp="20180810 21:19:30.033" level="DEBUG">Test timeout 2 seconds active. 1.959 seconds left.</msg>
<msg timestamp="20180810 21:19:30.033" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:30.034" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:30.034" starttime="20180810 21:19:30.033"></status>
</kw>
<msg timestamp="20180810 21:19:30.034" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:30.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:30.034" starttime="20180810 21:19:29.995"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:30.036" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:30.036" level="DEBUG">Test timeout 2 seconds active. 1.957 seconds left.</msg>
<msg timestamp="20180810 21:19:30.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:30.036" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:30.036" starttime="20180810 21:19:30.035"></status>
</kw>
<msg timestamp="20180810 21:19:30.037" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:30.037" starttime="20180810 21:19:29.994"></status>
</kw>
<tags>
<tag>api</tag>
<tag>externalapi</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:30.037" critical="yes" starttime="20180810 21:19:29.992"></status>
</test>
<test id="s1-s1-s1-s1-t10" name="Basic Microservice Bus Health Check">
<kw name="Run MSB Health Check" library="msb_interface">
<doc>Runs MSB Health check</doc>
<msg timestamp="20180810 21:19:30.040" level="TRACE">Arguments: [  ]</msg>
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>${MSB_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:30.041" level="TRACE">Arguments: [ ${data_path}='/iui/microservices/default.html' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:30.041" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:30.042" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:19:30.042" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:30.042" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:30.042" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:30.042" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c844a50&gt;</msg>
<msg timestamp="20180810 21:19:30.042" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c844a50&gt;</msg>
<status status="PASS" endtime="20180810 21:19:30.043" starttime="20180810 21:19:30.041"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:30.043" level="TRACE">Arguments: [ 'msb' | '/iui/microservices/default.html' ]</msg>
<msg timestamp="20180810 21:19:30.043" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:30.045" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:32.039" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:32.039" starttime="20180810 21:19:30.043"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:32.040" starttime="20180810 21:19:30.040"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:32.040" starttime="20180810 21:19:30.040"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:32.041" critical="yes" starttime="20180810 21:19:30.038">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t11" name="Basic Multicloud API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:32.046" level="TRACE">Arguments: [ ${data_path}='/api/multicloud/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:32.047" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:32.047" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:32.047" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:32.047" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:32.048" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:32.048" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c7d4c50&gt;</msg>
<msg timestamp="20180810 21:19:32.048" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c7d4c50&gt;</msg>
<status status="PASS" endtime="20180810 21:19:32.048" starttime="20180810 21:19:32.047"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:32.049" level="TRACE">Arguments: [ 'msb' | '/api/multicloud/v0/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:32.049" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:32.051" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:34.043" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:34.044" starttime="20180810 21:19:32.049"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:34.044" starttime="20180810 21:19:32.045"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:34.045" critical="yes" starttime="20180810 21:19:32.043">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t12" name="Basic Multicloud-ocata API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-ocata/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:34.049" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-ocata/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:34.051" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:34.051" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:34.051" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:34.051" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:34.053" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:34.053" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c7e4ad0&gt;</msg>
<msg timestamp="20180810 21:19:34.053" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c7e4ad0&gt;</msg>
<status status="PASS" endtime="20180810 21:19:34.054" starttime="20180810 21:19:34.050"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:34.054" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-ocata/v0/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:34.055" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:34.056" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:36.047" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:36.047" starttime="20180810 21:19:34.054"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:36.048" starttime="20180810 21:19:34.048"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:36.048" critical="yes" starttime="20180810 21:19:34.046">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t13" name="Basic Multicloud-titanium_cloud API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-titanium_cloud/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:36.051" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-titanium_cloud/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:36.053" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:36.053" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:36.053" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:36.053" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:36.053" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:36.054" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c7e4210&gt;</msg>
<msg timestamp="20180810 21:19:36.054" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c7e4210&gt;</msg>
<status status="PASS" endtime="20180810 21:19:36.054" starttime="20180810 21:19:36.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:36.055" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-titanium_cloud/v0/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:36.056" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:36.057" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:38.049" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:38.050" starttime="20180810 21:19:36.055"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:38.050" starttime="20180810 21:19:36.051"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:38.051" critical="yes" starttime="20180810 21:19:36.049">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t14" name="Basic Multicloud-vio API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-vio/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:38.056" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-vio/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:38.057" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:38.057" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:38.058" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:38.058" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:38.058" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:38.059" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c844190&gt;</msg>
<msg timestamp="20180810 21:19:38.059" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c844190&gt;</msg>
<status status="PASS" endtime="20180810 21:19:38.059" starttime="20180810 21:19:38.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:38.060" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-vio/v0/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:38.060" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:38.063" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:40.053" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:40.054" starttime="20180810 21:19:38.060"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:40.054" starttime="20180810 21:19:38.055"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:40.055" critical="yes" starttime="20180810 21:19:38.052">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t15" name="Basic OOF-Homing Health Check">
<kw name="Run OOF-Homing Health Check" library="oof_interface">
<doc>Runs OOF-Homing Health check</doc>
<msg timestamp="20180810 21:19:40.059" level="TRACE">Arguments: [  ]</msg>
<kw name="Run OOF-Homing Get Request" library="oof_interface">
<doc>Runs OOF-Homing Get request</doc>
<arguments>
<arg>${OOF_HOMING_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:40.061" level="TRACE">Arguments: [ ${data_path}='/v1/plans/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${OOF_HOMING_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:40.063" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.23:8091' ]</msg>
<msg timestamp="20180810 21:19:40.063" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:40.063" level="INFO">Creating Session using : alias=session, url=http://192.168.61.23:8091, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:40.063" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 21:19:40.064" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:40.064" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c7ee890&gt;</msg>
<msg timestamp="20180810 21:19:40.064" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c7ee890&gt;</msg>
<status status="PASS" endtime="20180810 21:19:40.064" starttime="20180810 21:19:40.062"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:40.065" level="TRACE">Arguments: [ 'session' | '/v1/plans/healthcheck' ]</msg>
<msg timestamp="20180810 21:19:40.065" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:40.067" level="DEBUG">Starting new HTTP connection (1): 192.168.61.23</msg>
<msg timestamp="20180810 21:19:42.058" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:42.058" starttime="20180810 21:19:40.065"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:42.059" starttime="20180810 21:19:40.060"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:42.059" starttime="20180810 21:19:40.059"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:42.060" critical="yes" starttime="20180810 21:19:40.056">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t16" name="Basic OOF-SNIRO Health Check">
<kw name="Run OOF-SNIRO Health Check" library="oof_interface">
<doc>Runs OOF-SNIRO Health check</doc>
<msg timestamp="20180810 21:19:42.065" level="TRACE">Arguments: [  ]</msg>
<kw name="Run OOF-SNIRO Get Request" library="oof_interface">
<doc>Runs OOF-SNIRO Get request</doc>
<arguments>
<arg>${OOF_SNIRO_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:42.067" level="TRACE">Arguments: [ ${data_path}='/api/oof/v1/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${OOF_SNIRO_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:42.069" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.23:8698' ]</msg>
<msg timestamp="20180810 21:19:42.069" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:42.070" level="INFO">Creating Session using : alias=session, url=http://192.168.61.23:8698, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:42.070" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 21:19:42.070" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:42.071" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c84abd0&gt;</msg>
<msg timestamp="20180810 21:19:42.071" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c84abd0&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.071" starttime="20180810 21:19:42.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:42.072" level="TRACE">Arguments: [ 'session' | '/api/oof/v1/healthcheck' ]</msg>
<msg timestamp="20180810 21:19:42.073" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 21:19:42.075" level="DEBUG">Starting new HTTP connection (1): 192.168.61.23</msg>
<msg timestamp="20180810 21:19:42.084" level="DEBUG">http://192.168.61.23:8698 "GET /api/oof/v1/healthcheck HTTP/1.1" 200 2</msg>
<msg timestamp="20180810 21:19:42.085" level="INFO">Get Request using : alias=session, uri=/api/oof/v1/healthcheck, headers=None </msg>
<msg timestamp="20180810 21:19:42.085" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:42.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.085" starttime="20180810 21:19:42.072"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.087" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.087" level="DEBUG">Test timeout 2 seconds active. 1.974 seconds left.</msg>
<msg timestamp="20180810 21:19:42.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.088" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.088" starttime="20180810 21:19:42.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from OOF-SNIRO ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.089" level="TRACE">Arguments: [ 'Received response from OOF-SNIRO OK' ]</msg>
<msg timestamp="20180810 21:19:42.089" level="DEBUG">Test timeout 2 seconds active. 1.972 seconds left.</msg>
<msg timestamp="20180810 21:19:42.089" level="INFO">Received response from OOF-SNIRO OK</msg>
<msg timestamp="20180810 21:19:42.090" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.090" starttime="20180810 21:19:42.089"></status>
</kw>
<msg timestamp="20180810 21:19:42.090" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:42.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.090" starttime="20180810 21:19:42.066"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.091" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.091" level="DEBUG">Test timeout 2 seconds active. 1.97 seconds left.</msg>
<msg timestamp="20180810 21:19:42.092" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.092" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.092" starttime="20180810 21:19:42.091"></status>
</kw>
<msg timestamp="20180810 21:19:42.092" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.092" starttime="20180810 21:19:42.064"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:42.093" critical="yes" starttime="20180810 21:19:42.061"></status>
</test>
<test id="s1-s1-s1-s1-t17" name="Basic Policy Health Check">
<kw name="Run Policy Health Check" library="policy_interface">
<doc>Runs Policy Health check</doc>
<msg timestamp="20180810 21:19:42.096" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_POLICY_USERNAME}</arg>
<arg>${GLOBAL_POLICY_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:42.097" level="TRACE">Arguments: [ b'healthcheck' | b'zb!XztG34' ]</msg>
<msg timestamp="20180810 21:19:42.097" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:42.097" level="TRACE">Return: [b'healthcheck', b'zb!XztG34']</msg>
<msg timestamp="20180810 21:19:42.098" level="INFO">${auth} = ['healthcheck', 'zb!XztG34']</msg>
<status status="PASS" endtime="20180810 21:19:42.098" starttime="20180810 21:19:42.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${POLICY_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.099" level="TRACE">Arguments: [ 'Creating session http://192.168.61.14:8081' ]</msg>
<msg timestamp="20180810 21:19:42.099" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:42.099" level="INFO">Creating session http://192.168.61.14:8081</msg>
<msg timestamp="20180810 21:19:42.099" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.099" starttime="20180810 21:19:42.098"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>policy</arg>
<arg>${POLICY_HEALTHCHECK_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:42.100" level="TRACE">Arguments: [ 'policy' | 'http://192.168.61.14:6969' | auth=[b'healthcheck', b'zb!XztG34'] ]</msg>
<msg timestamp="20180810 21:19:42.101" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:42.101" level="INFO">Creating Session using : alias=policy, url=http://192.168.61.14:6969, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29c80d4d0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:42.101" level="DEBUG">Creating session: policy</msg>
<msg timestamp="20180810 21:19:42.101" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:42.102" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c80d750&gt;</msg>
<msg timestamp="20180810 21:19:42.102" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c80d750&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.102" starttime="20180810 21:19:42.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:42.103" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' ]</msg>
<msg timestamp="20180810 21:19:42.104" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20180810 21:19:42.104" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20180810 21:19:42.104" starttime="20180810 21:19:42.103"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>policy</arg>
<arg>${POLICY_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:42.105" level="TRACE">Arguments: [ 'policy' | '/healthcheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20180810 21:19:42.106" level="DEBUG">Test timeout 2 seconds active. 1.988 seconds left.</msg>
<msg timestamp="20180810 21:19:42.107" level="DEBUG">Starting new HTTP connection (1): 192.168.61.14</msg>
<msg timestamp="20180810 21:19:42.141" level="DEBUG">http://192.168.61.14:6969 "GET /healthcheck HTTP/1.1" 200 276</msg>
<msg timestamp="20180810 21:19:42.147" level="INFO">Get Request using : alias=policy, uri=/healthcheck, headers={u'Accept': u'application/json', u'Content-Type': u'application/json'} </msg>
<msg timestamp="20180810 21:19:42.147" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:42.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.147" starttime="20180810 21:19:42.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from policy ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.149" level="TRACE">Arguments: [ 'Received response from policy {"healthy":true,"details":[{"name":"PDP-D","url":"self","healthy":true,"code":200,"message":"alive"},{"name":"PAP","url":"http://pap:9091/pap/test","healthy":true,"code":200,"message":""},{"name":"PDP","url":"http://pdp:8081/pdp/test","healthy":true,"code":200,"message":""}]}' ]</msg>
<msg timestamp="20180810 21:19:42.149" level="DEBUG">Test timeout 2 seconds active. 1.944 seconds left.</msg>
<msg timestamp="20180810 21:19:42.150" level="INFO">Received response from policy {"healthy":true,"details":[{"name":"PDP-D","url":"self","healthy":true,"code":200,"message":"alive"},{"name":"PAP","url":"http://pap:9091/pap/test","healthy":true,"code":200,"message":""},{"name":"PDP","url":"http://pdp:8081/pdp/test","healthy":true,"code":200,"message":""}]}</msg>
<msg timestamp="20180810 21:19:42.150" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.150" starttime="20180810 21:19:42.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.152" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.152" level="DEBUG">Test timeout 2 seconds active. 1.942 seconds left.</msg>
<msg timestamp="20180810 21:19:42.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.152" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.152" starttime="20180810 21:19:42.151"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp.json()['healthy']}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.154" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 21:19:42.154" level="DEBUG">Test timeout 2 seconds active. 1.939 seconds left.</msg>
<msg timestamp="20180810 21:19:42.154" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.155" starttime="20180810 21:19:42.153"></status>
</kw>
<kw name="Copy List" library="Collections">
<doc>Returns a copy of the given list.</doc>
<arguments>
<arg>${resp.json()['details']}</arg>
</arguments>
<assign>
<var>@{ITEMS}</var>
</assign>
<msg timestamp="20180810 21:19:42.156" level="TRACE">Arguments: [ [{'code': 200, 'healthy': True, 'message': 'alive', 'name': 'PDP-D', 'url': 'self'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PAP', 'url': 'http://pap:9091/pap/test'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PDP', 'url': 'http://pdp:8081/pdp/test'}] ]</msg>
<msg timestamp="20180810 21:19:42.157" level="DEBUG">Test timeout 2 seconds active. 1.937 seconds left.</msg>
<msg timestamp="20180810 21:19:42.157" level="TRACE">Return: [{'code': 200, 'healthy': True, 'message': 'alive', 'name': 'PDP-D', 'url': 'self'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PAP', 'url': 'http://pap:9091/pap/test'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PDP', 'url': 'http://pdp:8081/pdp/test'}]</msg>
<msg timestamp="20180810 21:19:42.158" level="INFO">@{ITEMS} = [ {u'url': u'self', u'healthy': True, u'message': u'alive', u'code': 200, u'name': u'PDP-D'} | {u'url': u'http://pap:9091/pap/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PAP'} |...</msg>
<status status="PASS" endtime="20180810 21:19:42.158" starttime="20180810 21:19:42.155"></status>
</kw>
<kw type="for" name="${ELEMENT} IN [ @{ITEMS} ]">
<kw type="foritem" name="${ELEMENT} = {u'url': u'self', u'healthy': True, u'message': u'alive', u'code': 200, u'name': u'PDP-D'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.161" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.161" level="DEBUG">Test timeout 2 seconds active. 1.933 seconds left.</msg>
<msg timestamp="20180810 21:19:42.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.161" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.161" starttime="20180810 21:19:42.160"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.162" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 21:19:42.162" level="DEBUG">Test timeout 2 seconds active. 1.931 seconds left.</msg>
<msg timestamp="20180810 21:19:42.162" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.163" starttime="20180810 21:19:42.162"></status>
</kw>
<status status="PASS" endtime="20180810 21:19:42.163" starttime="20180810 21:19:42.159"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = {u'url': u'http://pap:9091/pap/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PAP'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.164" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.164" level="DEBUG">Test timeout 2 seconds active. 1.929 seconds left.</msg>
<msg timestamp="20180810 21:19:42.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.165" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.165" starttime="20180810 21:19:42.164"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.166" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 21:19:42.166" level="DEBUG">Test timeout 2 seconds active. 1.927 seconds left.</msg>
<msg timestamp="20180810 21:19:42.167" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.167" starttime="20180810 21:19:42.166"></status>
</kw>
<status status="PASS" endtime="20180810 21:19:42.167" starttime="20180810 21:19:42.163"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = {u'url': u'http://pdp:8081/pdp/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PDP'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.168" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.168" level="DEBUG">Test timeout 2 seconds active. 1.925 seconds left.</msg>
<msg timestamp="20180810 21:19:42.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.169" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.169" starttime="20180810 21:19:42.168"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.170" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 21:19:42.170" level="DEBUG">Test timeout 2 seconds active. 1.923 seconds left.</msg>
<msg timestamp="20180810 21:19:42.170" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.171" starttime="20180810 21:19:42.170"></status>
</kw>
<status status="PASS" endtime="20180810 21:19:42.171" starttime="20180810 21:19:42.167"></status>
</kw>
<status status="PASS" endtime="20180810 21:19:42.171" starttime="20180810 21:19:42.159"></status>
</kw>
<msg timestamp="20180810 21:19:42.171" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.171" starttime="20180810 21:19:42.095"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:42.171" critical="yes" starttime="20180810 21:19:42.093"></status>
</test>
<test id="s1-s1-s1-s1-t18" name="Basic Portal Health Check">
<kw name="Run Portal Health Check" library="portal_interface">
<doc>Runs Portal Health check</doc>
<msg timestamp="20180810 21:19:42.174" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Portal Get Request" library="portal_interface">
<doc>Runs Portal Get request</doc>
<arguments>
<arg>${PORTAL_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:42.176" level="TRACE">Arguments: [ ${data_path}='/ONAPPORTAL/portalApi/healthCheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>portal</arg>
<arg>${PORTAL_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:42.177" level="TRACE">Arguments: [ 'portal' | 'http://192.168.61.16:8989' ]</msg>
<msg timestamp="20180810 21:19:42.177" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:42.177" level="INFO">Creating Session using : alias=portal, url=http://192.168.61.16:8989, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:42.177" level="DEBUG">Creating session: portal</msg>
<msg timestamp="20180810 21:19:42.178" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:42.178" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c7fc490&gt;</msg>
<msg timestamp="20180810 21:19:42.178" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c7fc490&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.178" starttime="20180810 21:19:42.176"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:42.179" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:42.179" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:42.180" level="TRACE">Return: UUID('1c67ead5-0c6d-485e-85d6-b58e5a8a184c')</msg>
<msg timestamp="20180810 21:19:42.180" level="INFO">${uuid} = 1c67ead5-0c6d-485e-85d6-b58e5a8a184c</msg>
<status status="PASS" endtime="20180810 21:19:42.180" starttime="20180810 21:19:42.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:42.181" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:42.182" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-1c67ead5-0c6d-485e-85d6-b58e5a8a184c'}</msg>
<msg timestamp="20180810 21:19:42.182" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-1c67ead5-0c6d-485e-85d6-b58e5a8a184c', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:42.182" starttime="20180810 21:19:42.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>portal</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:42.183" level="TRACE">Arguments: [ 'portal' | '/ONAPPORTAL/portalApi/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-1c67ead5-0c6d-485e-85d6-b58e5a8a184c'} ]</msg>
<msg timestamp="20180810 21:19:42.184" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 21:19:42.186" level="DEBUG">Starting new HTTP connection (1): 192.168.61.16</msg>
<msg timestamp="20180810 21:19:42.245" level="DEBUG">http://192.168.61.16:8989 "GET /ONAPPORTAL/portalApi/healthCheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 21:19:42.317" level="INFO">Get Request using : alias=portal, uri=/ONAPPORTAL/portalApi/healthCheck, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-1c67ead5-0c6d-485e-85d6-b58e5a8a184c', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 21:19:42.317" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:42.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.318" starttime="20180810 21:19:42.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from portal ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:42.319" level="TRACE">Arguments: [ 'Received response from portal {"statusCode":200,"body":"[{\\"healthCheckComponent\\":\\"BE\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"65111bf67c9e\\",\\"ipAddress\\":\\"172.18.0.7\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"},{\\"healthCheckComponent\\":\\"FE\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"},{\\"healthCheckComponent\\":\\"DB\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"OK\\",\\"dbPermissions\\":\\"OK\\"},{\\"healthCheckComponent\\":\\"UEB\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"}]"}' ]</msg>
<msg timestamp="20180810 21:19:42.319" level="DEBUG">Test timeout 2 seconds active. 1.854 seconds left.</msg>
<msg timestamp="20180810 21:19:42.319" level="INFO">Received response from portal {"statusCode":200,"body":"[{\"healthCheckComponent\":\"BE\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"65111bf67c9e\",\"ipAddress\":\"172.18.0.7\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"},{\"healthCheckComponent\":\"FE\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"},{\"healthCheckComponent\":\"DB\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"OK\",\"dbPermissions\":\"OK\"},{\"healthCheckComponent\":\"UEB\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"}]"}</msg>
<msg timestamp="20180810 21:19:42.319" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.319" starttime="20180810 21:19:42.318"></status>
</kw>
<msg timestamp="20180810 21:19:42.319" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:42.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.319" starttime="20180810 21:19:42.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.320" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.320" level="DEBUG">Test timeout 2 seconds active. 1.852 seconds left.</msg>
<msg timestamp="20180810 21:19:42.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.320" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.321" starttime="20180810 21:19:42.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['statusCode']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:42.321" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:42.321" level="DEBUG">Test timeout 2 seconds active. 1.851 seconds left.</msg>
<msg timestamp="20180810 21:19:42.321" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:42.322" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.322" starttime="20180810 21:19:42.321"></status>
</kw>
<msg timestamp="20180810 21:19:42.322" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:42.322" starttime="20180810 21:19:42.174"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:42.322" critical="yes" starttime="20180810 21:19:42.172"></status>
</test>
<test id="s1-s1-s1-s1-t19" name="Basic SDC Health Check">
<kw name="Run ASDC Health Check" library="asdc_interface">
<doc>Runs a ASDC health check</doc>
<msg timestamp="20180810 21:19:42.324" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>asdc</arg>
<arg>${ASDC_FE_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:42.324" level="TRACE">Arguments: [ 'asdc' | 'http://10.0.3.1:8181' ]</msg>
<msg timestamp="20180810 21:19:42.324" level="DEBUG">Test timeout 2 seconds active. 1.998 seconds left.</msg>
<msg timestamp="20180810 21:19:42.325" level="INFO">Creating Session using : alias=asdc, url=http://10.0.3.1:8181, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:42.325" level="DEBUG">Creating session: asdc</msg>
<msg timestamp="20180810 21:19:42.325" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:42.325" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c844350&gt;</msg>
<msg timestamp="20180810 21:19:42.325" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c844350&gt;</msg>
<status status="PASS" endtime="20180810 21:19:42.325" starttime="20180810 21:19:42.324"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:42.326" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:42.326" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:19:42.326" level="TRACE">Return: UUID('fbea3c14-dbba-454b-847b-8712106f5c5a')</msg>
<msg timestamp="20180810 21:19:42.326" level="INFO">${uuid} = fbea3c14-dbba-454b-847b-8712106f5c5a</msg>
<status status="PASS" endtime="20180810 21:19:42.326" starttime="20180810 21:19:42.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:42.327" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:42.327" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-fbea3c14-dbba-454b-847b-8712106f5c5a'}</msg>
<msg timestamp="20180810 21:19:42.327" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-fbea3c14-dbba-454b-847b-8712106f5c5a', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:42.328" starttime="20180810 21:19:42.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>asdc</arg>
<arg>${ASDC_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:42.328" level="TRACE">Arguments: [ 'asdc' | '/sdc1/rest/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-fbea3c14-dbba-454b-847b-8712106f5c5a'} ]</msg>
<msg timestamp="20180810 21:19:42.328" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:42.329" level="DEBUG">Starting new HTTP connection (1): 10.0.3.1</msg>
<msg timestamp="20180810 21:19:44.323" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:44.323" starttime="20180810 21:19:42.328"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:44.324" starttime="20180810 21:19:42.324"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:44.325" critical="yes" starttime="20180810 21:19:42.323">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t20" name="Basic SDNC Health Check">
<kw name="Run SDNGC Health Check" library="sdngc_interface">
<doc>Runs an SDNGC healthcheck</doc>
<msg timestamp="20180810 21:19:44.329" level="TRACE">Arguments: [  ]</msg>
<kw name="Run SDNGC Post Request" library="sdngc_interface">
<doc>Runs an SDNGC post request</doc>
<arguments>
<arg>${SDNGC_INDEX PATH}${SDNCGC_HEALTHCHECK_OPERATION_PATH}</arg>
<arg>${None}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:44.331" level="TRACE">Arguments: [ ${data_path}='/restconf/operations/SLI-API:healthcheck' | ${data}=None ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_SDNGC_USERNAME}</arg>
<arg>${GLOBAL_SDNGC_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:44.332" level="TRACE">Arguments: [ b'admin' | b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U' ]</msg>
<msg timestamp="20180810 21:19:44.332" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:44.332" level="TRACE">Return: [b'admin', b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U']</msg>
<msg timestamp="20180810 21:19:44.332" level="INFO">${auth} = ['admin', 'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U']</msg>
<status status="PASS" endtime="20180810 21:19:44.332" starttime="20180810 21:19:44.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${SDNGC_REST_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 21:19:44.333" level="TRACE">Arguments: [ 'Creating session http://192.168.61.24:8282' ]</msg>
<msg timestamp="20180810 21:19:44.333" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:44.333" level="INFO">Creating session http://192.168.61.24:8282</msg>
<msg timestamp="20180810 21:19:44.333" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.333" starttime="20180810 21:19:44.333"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>sdngc</arg>
<arg>${SDNGC_REST_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:44.334" level="TRACE">Arguments: [ 'sdngc' | 'http://192.168.61.24:8282' | auth=[b'admin', b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U'] ]</msg>
<msg timestamp="20180810 21:19:44.334" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:44.335" level="INFO">Creating Session using : alias=sdngc, url=http://192.168.61.24:8282, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29d115790&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:44.335" level="DEBUG">Creating session: sdngc</msg>
<msg timestamp="20180810 21:19:44.335" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:44.336" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d115950&gt;</msg>
<msg timestamp="20180810 21:19:44.336" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d115950&gt;</msg>
<status status="PASS" endtime="20180810 21:19:44.336" starttime="20180810 21:19:44.334"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:44.336" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:44.337" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 21:19:44.337" level="TRACE">Return: UUID('f34abc35-bd46-4642-bbfe-6ad1390bab8c')</msg>
<msg timestamp="20180810 21:19:44.337" level="INFO">${uuid} = f34abc35-bd46-4642-bbfe-6ad1390bab8c</msg>
<status status="PASS" endtime="20180810 21:19:44.337" starttime="20180810 21:19:44.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:44.338" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:44.339" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-f34abc35-bd46-4642-bbfe-6ad1390bab8c'}</msg>
<msg timestamp="20180810 21:19:44.339" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-f34abc35-bd46-4642-bbfe-6ad1390bab8c', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:44.339" starttime="20180810 21:19:44.338"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>sdngc</arg>
<arg>${data_path}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:44.340" level="TRACE">Arguments: [ 'sdngc' | '/restconf/operations/SLI-API:healthcheck' | data=None | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-f34abc35-bd46-4642-bbfe-6ad1390bab8c'} ]</msg>
<msg timestamp="20180810 21:19:44.340" level="DEBUG">Test timeout 2 seconds active. 1.986 seconds left.</msg>
<msg timestamp="20180810 21:19:44.342" level="DEBUG">Starting new HTTP connection (1): 192.168.61.24</msg>
<msg timestamp="20180810 21:19:44.370" level="DEBUG">http://192.168.61.24:8282 "POST /restconf/operations/SLI-API:healthcheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 21:19:44.372" level="DEBUG">post response: {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 21:19:44.372" level="INFO">Post Request using : alias=sdngc, uri=/restconf/operations/SLI-API:healthcheck, data=None,                     headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-f34abc35-bd46-4642-bbfe-6ad1390bab8c', u'X-FromAppId': u'robot-ete'}, files=None, allow_redirects=True </msg>
<msg timestamp="20180810 21:19:44.372" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:44.373" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:44.373" starttime="20180810 21:19:44.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from sdngc ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:19:44.375" level="TRACE">Arguments: [ 'Received response from sdngc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}' ]</msg>
<msg timestamp="20180810 21:19:44.375" level="DEBUG">Test timeout 2 seconds active. 1.952 seconds left.</msg>
<msg timestamp="20180810 21:19:44.375" level="INFO">Received response from sdngc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 21:19:44.376" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.376" starttime="20180810 21:19:44.374"></status>
</kw>
<msg timestamp="20180810 21:19:44.376" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:44.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:44.377" starttime="20180810 21:19:44.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:44.378" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:44.378" level="DEBUG">Test timeout 2 seconds active. 1.948 seconds left.</msg>
<msg timestamp="20180810 21:19:44.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:44.379" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.379" starttime="20180810 21:19:44.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['output']['response-code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:44.380" level="TRACE">Arguments: [ '200' | '200' ]</msg>
<msg timestamp="20180810 21:19:44.380" level="DEBUG">Test timeout 2 seconds active. 1.946 seconds left.</msg>
<msg timestamp="20180810 21:19:44.380" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:44.381" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.381" starttime="20180810 21:19:44.380"></status>
</kw>
<msg timestamp="20180810 21:19:44.381" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.381" starttime="20180810 21:19:44.328"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:44.381" critical="yes" starttime="20180810 21:19:44.326"></status>
</test>
<test id="s1-s1-s1-s1-t21" name="Basic SO Health Check">
<kw name="Run MSO Health Check" library="mso_interface">
<doc>Runs an MSO global health check</doc>
<msg timestamp="20180810 21:19:44.384" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_MSO_USERNAME}</arg>
<arg>${GLOBAL_MSO_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:19:44.384" level="TRACE">Arguments: [ b'InfraPortalClient' | b'password1$' ]</msg>
<msg timestamp="20180810 21:19:44.385" level="DEBUG">Test timeout 2 seconds active. 1.998 seconds left.</msg>
<msg timestamp="20180810 21:19:44.385" level="TRACE">Return: [b'InfraPortalClient', b'password1$']</msg>
<msg timestamp="20180810 21:19:44.385" level="INFO">${auth} = ['InfraPortalClient', 'password1$']</msg>
<status status="PASS" endtime="20180810 21:19:44.385" starttime="20180810 21:19:44.384"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>mso</arg>
<arg>${MSO_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:44.386" level="TRACE">Arguments: [ 'mso' | 'http://192.168.61.25:8080' ]</msg>
<msg timestamp="20180810 21:19:44.386" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:44.386" level="INFO">Creating Session using : alias=mso, url=http://192.168.61.25:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:44.386" level="DEBUG">Creating session: mso</msg>
<msg timestamp="20180810 21:19:44.387" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:44.387" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d0ca6d0&gt;</msg>
<msg timestamp="20180810 21:19:44.387" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d0ca6d0&gt;</msg>
<status status="PASS" endtime="20180810 21:19:44.387" starttime="20180810 21:19:44.386"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:19:44.388" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:19:44.388" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:44.388" level="TRACE">Return: UUID('a901829f-04de-4cd4-9646-c09e4550fa0c')</msg>
<msg timestamp="20180810 21:19:44.388" level="INFO">${uuid} = a901829f-04de-4cd4-9646-c09e4550fa0c</msg>
<status status="PASS" endtime="20180810 21:19:44.388" starttime="20180810 21:19:44.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=text/html</arg>
<arg>Content-Type=text/html</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:19:44.389" level="TRACE">Arguments: [ 'Accept=text/html' | 'Content-Type=text/html' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:19:44.390" level="TRACE">Return: {'Accept': 'text/html', 'Content-Type': 'text/html', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-a901829f-04de-4cd4-9646-c09e4550fa0c'}</msg>
<msg timestamp="20180810 21:19:44.390" level="INFO">${headers} = {u'Accept': u'text/html', u'Content-Type': u'text/html', u'X-TransactionId': u'robot-ete-a901829f-04de-4cd4-9646-c09e4550fa0c', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 21:19:44.390" starttime="20180810 21:19:44.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>mso</arg>
<arg>${MSO_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:44.391" level="TRACE">Arguments: [ 'mso' | '/ecomp/mso/infra/globalhealthcheck' | headers={'Accept': 'text/html', 'Content-Type': 'text/html', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-a901829f-04de-4cd4-9646-c09e4550fa0c'} ]</msg>
<msg timestamp="20180810 21:19:44.391" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 21:19:44.393" level="DEBUG">Starting new HTTP connection (1): 192.168.61.25</msg>
<msg timestamp="20180810 21:19:44.515" level="DEBUG">http://192.168.61.25:8080 "GET /ecomp/mso/infra/globalhealthcheck HTTP/1.1" 200 125</msg>
<msg timestamp="20180810 21:19:44.516" level="INFO">Get Request using : alias=mso, uri=/ecomp/mso/infra/globalhealthcheck, headers={u'Accept': u'text/html', u'Content-Type': u'text/html', u'X-TransactionId': u'robot-ete-a901829f-04de-4cd4-9646-c09e4550fa0c', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 21:19:44.516" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:19:44.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:19:44.517" starttime="20180810 21:19:44.391"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:19:44.518" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:19:44.519" level="DEBUG">Test timeout 2 seconds active. 1.864 seconds left.</msg>
<msg timestamp="20180810 21:19:44.519" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:19:44.519" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.519" starttime="20180810 21:19:44.518"></status>
</kw>
<msg timestamp="20180810 21:19:44.519" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:19:44.520" starttime="20180810 21:19:44.383"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:19:44.520" critical="yes" starttime="20180810 21:19:44.382"></status>
</test>
<test id="s1-s1-s1-s1-t22" name="Basic UseCaseUI API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/iui/usecaseui/</arg>
</arguments>
<msg timestamp="20180810 21:19:44.524" level="TRACE">Arguments: [ ${data_path}='/iui/usecaseui/' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:44.525" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:44.526" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:44.526" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:44.526" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:44.526" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:44.527" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d369c50&gt;</msg>
<msg timestamp="20180810 21:19:44.527" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d369c50&gt;</msg>
<status status="PASS" endtime="20180810 21:19:44.527" starttime="20180810 21:19:44.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:44.528" level="TRACE">Arguments: [ 'msb' | '/iui/usecaseui/' ]</msg>
<msg timestamp="20180810 21:19:44.528" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:44.530" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:46.522" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:46.523" starttime="20180810 21:19:44.528"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:46.523" starttime="20180810 21:19:44.523"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:46.524" critical="yes" starttime="20180810 21:19:44.521">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t23" name="Basic VFC catalog API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/catalog/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:46.528" level="TRACE">Arguments: [ ${data_path}='/api/catalog/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:46.530" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:46.530" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:46.530" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:46.530" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:46.531" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:46.531" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d13f4d0&gt;</msg>
<msg timestamp="20180810 21:19:46.531" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d13f4d0&gt;</msg>
<status status="PASS" endtime="20180810 21:19:46.532" starttime="20180810 21:19:46.529"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:46.533" level="TRACE">Arguments: [ 'msb' | '/api/catalog/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:46.533" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:46.535" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:48.526" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:48.526" starttime="20180810 21:19:46.532"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:48.527" starttime="20180810 21:19:46.528"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:48.527" critical="yes" starttime="20180810 21:19:46.525">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t24" name="Basic VFC emsdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/emsdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:48.532" level="TRACE">Arguments: [ ${data_path}='/api/emsdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:48.534" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:48.534" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:48.535" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:48.535" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:48.535" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:48.535" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c7fcbd0&gt;</msg>
<msg timestamp="20180810 21:19:48.535" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c7fcbd0&gt;</msg>
<status status="PASS" endtime="20180810 21:19:48.536" starttime="20180810 21:19:48.533"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:48.537" level="TRACE">Arguments: [ 'msb' | '/api/emsdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:48.537" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:48.539" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:50.530" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:50.530" starttime="20180810 21:19:48.536"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:50.530" starttime="20180810 21:19:48.531"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:50.531" critical="yes" starttime="20180810 21:19:48.528">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t25" name="Basic VFC gvnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/gvnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:50.534" level="TRACE">Arguments: [ ${data_path}='/api/gvnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:50.535" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:50.535" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:19:50.536" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:50.536" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:50.536" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:50.537" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d370850&gt;</msg>
<msg timestamp="20180810 21:19:50.537" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d370850&gt;</msg>
<status status="PASS" endtime="20180810 21:19:50.537" starttime="20180810 21:19:50.535"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:50.538" level="TRACE">Arguments: [ 'msb' | '/api/gvnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:50.538" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:50.540" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:52.533" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:52.533" starttime="20180810 21:19:50.538"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:52.534" starttime="20180810 21:19:50.533"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:52.534" critical="yes" starttime="20180810 21:19:50.532">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t26" name="Basic VFC huaweivnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/huaweivnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:52.539" level="TRACE">Arguments: [ ${data_path}='/api/huaweivnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:52.540" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:52.540" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:52.541" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:52.541" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:52.541" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:52.542" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d370b90&gt;</msg>
<msg timestamp="20180810 21:19:52.542" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d370b90&gt;</msg>
<status status="PASS" endtime="20180810 21:19:52.542" starttime="20180810 21:19:52.540"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:52.543" level="TRACE">Arguments: [ 'msb' | '/api/huaweivnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:52.543" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:52.545" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:54.537" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:54.537" starttime="20180810 21:19:52.543"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:54.538" starttime="20180810 21:19:52.538"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:54.538" critical="yes" starttime="20180810 21:19:52.536">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t27" name="Basic VFC jujuvnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/jujuvnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:54.543" level="TRACE">Arguments: [ ${data_path}='/api/jujuvnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:54.544" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:54.544" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:54.545" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:54.545" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:54.545" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:54.546" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d369e90&gt;</msg>
<msg timestamp="20180810 21:19:54.546" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d369e90&gt;</msg>
<status status="PASS" endtime="20180810 21:19:54.546" starttime="20180810 21:19:54.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:54.547" level="TRACE">Arguments: [ 'msb' | '/api/jujuvnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:54.547" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:19:54.550" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:56.541" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:56.542" starttime="20180810 21:19:54.547"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:56.542" starttime="20180810 21:19:54.542"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:56.543" critical="yes" starttime="20180810 21:19:54.540">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t28" name="Basic VFC multivimproxy API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multivimproxy/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:56.548" level="TRACE">Arguments: [ ${data_path}='/api/multivimproxy/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:56.549" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:56.549" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:19:56.550" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:56.550" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:56.551" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:56.551" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d2fff90&gt;</msg>
<msg timestamp="20180810 21:19:56.551" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d2fff90&gt;</msg>
<status status="PASS" endtime="20180810 21:19:56.552" starttime="20180810 21:19:56.549"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:56.553" level="TRACE">Arguments: [ 'msb' | '/api/multivimproxy/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:56.553" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:19:56.555" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:19:58.547" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:19:58.547" starttime="20180810 21:19:56.552"></status>
</kw>
<status status="FAIL" endtime="20180810 21:19:58.548" starttime="20180810 21:19:56.547"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:19:58.548" critical="yes" starttime="20180810 21:19:56.544">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t29" name="Basic VFC nokiavnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/nokiavnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:19:58.553" level="TRACE">Arguments: [ ${data_path}='/api/nokiavnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:19:58.554" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:19:58.555" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:19:58.555" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:19:58.555" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:19:58.555" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:19:58.555" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29f9ada10&gt;</msg>
<msg timestamp="20180810 21:19:58.556" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29f9ada10&gt;</msg>
<status status="PASS" endtime="20180810 21:19:58.556" starttime="20180810 21:19:58.554"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:19:58.556" level="TRACE">Arguments: [ 'msb' | '/api/nokiavnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:19:58.557" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:19:58.558" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:00.551" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:00.552" starttime="20180810 21:19:58.556"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:00.552" starttime="20180810 21:19:58.553"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:00.553" critical="yes" starttime="20180810 21:19:58.550">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t30" name="Basic VFC nokiav2driver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/NokiaSVNFM/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:00.557" level="TRACE">Arguments: [ ${data_path}='/api/NokiaSVNFM/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:00.558" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:00.558" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:20:00.558" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:00.559" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:00.559" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:00.560" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29c801ad0&gt;</msg>
<msg timestamp="20180810 21:20:00.560" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29c801ad0&gt;</msg>
<status status="PASS" endtime="20180810 21:20:00.560" starttime="20180810 21:20:00.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:00.561" level="TRACE">Arguments: [ 'msb' | '/api/NokiaSVNFM/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:00.561" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:00.563" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:02.555" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:02.555" starttime="20180810 21:20:00.561"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:02.556" starttime="20180810 21:20:00.556"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:02.556" critical="yes" starttime="20180810 21:20:00.554">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t31" name="Basic VFC nslcm API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/nslcm/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:02.561" level="TRACE">Arguments: [ ${data_path}='/api/nslcm/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:02.562" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:02.562" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:20:02.563" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:02.563" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:02.563" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:02.564" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29f1a9fd0&gt;</msg>
<msg timestamp="20180810 21:20:02.564" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29f1a9fd0&gt;</msg>
<status status="PASS" endtime="20180810 21:20:02.564" starttime="20180810 21:20:02.562"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:02.565" level="TRACE">Arguments: [ 'msb' | '/api/nslcm/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:02.565" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:02.567" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:04.559" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:04.560" starttime="20180810 21:20:02.565"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:04.560" starttime="20180810 21:20:02.560"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:04.561" critical="yes" starttime="20180810 21:20:02.558">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t32" name="Basic VFC resmgr API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/resmgr/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:04.565" level="TRACE">Arguments: [ ${data_path}='/api/resmgr/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:04.566" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:04.566" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:20:04.567" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:04.567" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:04.568" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:04.568" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29ebb7610&gt;</msg>
<msg timestamp="20180810 21:20:04.568" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29ebb7610&gt;</msg>
<status status="PASS" endtime="20180810 21:20:04.568" starttime="20180810 21:20:04.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:04.569" level="TRACE">Arguments: [ 'msb' | '/api/resmgr/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:04.569" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:04.571" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:06.563" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:06.563" starttime="20180810 21:20:04.569"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:06.564" starttime="20180810 21:20:04.564"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:06.565" critical="yes" starttime="20180810 21:20:04.562">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t33" name="Basic VFC vnflcm API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnflcm/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:06.569" level="TRACE">Arguments: [ ${data_path}='/api/vnflcm/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:06.571" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:06.571" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:20:06.571" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:06.571" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:06.571" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:06.572" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29edff250&gt;</msg>
<msg timestamp="20180810 21:20:06.572" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29edff250&gt;</msg>
<status status="PASS" endtime="20180810 21:20:06.572" starttime="20180810 21:20:06.570"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:06.573" level="TRACE">Arguments: [ 'msb' | '/api/vnflcm/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:06.573" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:20:06.574" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:08.568" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:08.568" starttime="20180810 21:20:06.572"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:08.569" starttime="20180810 21:20:06.569"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:08.569" critical="yes" starttime="20180810 21:20:06.566">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t34" name="Basic VFC vnfmgr API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnfmgr/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:08.573" level="TRACE">Arguments: [ ${data_path}='/api/vnfmgr/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:08.574" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:08.574" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 21:20:08.574" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:08.575" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:08.575" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:08.576" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d2ffdd0&gt;</msg>
<msg timestamp="20180810 21:20:08.576" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d2ffdd0&gt;</msg>
<status status="PASS" endtime="20180810 21:20:08.576" starttime="20180810 21:20:08.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:08.577" level="TRACE">Arguments: [ 'msb' | '/api/vnfmgr/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:08.577" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:08.579" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:10.571" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:10.572" starttime="20180810 21:20:08.577"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:10.572" starttime="20180810 21:20:08.572"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:10.573" critical="yes" starttime="20180810 21:20:08.571">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t35" name="Basic VFC vnfres API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnfres/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:10.577" level="TRACE">Arguments: [ ${data_path}='/api/vnfres/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:10.578" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:10.578" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:20:10.579" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:10.579" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:10.579" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:10.579" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29eb5ea50&gt;</msg>
<msg timestamp="20180810 21:20:10.580" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29eb5ea50&gt;</msg>
<status status="PASS" endtime="20180810 21:20:10.580" starttime="20180810 21:20:10.578"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:10.580" level="TRACE">Arguments: [ 'msb' | '/api/vnfres/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:10.580" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 21:20:10.583" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:12.575" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:12.576" starttime="20180810 21:20:10.580"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:12.576" starttime="20180810 21:20:10.577"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:12.577" critical="yes" starttime="20180810 21:20:10.574">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t36" name="Basic VFC workflow API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/workflow/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:12.582" level="TRACE">Arguments: [ ${data_path}='/api/workflow/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:12.583" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:12.583" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:20:12.584" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:12.584" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:12.584" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:12.585" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29f1c5e50&gt;</msg>
<msg timestamp="20180810 21:20:12.585" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29f1c5e50&gt;</msg>
<status status="PASS" endtime="20180810 21:20:12.585" starttime="20180810 21:20:12.583"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:12.586" level="TRACE">Arguments: [ 'msb' | '/api/workflow/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:12.586" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:12.588" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:14.580" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:14.581" starttime="20180810 21:20:12.586"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:14.581" starttime="20180810 21:20:12.581"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:14.582" critical="yes" starttime="20180810 21:20:12.579">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t37" name="Basic VFC ztesdncdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/ztesdncdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:14.586" level="TRACE">Arguments: [ ${data_path}='/api/ztesdncdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:14.587" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:14.587" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 21:20:14.588" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:14.588" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:14.588" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:14.589" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29ebb7d90&gt;</msg>
<msg timestamp="20180810 21:20:14.589" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29ebb7d90&gt;</msg>
<status status="PASS" endtime="20180810 21:20:14.589" starttime="20180810 21:20:14.587"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:14.591" level="TRACE">Arguments: [ 'msb' | '/api/ztesdncdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:14.591" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:20:14.593" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:16.584" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:16.584" starttime="20180810 21:20:14.590"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:16.585" starttime="20180810 21:20:14.585"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:16.585" critical="yes" starttime="20180810 21:20:14.583">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t38" name="Basic VFC ztevnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/ztevnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 21:20:16.589" level="TRACE">Arguments: [ ${data_path}='/api/ztevnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:16.591" level="TRACE">Arguments: [ 'msb' | 'http://10.3.1.0:80' ]</msg>
<msg timestamp="20180810 21:20:16.591" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:20:16.591" level="INFO">Creating Session using : alias=msb, url=http://10.3.1.0:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:16.591" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 21:20:16.592" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:16.592" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29d2ffa90&gt;</msg>
<msg timestamp="20180810 21:20:16.592" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29d2ffa90&gt;</msg>
<status status="PASS" endtime="20180810 21:20:16.592" starttime="20180810 21:20:16.590"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:16.593" level="TRACE">Arguments: [ 'msb' | '/api/ztevnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 21:20:16.593" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:16.595" level="DEBUG">Starting new HTTP connection (1): 10.3.1.0</msg>
<msg timestamp="20180810 21:20:18.587" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:18.587" starttime="20180810 21:20:16.593"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:18.588" starttime="20180810 21:20:16.588"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:18.588" critical="yes" starttime="20180810 21:20:16.586">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t39" name="Basic VID Health Check">
<kw name="Run VID Health Check" library="vid_interface">
<doc>Logs in to VID GUI</doc>
<msg timestamp="20180810 21:20:18.591" level="TRACE">Arguments: [  ]</msg>
<kw name="Run VID Get Request" library="vid_interface">
<doc>Runs an VID get request</doc>
<arguments>
<arg>${VID_HEALTHCHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:18.593" level="TRACE">Arguments: [ ${data_path}='/vid/healthCheck' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_VID_HEALTH_USERNAME}</arg>
<arg>${GLOBAL_VID_HEALTH_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 21:20:18.595" level="TRACE">Arguments: [ b'Default' | b'AppPassword!1' ]</msg>
<msg timestamp="20180810 21:20:18.595" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:20:18.595" level="TRACE">Return: [b'Default', b'AppPassword!1']</msg>
<msg timestamp="20180810 21:20:18.595" level="INFO">${auth} = ['Default', 'AppPassword!1']</msg>
<status status="PASS" endtime="20180810 21:20:18.595" starttime="20180810 21:20:18.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${VID_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 21:20:18.596" level="TRACE">Arguments: [ 'Creating session http://192.168.61.32:8080' ]</msg>
<msg timestamp="20180810 21:20:18.596" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:18.596" level="INFO">Creating session http://192.168.61.32:8080</msg>
<msg timestamp="20180810 21:20:18.596" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:20:18.597" starttime="20180810 21:20:18.596"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>vid</arg>
<arg>${VID_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:18.597" level="TRACE">Arguments: [ 'vid' | 'http://192.168.61.32:8080' | auth=[b'Default', b'AppPassword!1'] ]</msg>
<msg timestamp="20180810 21:20:18.598" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 21:20:18.598" level="INFO">Creating Session using : alias=vid, url=http://192.168.61.32:8080, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fa29f0a56d0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:18.598" level="DEBUG">Creating session: vid</msg>
<msg timestamp="20180810 21:20:18.598" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:18.599" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29ed692d0&gt;</msg>
<msg timestamp="20180810 21:20:18.599" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29ed692d0&gt;</msg>
<status status="PASS" endtime="20180810 21:20:18.599" starttime="20180810 21:20:18.597"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 21:20:18.600" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 21:20:18.600" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 21:20:18.600" level="TRACE">Return: UUID('8ae52e79-8329-4975-8505-1cb737e00f6a')</msg>
<msg timestamp="20180810 21:20:18.601" level="INFO">${uuid} = 8ae52e79-8329-4975-8505-1cb737e00f6a</msg>
<status status="PASS" endtime="20180810 21:20:18.601" starttime="20180810 21:20:18.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${GLOBAL_VID_HEALTH_USERNAME}</arg>
<arg>password=${GLOBAL_VID_HEALTH_PASSWORD}</arg>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 21:20:18.601" level="TRACE">Arguments: [ 'username=${GLOBAL_VID_HEALTH_USERNAME}' | 'password=${GLOBAL_VID_HEALTH_PASSWORD}' | 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 21:20:18.603" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-8ae52e79-8329-4975-8505-1cb737e00f6a', 'password': b'AppPassword!1', 'username': b'Default'}</msg>
<msg timestamp="20180810 21:20:18.603" level="INFO">${headers} = {u'username': 'Default', u'password': 'AppPassword!1', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-8ae52e79-8329-4975-8505-1cb737e00f6a', u'X-...</msg>
<status status="PASS" endtime="20180810 21:20:18.603" starttime="20180810 21:20:18.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>vid</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:18.604" level="TRACE">Arguments: [ 'vid' | '/vid/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-8ae52e79-8329-4975-8505-1cb737e00f6a', 'password': b'AppPassword!1', 'username': b'Default'} ]</msg>
<msg timestamp="20180810 21:20:18.605" level="DEBUG">Test timeout 2 seconds active. 1.985 seconds left.</msg>
<msg timestamp="20180810 21:20:18.606" level="DEBUG">Starting new HTTP connection (1): 192.168.61.32</msg>
<msg timestamp="20180810 21:20:18.636" level="DEBUG">http://192.168.61.32:8080 "GET /vid/healthCheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 21:20:18.637" level="INFO">Get Request using : alias=vid, uri=/vid/healthCheck, headers={u'username': 'Default', u'password': 'AppPassword!1', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-8ae52e79-8329-4975-8505-1cb737e00f6a', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 21:20:18.637" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:20:18.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:20:18.638" starttime="20180810 21:20:18.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from vid ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 21:20:18.639" level="TRACE">Arguments: [ 'Received response from vid {"statusCode":200,"message":"health check succeeded","date":null}' ]</msg>
<msg timestamp="20180810 21:20:18.640" level="DEBUG">Test timeout 2 seconds active. 1.95 seconds left.</msg>
<msg timestamp="20180810 21:20:18.640" level="INFO">Received response from vid {"statusCode":200,"message":"health check succeeded","date":null}</msg>
<msg timestamp="20180810 21:20:18.640" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:20:18.640" starttime="20180810 21:20:18.639"></status>
</kw>
<msg timestamp="20180810 21:20:18.640" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 21:20:18.641" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 21:20:18.641" starttime="20180810 21:20:18.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 21:20:18.642" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 21:20:18.642" level="DEBUG">Test timeout 2 seconds active. 1.947 seconds left.</msg>
<msg timestamp="20180810 21:20:18.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 21:20:18.642" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:20:18.643" starttime="20180810 21:20:18.641"></status>
</kw>
<kw name="Should Be String" library="String">
<doc>Fails if the given ``item`` is not a string.</doc>
<arguments>
<arg>${resp.json()['message']}</arg>
</arguments>
<msg timestamp="20180810 21:20:18.644" level="TRACE">Arguments: [ 'health check succeeded' ]</msg>
<msg timestamp="20180810 21:20:18.644" level="DEBUG">Test timeout 2 seconds active. 1.945 seconds left.</msg>
<msg timestamp="20180810 21:20:18.644" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:20:18.644" starttime="20180810 21:20:18.643"></status>
</kw>
<msg timestamp="20180810 21:20:18.645" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 21:20:18.645" starttime="20180810 21:20:18.591"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 21:20:18.645" critical="yes" starttime="20180810 21:20:18.589"></status>
</test>
<test id="s1-s1-s1-s1-t40" name="Basic VNFSDK Health Check">
<kw name="Run VNFSDK Health Check" library="vnfsdk_interface">
<doc>Runs VNFSDK Health check</doc>
<msg timestamp="20180810 21:20:18.649" level="TRACE">Arguments: [  ]</msg>
<kw name="Run VNFSDK Get Request" library="vnfsdk_interface">
<doc>Runs VNFSDK Get request</doc>
<arguments>
<arg>${VNFSDK_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:18.650" level="TRACE">Arguments: [ ${data_path}='/onapapi/vnfsdk-marketplace/v1/PackageResource/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>vnfsdk</arg>
<arg>${VNFSDK_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 21:20:18.651" level="TRACE">Arguments: [ 'vnfsdk' | 'http://10.0.14.1:8702' ]</msg>
<msg timestamp="20180810 21:20:18.651" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 21:20:18.652" level="INFO">Creating Session using : alias=vnfsdk, url=http://10.0.14.1:8702, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 21:20:18.652" level="DEBUG">Creating session: vnfsdk</msg>
<msg timestamp="20180810 21:20:18.652" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 21:20:18.652" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fa29f1ad290&gt;</msg>
<msg timestamp="20180810 21:20:18.653" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fa29f1ad290&gt;</msg>
<status status="PASS" endtime="20180810 21:20:18.653" starttime="20180810 21:20:18.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>vnfsdk</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 21:20:18.654" level="TRACE">Arguments: [ 'vnfsdk' | '/onapapi/vnfsdk-marketplace/v1/PackageResource/healthcheck' ]</msg>
<msg timestamp="20180810 21:20:18.654" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 21:20:18.656" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 21:20:20.647" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 21:20:20.648" starttime="20180810 21:20:18.653"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:20.648" starttime="20180810 21:20:18.649"></status>
</kw>
<status status="FAIL" endtime="20180810 21:20:20.648" starttime="20180810 21:20:18.648"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 21:20:20.648" critical="yes" starttime="20180810 21:20:18.646">Test timeout 2 seconds exceeded.</status>
</test>
<doc>Testing ecomp components are available via calls.

Testing ecomp components are available via calls.</doc>
<status status="FAIL" endtime="20180810 21:20:20.662" starttime="20180810 21:19:16.568"></status>
</suite>
<status status="FAIL" endtime="20180810 21:20:20.700" starttime="20180810 21:19:16.566"></status>
</suite>
<status status="FAIL" endtime="20180810 21:20:20.727" starttime="20180810 21:19:16.563"></status>
</suite>
<status status="FAIL" endtime="20180810 21:20:20.749" starttime="20180810 21:19:16.540"></status>
</suite>
<statistics>
<total>
<stat fail="29" pass="11">Critical Tests</stat>
<stat fail="29" pass="11">All Tests</stat>
</total>
<tag>
<stat fail="9" pass="0">3rdparty</stat>
<stat fail="8" pass="1">api</stat>
<stat fail="7" pass="10">core</stat>
<stat fail="1" pass="0">dcae</stat>
<stat fail="0" pass="1">externalapi</stat>
<stat fail="29" pass="11">health</stat>
<stat fail="4" pass="0">multicloud</stat>
</tag>
<suite>
<stat fail="29" id="s1" name="OpenECOMP ETE" pass="11">OpenECOMP ETE</stat>
<stat fail="29" id="s1-s1" name="Robot" pass="11">OpenECOMP ETE.Robot</stat>
<stat fail="29" id="s1-s1-s1" name="Testsuites" pass="11">OpenECOMP ETE.Robot.Testsuites</stat>
<stat fail="29" id="s1-s1-s1-s1" name="Health-Check" pass="11">OpenECOMP ETE.Robot.Testsuites.Health-Check</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20180810 21:19:29.331" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d26ed10&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 21:19:29.534" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d276c90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 21:19:29.940" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fa29d276810&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
</errors>
</robot>
