<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180810 14:20:19.481" generator="Robot 3.0.4 (Python 2.7.12 on linux2)">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE" id="s1" name="OpenECOMP ETE">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot" id="s1-s1" name="Robot">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/testsuites" id="s1-s1-s1" name="Testsuites">
<suite source="/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/testsuites/health-check.robot" id="s1-s1-s1-s1" name="Health-Check">
<test id="s1-s1-s1-s1-t1" name="Basic A&amp;AI Health Check">
<kw name="Run A&amp;AI Health Check" library="aai_interface">
<doc>Runs an A&amp;AI health check</doc>
<msg timestamp="20180810 14:20:20.042" level="TRACE">Arguments: [  ]</msg>
<kw name="Run A&amp;AI Get Request" library="aai_interface">
<doc>Runs an A&amp;AI get request</doc>
<arguments>
<arg>${AAI_HEALTH_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:20.043" level="TRACE">Arguments: [ ${data_path}='/aai/util/echo?action=long' ]</msg>
<kw name="Disable Warnings" library="HTTPUtils">
<doc>Disable the cert warnings when creating sessions for A&amp;AI API Calls</doc>
<msg timestamp="20180810 14:20:20.043" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:20.044" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 14:20:20.044" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:20.044" starttime="20180810 14:20:20.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_AAI_USERNAME}</arg>
<arg>${GLOBAL_AAI_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:20.045" level="TRACE">Arguments: [ b'AAI' | b'AAI' ]</msg>
<msg timestamp="20180810 14:20:20.045" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:20.045" level="TRACE">Return: [b'AAI', b'AAI']</msg>
<msg timestamp="20180810 14:20:20.045" level="INFO">${auth} = ['AAI', 'AAI']</msg>
<status status="PASS" endtime="20180810 14:20:20.045" starttime="20180810 14:20:20.044"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>aai</arg>
<arg>${AAI_FRONTEND_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:20.046" level="TRACE">Arguments: [ 'aai' | 'https://192.168.61.18:8443' | auth=[b'AAI', b'AAI'] ]</msg>
<msg timestamp="20180810 14:20:20.046" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:20.046" level="INFO">Creating Session using : alias=aai, url=https://192.168.61.18:8443, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc43ffdd0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:20.046" level="DEBUG">Creating session: aai</msg>
<msg timestamp="20180810 14:20:20.046" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:20.047" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc8568250&gt;</msg>
<msg timestamp="20180810 14:20:20.047" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc8568250&gt;</msg>
<status status="PASS" endtime="20180810 14:20:20.047" starttime="20180810 14:20:20.045"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:20.048" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:20.048" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:20.048" level="TRACE">Return: UUID('93c98746-960f-4a34-b0a7-bf1811259aa9')</msg>
<msg timestamp="20180810 14:20:20.048" level="INFO">${uuid} = 93c98746-960f-4a34-b0a7-bf1811259aa9</msg>
<status status="PASS" endtime="20180810 14:20:20.048" starttime="20180810 14:20:20.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:20.048" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:20.050" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-93c98746-960f-4a34-b0a7-bf1811259aa9'}</msg>
<msg timestamp="20180810 14:20:20.050" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-93c98746-960f-4a34-b0a7-bf1811259aa9', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:20.051" starttime="20180810 14:20:20.048"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>aai</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:20.052" level="TRACE">Arguments: [ 'aai' | '/aai/util/echo?action=long' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-93c98746-960f-4a34-b0a7-bf1811259aa9'} ]</msg>
<msg timestamp="20180810 14:20:20.052" level="DEBUG">Test timeout 2 seconds active. 1.988 seconds left.</msg>
<msg timestamp="20180810 14:20:20.055" level="DEBUG">Starting new HTTPS connection (1): 192.168.61.18</msg>
<msg timestamp="20180810 14:20:20.081" level="DEBUG">https://192.168.61.18:8443 "GET /aai/util/echo?action=long HTTP/1.1" 200 252</msg>
<msg timestamp="20180810 14:20:20.082" level="INFO">Get Request using : alias=aai, uri=/aai/util/echo?action=long, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-93c98746-960f-4a34-b0a7-bf1811259aa9', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 14:20:20.083" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:20.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:20.083" starttime="20180810 14:20:20.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from aai ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:20.085" level="TRACE">Arguments: [ 'Received response from aai {"responseMessages":{"responseMessage":[{"messageId":"INF0001","text":"Success X-FromAppId=%1 X-TransactionId=%2 (msg=%3) (rc=%4)","variables":{"variable":["robot-ete","240d705a-c92e-4a6e-94d0-4121b65c365f","Successful health check:OK","0.0.0002"]}}]}}' ]</msg>
<msg timestamp="20180810 14:20:20.085" level="DEBUG">Test timeout 2 seconds active. 1.956 seconds left.</msg>
<msg timestamp="20180810 14:20:20.085" level="INFO">Received response from aai {"responseMessages":{"responseMessage":[{"messageId":"INF0001","text":"Success X-FromAppId=%1 X-TransactionId=%2 (msg=%3) (rc=%4)","variables":{"variable":["robot-ete","240d705a-c92e-4a6e-94d0-4121b65c365f","Successful health check:OK","0.0.0002"]}}]}}</msg>
<msg timestamp="20180810 14:20:20.085" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:20.085" starttime="20180810 14:20:20.084"></status>
</kw>
<msg timestamp="20180810 14:20:20.086" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:20.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:20.086" starttime="20180810 14:20:20.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:20.088" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:20.088" level="DEBUG">Test timeout 2 seconds active. 1.953 seconds left.</msg>
<msg timestamp="20180810 14:20:20.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:20.089" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:20.089" starttime="20180810 14:20:20.087"></status>
</kw>
<msg timestamp="20180810 14:20:20.089" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:20.089" starttime="20180810 14:20:20.042"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:20.090" critical="yes" starttime="20180810 14:20:20.041"></status>
</test>
<test id="s1-s1-s1-s1-t2" name="Basic AAF Health Check">
<kw name="Run AAF Health Check" library="aaf_interface">
<doc>Runs AAF Health check</doc>
<msg timestamp="20180810 14:20:20.093" level="TRACE">Arguments: [  ]</msg>
<kw name="Run AAF Get Request" library="aaf_interface">
<doc>Runs AAF Get request</doc>
<arguments>
<arg>${AAF_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:20.095" level="TRACE">Arguments: [ ${data_path}='/authz/perms/user/demo@people.osaaf.org' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_AAF_USERNAME}</arg>
<arg>${GLOBAL_AAF_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:20.096" level="TRACE">Arguments: [ b'demo@people.osaaf.org' | b'demo123456!' ]</msg>
<msg timestamp="20180810 14:20:20.096" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:20.096" level="TRACE">Return: [b'demo@people.osaaf.org', b'demo123456!']</msg>
<msg timestamp="20180810 14:20:20.096" level="INFO">${auth} = ['demo@people.osaaf.org', 'demo123456!']</msg>
<status status="PASS" endtime="20180810 14:20:20.096" starttime="20180810 14:20:20.095"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>aaf</arg>
<arg>${GLOBAL_AAF_SERVER}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:20.097" level="TRACE">Arguments: [ 'aaf' | b'https://aaf.api.simpledemo.onap.org:8100' | auth=[b'demo@people.osaaf.org', b'demo123456!'] ]</msg>
<msg timestamp="20180810 14:20:20.097" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:20.098" level="INFO">Creating Session using : alias=aaf, url=https://aaf.api.simpledemo.onap.org:8100, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc448b2d0&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:20.098" level="DEBUG">Creating session: aaf</msg>
<msg timestamp="20180810 14:20:20.098" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:20.098" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc5ba4650&gt;</msg>
<msg timestamp="20180810 14:20:20.098" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc5ba4650&gt;</msg>
<status status="PASS" endtime="20180810 14:20:20.098" starttime="20180810 14:20:20.097"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:20.099" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:20.099" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:20.099" level="TRACE">Return: UUID('c2d7a09e-4f61-4464-ae06-a2464047f25e')</msg>
<msg timestamp="20180810 14:20:20.099" level="INFO">${uuid} = c2d7a09e-4f61-4464-ae06-a2464047f25e</msg>
<status status="PASS" endtime="20180810 14:20:20.099" starttime="20180810 14:20:20.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:20.100" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:20.101" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-c2d7a09e-4f61-4464-ae06-a2464047f25e'}</msg>
<msg timestamp="20180810 14:20:20.101" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-c2d7a09e-4f61-4464-ae06-a2464047f25e', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:20.101" starttime="20180810 14:20:20.100"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>aaf</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:20.102" level="TRACE">Arguments: [ 'aaf' | '/authz/perms/user/demo@people.osaaf.org' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-c2d7a09e-4f61-4464-ae06-a2464047f25e'} ]</msg>
<msg timestamp="20180810 14:20:20.102" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 14:20:20.103" level="DEBUG">Starting new HTTPS connection (1): aaf.api.simpledemo.onap.org</msg>
<msg timestamp="20180810 14:20:25.111" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:25.111" starttime="20180810 14:20:20.102"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:25.112" starttime="20180810 14:20:20.094"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:25.112" starttime="20180810 14:20:20.093"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:25.113" critical="yes" starttime="20180810 14:20:20.091">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t3" name="Basic AAF SMS Health Check">
<kw name="Run SMS Health Check" library="sms_interface">
<doc>Runs SMS Health check</doc>
<msg timestamp="20180810 14:20:25.119" level="TRACE">Arguments: [  ]</msg>
<kw name="Run SMS Get Request" library="sms_interface">
<doc>Runs SMS Get request</doc>
<arguments>
<arg>${SMS_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:25.120" level="TRACE">Arguments: [ ${data_path}='/v1/sms/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>smssession</arg>
<arg>${SMS_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:25.121" level="TRACE">Arguments: [ 'smssession' | 'https://aaf-sms.api.simpledemo.onap.org:10443' ]</msg>
<msg timestamp="20180810 14:20:25.121" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:25.122" level="INFO">Creating Session using : alias=smssession, url=https://aaf-sms.api.simpledemo.onap.org:10443, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:25.122" level="DEBUG">Creating session: smssession</msg>
<msg timestamp="20180810 14:20:25.122" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:25.122" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc4317ed0&gt;</msg>
<msg timestamp="20180810 14:20:25.123" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc4317ed0&gt;</msg>
<status status="PASS" endtime="20180810 14:20:25.123" starttime="20180810 14:20:25.121"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>smssession</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:25.123" level="TRACE">Arguments: [ 'smssession' | '/v1/sms/healthcheck' ]</msg>
<msg timestamp="20180810 14:20:25.124" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:25.125" level="DEBUG">Starting new HTTPS connection (1): aaf-sms.api.simpledemo.onap.org</msg>
<msg timestamp="20180810 14:20:30.136" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:30.136" starttime="20180810 14:20:25.123"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:30.137" starttime="20180810 14:20:25.120"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:30.137" starttime="20180810 14:20:25.118"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:30.138" critical="yes" starttime="20180810 14:20:25.115">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t4" name="Basic APPC Health Check">
<kw name="Run APPC Health Check" library="appc_interface">
<doc>Runs an APPC healthcheck</doc>
<msg timestamp="20180810 14:20:30.143" level="TRACE">Arguments: [  ]</msg>
<kw name="Run APPC Post Request" library="appc_interface">
<doc>Runs an APPC post request</doc>
<arguments>
<arg>${APPC_INDEX PATH}${APPC_HEALTHCHECK_OPERATION_PATH}</arg>
<arg>${None}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:30.145" level="TRACE">Arguments: [ ${data_path}='/restconf/operations/SLI-API:healthcheck' | ${data}=None | ${content}='json' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_APPC_USERNAME}</arg>
<arg>${GLOBAL_APPC_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:30.146" level="TRACE">Arguments: [ b'admin' | b'admin' ]</msg>
<msg timestamp="20180810 14:20:30.147" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:30.147" level="TRACE">Return: [b'admin', b'admin']</msg>
<msg timestamp="20180810 14:20:30.147" level="INFO">${auth} = ['admin', 'admin']</msg>
<status status="PASS" endtime="20180810 14:20:30.147" starttime="20180810 14:20:30.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${APPC_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 14:20:30.148" level="TRACE">Arguments: [ 'Creating session http://192.168.61.15:8282' ]</msg>
<msg timestamp="20180810 14:20:30.148" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:30.148" level="INFO">Creating session http://192.168.61.15:8282</msg>
<msg timestamp="20180810 14:20:30.148" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:30.148" starttime="20180810 14:20:30.147"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>appc</arg>
<arg>${APPC_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:30.149" level="TRACE">Arguments: [ 'appc' | 'http://192.168.61.15:8282' | auth=[b'admin', b'admin'] ]</msg>
<msg timestamp="20180810 14:20:30.149" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 14:20:30.150" level="INFO">Creating Session using : alias=appc, url=http://192.168.61.15:8282, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc426a350&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:30.150" level="DEBUG">Creating session: appc</msg>
<msg timestamp="20180810 14:20:30.150" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:30.150" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc8568290&gt;</msg>
<msg timestamp="20180810 14:20:30.150" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc8568290&gt;</msg>
<status status="PASS" endtime="20180810 14:20:30.150" starttime="20180810 14:20:30.149"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:30.151" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:30.151" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 14:20:30.151" level="TRACE">Return: UUID('8dc5c7b8-6645-4aae-8be3-66040df753f7')</msg>
<msg timestamp="20180810 14:20:30.151" level="INFO">${uuid} = 8dc5c7b8-6645-4aae-8be3-66040df753f7</msg>
<status status="PASS" endtime="20180810 14:20:30.151" starttime="20180810 14:20:30.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/${content}</arg>
<arg>Content-Type=application/${content}</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:30.152" level="TRACE">Arguments: [ 'Accept=application/${content}' | 'Content-Type=application/${content}' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:30.152" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-8dc5c7b8-6645-4aae-8be3-66040df753f7'}</msg>
<msg timestamp="20180810 14:20:30.153" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-8dc5c7b8-6645-4aae-8be3-66040df753f7', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:30.153" starttime="20180810 14:20:30.151"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>appc</arg>
<arg>${data_path}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:30.153" level="TRACE">Arguments: [ 'appc' | '/restconf/operations/SLI-API:healthcheck' | data=None | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-8dc5c7b8-6645-4aae-8be3-66040df753f7'} ]</msg>
<msg timestamp="20180810 14:20:30.153" level="DEBUG">Test timeout 2 seconds active. 1.987 seconds left.</msg>
<msg timestamp="20180810 14:20:30.155" level="DEBUG">Starting new HTTP connection (1): 192.168.61.15</msg>
<msg timestamp="20180810 14:20:30.212" level="DEBUG">http://192.168.61.15:8282 "POST /restconf/operations/SLI-API:healthcheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 14:20:30.214" level="DEBUG">post response: {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 14:20:30.215" level="INFO">Post Request using : alias=appc, uri=/restconf/operations/SLI-API:healthcheck, data=None,                     headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-8dc5c7b8-6645-4aae-8be3-66040df753f7', u'X-FromAppId': u'robot-ete'}, files=None, allow_redirects=True </msg>
<msg timestamp="20180810 14:20:30.215" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:30.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:30.215" starttime="20180810 14:20:30.153"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from appc ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:30.217" level="TRACE">Arguments: [ 'Received response from appc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}' ]</msg>
<msg timestamp="20180810 14:20:30.217" level="DEBUG">Test timeout 2 seconds active. 1.923 seconds left.</msg>
<msg timestamp="20180810 14:20:30.217" level="INFO">Received response from appc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 14:20:30.217" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:30.218" starttime="20180810 14:20:30.216"></status>
</kw>
<msg timestamp="20180810 14:20:30.218" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:30.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:30.218" starttime="20180810 14:20:30.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:30.220" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:30.220" level="DEBUG">Test timeout 2 seconds active. 1.92 seconds left.</msg>
<msg timestamp="20180810 14:20:30.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:30.220" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:30.220" starttime="20180810 14:20:30.219"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['output']['response-code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:30.222" level="TRACE">Arguments: [ '200' | '200' ]</msg>
<msg timestamp="20180810 14:20:30.222" level="DEBUG">Test timeout 2 seconds active. 1.918 seconds left.</msg>
<msg timestamp="20180810 14:20:30.222" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:30.222" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:30.223" starttime="20180810 14:20:30.221"></status>
</kw>
<msg timestamp="20180810 14:20:30.223" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:30.223" starttime="20180810 14:20:30.142"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:30.223" critical="yes" starttime="20180810 14:20:30.140"></status>
</test>
<test id="s1-s1-s1-s1-t5" name="Basic CLI Health Check">
<kw name="Run CLI Health Check" library="cli_interface">
<doc>Runs CLI Health check</doc>
<msg timestamp="20180810 14:20:30.226" level="TRACE">Arguments: [  ]</msg>
<kw name="Run CLI Get Request" library="cli_interface">
<doc>Runs CLI Get request</doc>
<arguments>
<arg>${CLI_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:30.227" level="TRACE">Arguments: [ ${data_path}='/' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>cli</arg>
<arg>${CLI_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:30.228" level="TRACE">Arguments: [ 'cli' | 'http://10.0.9.1:8080' ]</msg>
<msg timestamp="20180810 14:20:30.228" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 14:20:30.228" level="INFO">Creating Session using : alias=cli, url=http://10.0.9.1:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:30.228" level="DEBUG">Creating session: cli</msg>
<msg timestamp="20180810 14:20:30.229" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:30.229" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc4439c10&gt;</msg>
<msg timestamp="20180810 14:20:30.229" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc4439c10&gt;</msg>
<status status="PASS" endtime="20180810 14:20:30.229" starttime="20180810 14:20:30.228"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>cli</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:30.230" level="TRACE">Arguments: [ 'cli' | '/' ]</msg>
<msg timestamp="20180810 14:20:30.230" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:30.231" level="DEBUG">Starting new HTTP connection (1): 10.0.9.1</msg>
<msg timestamp="20180810 14:20:32.227" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:32.227" starttime="20180810 14:20:30.230"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:32.227" starttime="20180810 14:20:30.227"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:32.228" starttime="20180810 14:20:30.226"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:32.228" critical="yes" starttime="20180810 14:20:30.225">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t6" name="Basic CLAMP Health Check">
<kw name="Run CLAMP Health Check" library="clamp_interface">
<doc>Runs CLAMP Health check</doc>
<msg timestamp="20180810 14:20:32.233" level="TRACE">Arguments: [  ]</msg>
<kw name="Run CLAMP Get Request" library="clamp_interface">
<doc>Runs CLAMP Get request</doc>
<arguments>
<arg>${CLAMP_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:32.234" level="TRACE">Arguments: [ ${data_path}='/restservices/clds/v1/clds/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${CLAMP_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:32.235" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.21:8080' ]</msg>
<msg timestamp="20180810 14:20:32.235" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:32.235" level="INFO">Creating Session using : alias=session, url=http://192.168.61.21:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:32.235" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 14:20:32.236" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:32.236" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc42b9210&gt;</msg>
<msg timestamp="20180810 14:20:32.236" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc42b9210&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.236" starttime="20180810 14:20:32.234"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:32.237" level="TRACE">Arguments: [ 'session' | '/restservices/clds/v1/clds/healthcheck' ]</msg>
<msg timestamp="20180810 14:20:32.237" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:32.239" level="DEBUG">Starting new HTTP connection (1): 192.168.61.21</msg>
<msg timestamp="20180810 14:20:32.313" level="DEBUG">http://192.168.61.21:8080 "GET /restservices/clds/v1/clds/healthcheck HTTP/1.1" 200 79</msg>
<msg timestamp="20180810 14:20:32.315" level="INFO">Get Request using : alias=session, uri=/restservices/clds/v1/clds/healthcheck, headers=None </msg>
<msg timestamp="20180810 14:20:32.315" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:32.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.315" starttime="20180810 14:20:32.237"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:32.317" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:32.317" level="DEBUG">Test timeout 2 seconds active. 1.913 seconds left.</msg>
<msg timestamp="20180810 14:20:32.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:32.318" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.318" starttime="20180810 14:20:32.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from CLAMP ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:32.319" level="TRACE">Arguments: [ 'Received response from CLAMP {"healthCheckComponent":"CLDS-APP","healthCheckStatus":"UP","description":"OK"}' ]</msg>
<msg timestamp="20180810 14:20:32.320" level="DEBUG">Test timeout 2 seconds active. 1.911 seconds left.</msg>
<msg timestamp="20180810 14:20:32.320" level="INFO">Received response from CLAMP {"healthCheckComponent":"CLDS-APP","healthCheckStatus":"UP","description":"OK"}</msg>
<msg timestamp="20180810 14:20:32.320" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.320" starttime="20180810 14:20:32.319"></status>
</kw>
<msg timestamp="20180810 14:20:32.321" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:32.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.321" starttime="20180810 14:20:32.233"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:32.322" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:32.322" level="DEBUG">Test timeout 2 seconds active. 1.908 seconds left.</msg>
<msg timestamp="20180810 14:20:32.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:32.322" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.323" starttime="20180810 14:20:32.322"></status>
</kw>
<msg timestamp="20180810 14:20:32.323" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.323" starttime="20180810 14:20:32.232"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:32.323" critical="yes" starttime="20180810 14:20:32.230"></status>
</test>
<test id="s1-s1-s1-s1-t7" name="Basic DCAE Health Check">
<kw name="Run DCAE Health Check" library="dcae_interface">
<doc>Runs a DCAE health check</doc>
<msg timestamp="20180810 14:20:32.326" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_DCAE_USERNAME}</arg>
<arg>${GLOBAL_DCAE_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:32.326" level="TRACE">Arguments: [ b'console' | b'ZjJkYjllMjljMTI2M2Iz' ]</msg>
<msg timestamp="20180810 14:20:32.327" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 14:20:32.327" level="TRACE">Return: [b'console', b'ZjJkYjllMjljMTI2M2Iz']</msg>
<msg timestamp="20180810 14:20:32.327" level="INFO">${auth} = ['console', 'ZjJkYjllMjljMTI2M2Iz']</msg>
<status status="PASS" endtime="20180810 14:20:32.327" starttime="20180810 14:20:32.326"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${DCAE_HEALTH_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 14:20:32.328" level="TRACE">Arguments: [ 'Creating session http://192.168.61.31:8000' ]</msg>
<msg timestamp="20180810 14:20:32.328" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:32.328" level="INFO">Creating session http://192.168.61.31:8000</msg>
<msg timestamp="20180810 14:20:32.328" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.328" starttime="20180810 14:20:32.327"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>dcae</arg>
<arg>${DCAE_HEALTH_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:32.329" level="TRACE">Arguments: [ 'dcae' | 'http://192.168.61.31:8000' | auth=[b'console', b'ZjJkYjllMjljMTI2M2Iz'] ]</msg>
<msg timestamp="20180810 14:20:32.329" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:32.329" level="INFO">Creating Session using : alias=dcae, url=http://192.168.61.31:8000, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc42cfe50&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:32.330" level="DEBUG">Creating session: dcae</msg>
<msg timestamp="20180810 14:20:32.330" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:32.330" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc42cff10&gt;</msg>
<msg timestamp="20180810 14:20:32.330" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc42cff10&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.330" starttime="20180810 14:20:32.329"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:32.331" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:32.331" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:32.331" level="TRACE">Return: UUID('a20d206b-f48f-426f-810d-6f16cc1c4d74')</msg>
<msg timestamp="20180810 14:20:32.331" level="INFO">${uuid} = a20d206b-f48f-426f-810d-6f16cc1c4d74</msg>
<status status="PASS" endtime="20180810 14:20:32.332" starttime="20180810 14:20:32.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>X-ECOMP-Client-Version=ONAP-R2</arg>
<arg>action=getTable</arg>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:32.332" level="TRACE">Arguments: [ 'X-ECOMP-Client-Version=ONAP-R2' | 'action=getTable' | 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:32.333" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-ECOMP-Client-Version': 'ONAP-R2', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-a20d206b-f48f-426f-810d-6f16cc1c4d74', 'action': 'getTable'}</msg>
<msg timestamp="20180810 14:20:32.334" level="INFO">${headers} = {u'X-ECOMP-Client-Version': u'ONAP-R2', u'action': u'getTable', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-a20d206b-f48f-426f-810d-6f16cc1c4d...</msg>
<status status="PASS" endtime="20180810 14:20:32.334" starttime="20180810 14:20:32.332"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>dcae</arg>
<arg>${DCAE_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:32.334" level="TRACE">Arguments: [ 'dcae' | '/healthcheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-ECOMP-Client-Version': 'ONAP-R2', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-a20d206b-f48f-426f-810d-6f16cc1c4d74', 'action': 'getTable'} ]</msg>
<msg timestamp="20180810 14:20:32.334" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 14:20:32.336" level="DEBUG">Starting new HTTP connection (1): 192.168.61.31</msg>
<msg timestamp="20180810 14:20:32.341" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=2, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180810 14:20:32.341" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42cf890&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 14:20:32.341" level="DEBUG">Starting new HTTP connection (2): 192.168.61.31</msg>
<msg timestamp="20180810 14:20:32.344" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=1, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180810 14:20:32.544" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42cf990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 14:20:32.545" level="DEBUG">Starting new HTTP connection (3): 192.168.61.31</msg>
<msg timestamp="20180810 14:20:32.548" level="DEBUG">Incremented Retry for (url='/healthcheck'): Retry(total=0, connect=None, read=None, redirect=None, status=None)</msg>
<msg timestamp="20180810 14:20:32.949" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42cafd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 14:20:32.950" level="DEBUG">Starting new HTTP connection (4): 192.168.61.31</msg>
<msg timestamp="20180810 14:20:32.955" level="FAIL">ConnectionError: HTTPConnectionPool(host='192.168.61.31', port=8000): Max retries exceeded with url: /healthcheck (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42c2ad0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<msg timestamp="20180810 14:20:32.955" level="DEBUG">Traceback (most recent call last):
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/library/RequestsLibrary/RequestsKeywords.py", line 338, in get_request
    session, uri, params, headers, redir, timeout)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/library/RequestsLibrary/RequestsKeywords.py", line 842, in _get_request
    cookies=self.cookies)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/library/requests/sessions.py", line 521, in get
    return self.request('GET', url, **kwargs)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/library/requests/sessions.py", line 508, in request
    resp = self.send(prep, **send_kwargs)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/library/requests/sessions.py", line 618, in send
    r = adapter.send(request, **kwargs)
  File "/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/library/requests/adapters.py", line 508, in send
    raise ConnectionError(e, request=request)</msg>
<status status="FAIL" endtime="20180810 14:20:32.955" starttime="20180810 14:20:32.334"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:32.956" starttime="20180810 14:20:32.325"></status>
</kw>
<tags>
<tag>dcae</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:32.956" critical="yes" starttime="20180810 14:20:32.324">ConnectionError: HTTPConnectionPool(host='192.168.61.31', port=8000): Max retries exceeded with url: /healthcheck (Caused by NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42c2ad0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</status>
</test>
<test id="s1-s1-s1-s1-t8" name="Basic DMAAP Message Router Health Check">
<kw name="Run MR Health Check" library="mr_interface">
<doc>Runs MR Health check</doc>
<msg timestamp="20180810 14:20:32.960" level="TRACE">Arguments: [  ]</msg>
<kw name="Run MR Get Request" library="mr_interface">
<doc>Runs MR Get request</doc>
<arguments>
<arg>${MR_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:32.961" level="TRACE">Arguments: [ ${data_path}='/topics' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>mr</arg>
<arg>${MR_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:32.962" level="TRACE">Arguments: [ 'mr' | 'http://192.168.61.17:3904' ]</msg>
<msg timestamp="20180810 14:20:32.962" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:32.962" level="INFO">Creating Session using : alias=mr, url=http://192.168.61.17:3904, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:32.963" level="DEBUG">Creating session: mr</msg>
<msg timestamp="20180810 14:20:32.963" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:32.963" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc42d9b10&gt;</msg>
<msg timestamp="20180810 14:20:32.963" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc42d9b10&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.963" starttime="20180810 14:20:32.962"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:32.964" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:32.964" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:32.964" level="TRACE">Return: UUID('554b0e4f-09cf-4843-92d8-334b9471c7a6')</msg>
<msg timestamp="20180810 14:20:32.965" level="INFO">${uuid} = 554b0e4f-09cf-4843-92d8-334b9471c7a6</msg>
<status status="PASS" endtime="20180810 14:20:32.965" starttime="20180810 14:20:32.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:32.965" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:32.966" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-554b0e4f-09cf-4843-92d8-334b9471c7a6'}</msg>
<msg timestamp="20180810 14:20:32.966" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-554b0e4f-09cf-4843-92d8-334b9471c7a6', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:32.966" starttime="20180810 14:20:32.965"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>mr</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:32.967" level="TRACE">Arguments: [ 'mr' | '/topics' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-554b0e4f-09cf-4843-92d8-334b9471c7a6'} ]</msg>
<msg timestamp="20180810 14:20:32.967" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 14:20:32.969" level="DEBUG">Starting new HTTP connection (1): 192.168.61.17</msg>
<msg timestamp="20180810 14:20:32.991" level="DEBUG">http://192.168.61.17:3904 "GET /topics HTTP/1.1" 200 739</msg>
<msg timestamp="20180810 14:20:32.992" level="INFO">Get Request using : alias=mr, uri=/topics, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-554b0e4f-09cf-4843-92d8-334b9471c7a6', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 14:20:32.992" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:32.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.992" starttime="20180810 14:20:32.967"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from message router ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:32.994" level="TRACE">Arguments: [ 'Received response from message router {"topics": [\n    "ECOMP-PORTAL-OUTBOX-APP1",\n    "unauthenticated.MEASUREMENT_OSAM_OUTPUT",\n    "ECOMP-PORTAL-OUTBOX-POL1",\n    "SDC-DISTR-STATUS-TOPIC-AUTO",\n    "msgrtr.apinode.metrics.dmaap",\n    "APPC-CL",\n    "PDPD-CONFIGURATION",\n    "POLICY-CL-MGT",\n    "SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1",\n    "SDC-DISTR-NOTIF-TOPIC-AUTO",\n    "unauthenticated.SEC_MEASUREMENT_OUTPUT",\n    "SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1",\n    "AAI-EVENT",\n    "ECOMP-PORTAL-OUTBOX-VID1",\n    "ECOMP-PORTAL-INBOX",\n    "ECOMP-PORTAL-OUTBOX-SDC1",\n    "POOLING",\n    "unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT",\n    "unauthenticated.TCA_EVENT_OUTPUT",\n    "DCAE-CL-EVENT",\n    "APPC-TEST2",\n    "APPC-TEST1",\n    "ECOMP-PORTAL-OUTBOX-DBC1"\n]}' ]</msg>
<msg timestamp="20180810 14:20:32.994" level="DEBUG">Test timeout 2 seconds active. 1.964 seconds left.</msg>
<msg timestamp="20180810 14:20:32.994" level="INFO">Received response from message router {"topics": [
    "ECOMP-PORTAL-OUTBOX-APP1",
    "unauthenticated.MEASUREMENT_OSAM_OUTPUT",
    "ECOMP-PORTAL-OUTBOX-POL1",
    "SDC-DISTR-STATUS-TOPIC-AUTO",
    "msgrtr.apinode.metrics.dmaap",
    "APPC-CL",
    "PDPD-CONFIGURATION",
    "POLICY-CL-MGT",
    "SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1",
    "SDC-DISTR-NOTIF-TOPIC-AUTO",
    "unauthenticated.SEC_MEASUREMENT_OUTPUT",
    "SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1",
    "AAI-EVENT",
    "ECOMP-PORTAL-OUTBOX-VID1",
    "ECOMP-PORTAL-INBOX",
    "ECOMP-PORTAL-OUTBOX-SDC1",
    "POOLING",
    "unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT",
    "unauthenticated.TCA_EVENT_OUTPUT",
    "DCAE-CL-EVENT",
    "APPC-TEST2",
    "APPC-TEST1",
    "ECOMP-PORTAL-OUTBOX-DBC1"
]}</msg>
<msg timestamp="20180810 14:20:32.994" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.995" starttime="20180810 14:20:32.993"></status>
</kw>
<msg timestamp="20180810 14:20:32.995" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:32.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:32.995" starttime="20180810 14:20:32.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:32.996" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:32.997" level="DEBUG">Test timeout 2 seconds active. 1.961 seconds left.</msg>
<msg timestamp="20180810 14:20:32.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:32.997" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:32.997" starttime="20180810 14:20:32.996"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp.json()}</arg>
<arg>topics</arg>
</arguments>
<msg timestamp="20180810 14:20:32.998" level="TRACE">Arguments: [ {'topics': ['ECOMP-PORTAL-OUTBOX-APP1',
            'unauthenticated.MEASUREMENT_OSAM_OUTPUT',
            'ECOMP-PORTAL-OUTBOX-POL1',
            'SDC-DISTR-STATUS-TOPIC-AUTO',
            'msgrtr.apinode.metrics.dmaap',
            'APPC-CL',
            'PDPD-CONFIGURATION',
            'POLICY-CL-MGT',
            'SDC-DISTR-NOTIF-TOPIC-SDC-OPENSOURCE-ENV1',
            'SDC-DISTR-NOTIF-TOPIC-AUTO',
            'unauthenticated.SEC_MEASUREMENT_OUTPUT',
            'SDC-DISTR-STATUS-TOPIC-SDC-OPENSOURCE-ENV1',
            'AAI-EVENT',
            'ECOMP-PORTAL-OUTBOX-VID1',
            'ECOMP-PORTAL-INBOX',
            'ECOMP-PORTAL-OUTBOX-SDC1',
            'POOLING',
            'unauthenticated.VES_MEASUREMENT_OSAM_OUTPUT',
            'unauthenticated.TCA_EVENT_OUTPUT',
            'DCAE-CL-EVENT',
            'APPC-TEST2',
            'APPC-TEST1',
            'ECOMP-PORTAL-OUTBOX-DBC1']} | 'topics' ]</msg>
<msg timestamp="20180810 14:20:32.999" level="DEBUG">Test timeout 2 seconds active. 1.959 seconds left.</msg>
<msg timestamp="20180810 14:20:32.999" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.000" starttime="20180810 14:20:32.998"></status>
</kw>
<msg timestamp="20180810 14:20:33.000" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.000" starttime="20180810 14:20:32.960"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:33.000" critical="yes" starttime="20180810 14:20:32.957"></status>
</test>
<test id="s1-s1-s1-s1-t9" name="Basic External API NBI Health Check">
<kw name="Run NBI Health Check" library="nbi_interface">
<doc>Runs NBI Health check</doc>
<msg timestamp="20180810 14:20:33.004" level="TRACE">Arguments: [  ]</msg>
<kw name="Run NBI Get Request" library="nbi_interface">
<doc>Runs NBI Get request</doc>
<arguments>
<arg>${NBI_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:33.005" level="TRACE">Arguments: [ ${data_path}='/nbi/api/v1/status' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${NBI_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:33.006" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.19:8080' ]</msg>
<msg timestamp="20180810 14:20:33.006" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:33.006" level="INFO">Creating Session using : alias=session, url=http://192.168.61.19:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:33.006" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 14:20:33.007" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:33.007" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3837750&gt;</msg>
<msg timestamp="20180810 14:20:33.007" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3837750&gt;</msg>
<status status="PASS" endtime="20180810 14:20:33.007" starttime="20180810 14:20:33.006"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:33.008" level="TRACE">Arguments: [ 'session' | '/nbi/api/v1/status' ]</msg>
<msg timestamp="20180810 14:20:33.008" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:33.009" level="DEBUG">Starting new HTTP connection (1): 192.168.61.19</msg>
<msg timestamp="20180810 14:20:33.039" level="DEBUG">http://192.168.61.19:8080 "GET /nbi/api/v1/status HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 14:20:33.040" level="INFO">Get Request using : alias=session, uri=/nbi/api/v1/status, headers=None </msg>
<msg timestamp="20180810 14:20:33.040" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:33.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:33.040" starttime="20180810 14:20:33.008"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:33.041" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:33.041" level="DEBUG">Test timeout 2 seconds active. 1.961 seconds left.</msg>
<msg timestamp="20180810 14:20:33.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:33.041" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.042" starttime="20180810 14:20:33.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from NBI ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:33.042" level="TRACE">Arguments: [ 'Received response from NBI {"name":"nbi","status":"ok","version":"v1"}' ]</msg>
<msg timestamp="20180810 14:20:33.043" level="DEBUG">Test timeout 2 seconds active. 1.959 seconds left.</msg>
<msg timestamp="20180810 14:20:33.043" level="INFO">Received response from NBI {"name":"nbi","status":"ok","version":"v1"}</msg>
<msg timestamp="20180810 14:20:33.043" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.043" starttime="20180810 14:20:33.042"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20180810 14:20:33.044" level="TRACE">Arguments: [ {'name': 'nbi', 'status': 'ok', 'version': 'v1'} ]</msg>
<msg timestamp="20180810 14:20:33.044" level="DEBUG">Test timeout 2 seconds active. 1.958 seconds left.</msg>
<msg timestamp="20180810 14:20:33.044" level="TRACE">Return: {'name': 'nbi', 'status': 'ok', 'version': 'v1'}</msg>
<msg timestamp="20180810 14:20:33.044" level="INFO">${json} = {u'status': u'ok', u'version': u'v1', u'name': u'nbi'}</msg>
<status status="PASS" endtime="20180810 14:20:33.044" starttime="20180810 14:20:33.043"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${json}</arg>
<arg>status</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20180810 14:20:33.045" level="TRACE">Arguments: [ {'name': 'nbi', 'status': 'ok', 'version': 'v1'} | 'status' ]</msg>
<msg timestamp="20180810 14:20:33.045" level="DEBUG">Test timeout 2 seconds active. 1.957 seconds left.</msg>
<msg timestamp="20180810 14:20:33.045" level="TRACE">Return: 'ok'</msg>
<msg timestamp="20180810 14:20:33.045" level="INFO">${status} = ok</msg>
<status status="PASS" endtime="20180810 14:20:33.045" starttime="20180810 14:20:33.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>ok</arg>
</arguments>
<msg timestamp="20180810 14:20:33.046" level="TRACE">Arguments: [ 'ok' | 'ok' ]</msg>
<msg timestamp="20180810 14:20:33.046" level="DEBUG">Test timeout 2 seconds active. 1.956 seconds left.</msg>
<msg timestamp="20180810 14:20:33.046" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:33.046" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.046" starttime="20180810 14:20:33.046"></status>
</kw>
<msg timestamp="20180810 14:20:33.047" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:33.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:33.047" starttime="20180810 14:20:33.005"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:33.048" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:33.048" level="DEBUG">Test timeout 2 seconds active. 1.954 seconds left.</msg>
<msg timestamp="20180810 14:20:33.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:33.049" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.049" starttime="20180810 14:20:33.048"></status>
</kw>
<msg timestamp="20180810 14:20:33.049" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:33.049" starttime="20180810 14:20:33.004"></status>
</kw>
<tags>
<tag>api</tag>
<tag>externalapi</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:33.050" critical="yes" starttime="20180810 14:20:33.002"></status>
</test>
<test id="s1-s1-s1-s1-t10" name="Basic Microservice Bus Health Check">
<kw name="Run MSB Health Check" library="msb_interface">
<doc>Runs MSB Health check</doc>
<msg timestamp="20180810 14:20:33.054" level="TRACE">Arguments: [  ]</msg>
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>${MSB_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:33.056" level="TRACE">Arguments: [ ${data_path}='/iui/microservices/default.html' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:33.057" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:33.057" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:33.058" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:33.058" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:33.058" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:33.058" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc42e1950&gt;</msg>
<msg timestamp="20180810 14:20:33.059" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc42e1950&gt;</msg>
<status status="PASS" endtime="20180810 14:20:33.059" starttime="20180810 14:20:33.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:33.060" level="TRACE">Arguments: [ 'msb' | '/iui/microservices/default.html' ]</msg>
<msg timestamp="20180810 14:20:33.060" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:33.062" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:35.053" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:35.053" starttime="20180810 14:20:33.059"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:35.054" starttime="20180810 14:20:33.055"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:35.054" starttime="20180810 14:20:33.054"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:35.054" critical="yes" starttime="20180810 14:20:33.051">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t11" name="Basic Multicloud API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:35.059" level="TRACE">Arguments: [ ${data_path}='/api/multicloud/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:35.061" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:35.061" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:35.061" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:35.061" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:35.062" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:35.062" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3843e50&gt;</msg>
<msg timestamp="20180810 14:20:35.063" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3843e50&gt;</msg>
<status status="PASS" endtime="20180810 14:20:35.063" starttime="20180810 14:20:35.060"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:35.064" level="TRACE">Arguments: [ 'msb' | '/api/multicloud/v0/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:35.064" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:35.066" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:37.058" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:37.058" starttime="20180810 14:20:35.063"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:37.059" starttime="20180810 14:20:35.058"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:37.059" critical="yes" starttime="20180810 14:20:35.056">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t12" name="Basic Multicloud-ocata API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-ocata/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:37.063" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-ocata/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:37.065" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:37.065" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:37.065" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:37.065" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:37.066" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:37.066" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3850d10&gt;</msg>
<msg timestamp="20180810 14:20:37.066" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3850d10&gt;</msg>
<status status="PASS" endtime="20180810 14:20:37.066" starttime="20180810 14:20:37.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:37.067" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-ocata/v0/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:37.067" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:37.069" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:39.062" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:39.062" starttime="20180810 14:20:37.067"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:39.063" starttime="20180810 14:20:37.063"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:39.063" critical="yes" starttime="20180810 14:20:37.061">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t13" name="Basic Multicloud-titanium_cloud API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-titanium_cloud/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:39.069" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-titanium_cloud/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:39.071" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:39.071" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:39.071" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:39.072" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:39.072" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:39.073" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3837d50&gt;</msg>
<msg timestamp="20180810 14:20:39.073" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3837d50&gt;</msg>
<status status="PASS" endtime="20180810 14:20:39.073" starttime="20180810 14:20:39.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:39.074" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-titanium_cloud/v0/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:39.074" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 14:20:39.075" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:41.066" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:41.066" starttime="20180810 14:20:39.074"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:41.067" starttime="20180810 14:20:39.068"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:41.067" critical="yes" starttime="20180810 14:20:39.065">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t14" name="Basic Multicloud-vio API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multicloud-vio/v0/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:41.072" level="TRACE">Arguments: [ ${data_path}='/api/multicloud-vio/v0/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:41.074" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:41.074" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:41.074" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:41.074" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:41.075" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:41.075" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc385b210&gt;</msg>
<msg timestamp="20180810 14:20:41.076" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc385b210&gt;</msg>
<status status="PASS" endtime="20180810 14:20:41.076" starttime="20180810 14:20:41.073"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:41.077" level="TRACE">Arguments: [ 'msb' | '/api/multicloud-vio/v0/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:41.077" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:41.078" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:43.070" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:43.070" starttime="20180810 14:20:41.077"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:43.071" starttime="20180810 14:20:41.071"></status>
</kw>
<tags>
<tag>health</tag>
<tag>multicloud</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:43.071" critical="yes" starttime="20180810 14:20:41.069">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t15" name="Basic OOF-Homing Health Check">
<kw name="Run OOF-Homing Health Check" library="oof_interface">
<doc>Runs OOF-Homing Health check</doc>
<msg timestamp="20180810 14:20:43.076" level="TRACE">Arguments: [  ]</msg>
<kw name="Run OOF-Homing Get Request" library="oof_interface">
<doc>Runs OOF-Homing Get request</doc>
<arguments>
<arg>${OOF_HOMING_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:43.078" level="TRACE">Arguments: [ ${data_path}='/v1/plans/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${OOF_HOMING_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:43.080" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.23:8091' ]</msg>
<msg timestamp="20180810 14:20:43.080" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:43.080" level="INFO">Creating Session using : alias=session, url=http://192.168.61.23:8091, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:43.081" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 14:20:43.081" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:43.081" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3864290&gt;</msg>
<msg timestamp="20180810 14:20:43.081" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3864290&gt;</msg>
<status status="PASS" endtime="20180810 14:20:43.082" starttime="20180810 14:20:43.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:43.082" level="TRACE">Arguments: [ 'session' | '/v1/plans/healthcheck' ]</msg>
<msg timestamp="20180810 14:20:43.082" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 14:20:43.083" level="DEBUG">Starting new HTTP connection (1): 192.168.61.23</msg>
<msg timestamp="20180810 14:20:45.074" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:45.074" starttime="20180810 14:20:43.082"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:45.075" starttime="20180810 14:20:43.077"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:45.076" starttime="20180810 14:20:43.075"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:45.076" critical="yes" starttime="20180810 14:20:43.073">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t16" name="Basic OOF-SNIRO Health Check">
<kw name="Run OOF-SNIRO Health Check" library="oof_interface">
<doc>Runs OOF-SNIRO Health check</doc>
<msg timestamp="20180810 14:20:45.080" level="TRACE">Arguments: [  ]</msg>
<kw name="Run OOF-SNIRO Get Request" library="oof_interface">
<doc>Runs OOF-SNIRO Get request</doc>
<arguments>
<arg>${OOF_SNIRO_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:45.081" level="TRACE">Arguments: [ ${data_path}='/api/oof/v1/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>session</arg>
<arg>${OOF_SNIRO_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:45.083" level="TRACE">Arguments: [ 'session' | 'http://192.168.61.23:8698' ]</msg>
<msg timestamp="20180810 14:20:45.083" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:45.083" level="INFO">Creating Session using : alias=session, url=http://192.168.61.23:8698, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:45.083" level="DEBUG">Creating session: session</msg>
<msg timestamp="20180810 14:20:45.084" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:45.084" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc38a9f90&gt;</msg>
<msg timestamp="20180810 14:20:45.084" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc38a9f90&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.084" starttime="20180810 14:20:45.082"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>session</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:45.085" level="TRACE">Arguments: [ 'session' | '/api/oof/v1/healthcheck' ]</msg>
<msg timestamp="20180810 14:20:45.086" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:45.087" level="DEBUG">Starting new HTTP connection (1): 192.168.61.23</msg>
<msg timestamp="20180810 14:20:45.103" level="DEBUG">http://192.168.61.23:8698 "GET /api/oof/v1/healthcheck HTTP/1.1" 200 2</msg>
<msg timestamp="20180810 14:20:45.104" level="INFO">Get Request using : alias=session, uri=/api/oof/v1/healthcheck, headers=None </msg>
<msg timestamp="20180810 14:20:45.105" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:45.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.105" starttime="20180810 14:20:45.085"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.107" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.107" level="DEBUG">Test timeout 2 seconds active. 1.971 seconds left.</msg>
<msg timestamp="20180810 14:20:45.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.108" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.108" starttime="20180810 14:20:45.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from OOF-SNIRO ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.109" level="TRACE">Arguments: [ 'Received response from OOF-SNIRO OK' ]</msg>
<msg timestamp="20180810 14:20:45.110" level="DEBUG">Test timeout 2 seconds active. 1.968 seconds left.</msg>
<msg timestamp="20180810 14:20:45.110" level="INFO">Received response from OOF-SNIRO OK</msg>
<msg timestamp="20180810 14:20:45.110" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.110" starttime="20180810 14:20:45.109"></status>
</kw>
<msg timestamp="20180810 14:20:45.111" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:45.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.111" starttime="20180810 14:20:45.081"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.113" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.113" level="DEBUG">Test timeout 2 seconds active. 1.965 seconds left.</msg>
<msg timestamp="20180810 14:20:45.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.114" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.114" starttime="20180810 14:20:45.112"></status>
</kw>
<msg timestamp="20180810 14:20:45.114" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.114" starttime="20180810 14:20:45.079"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:45.115" critical="yes" starttime="20180810 14:20:45.078"></status>
</test>
<test id="s1-s1-s1-s1-t17" name="Basic Policy Health Check">
<kw name="Run Policy Health Check" library="policy_interface">
<doc>Runs Policy Health check</doc>
<msg timestamp="20180810 14:20:45.118" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_POLICY_USERNAME}</arg>
<arg>${GLOBAL_POLICY_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:45.119" level="TRACE">Arguments: [ b'healthcheck' | b'zb!XztG34' ]</msg>
<msg timestamp="20180810 14:20:45.120" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:45.120" level="TRACE">Return: [b'healthcheck', b'zb!XztG34']</msg>
<msg timestamp="20180810 14:20:45.120" level="INFO">${auth} = ['healthcheck', 'zb!XztG34']</msg>
<status status="PASS" endtime="20180810 14:20:45.120" starttime="20180810 14:20:45.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${POLICY_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.121" level="TRACE">Arguments: [ 'Creating session http://192.168.61.14:8081' ]</msg>
<msg timestamp="20180810 14:20:45.121" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:45.121" level="INFO">Creating session http://192.168.61.14:8081</msg>
<msg timestamp="20180810 14:20:45.121" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.121" starttime="20180810 14:20:45.120"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>policy</arg>
<arg>${POLICY_HEALTHCHECK_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:45.122" level="TRACE">Arguments: [ 'policy' | 'http://192.168.61.14:6969' | auth=[b'healthcheck', b'zb!XztG34'] ]</msg>
<msg timestamp="20180810 14:20:45.122" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:45.122" level="INFO">Creating Session using : alias=policy, url=http://192.168.61.14:6969, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc37fb710&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:45.122" level="DEBUG">Creating session: policy</msg>
<msg timestamp="20180810 14:20:45.122" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:45.123" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc37fb990&gt;</msg>
<msg timestamp="20180810 14:20:45.123" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc37fb990&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.123" starttime="20180810 14:20:45.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:45.124" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' ]</msg>
<msg timestamp="20180810 14:20:45.124" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<msg timestamp="20180810 14:20:45.124" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20180810 14:20:45.124" starttime="20180810 14:20:45.123"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>policy</arg>
<arg>${POLICY_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:45.125" level="TRACE">Arguments: [ 'policy' | '/healthcheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json'} ]</msg>
<msg timestamp="20180810 14:20:45.125" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 14:20:45.129" level="DEBUG">Starting new HTTP connection (1): 192.168.61.14</msg>
<msg timestamp="20180810 14:20:45.173" level="DEBUG">http://192.168.61.14:6969 "GET /healthcheck HTTP/1.1" 200 276</msg>
<msg timestamp="20180810 14:20:45.174" level="INFO">Get Request using : alias=policy, uri=/healthcheck, headers={u'Accept': u'application/json', u'Content-Type': u'application/json'} </msg>
<msg timestamp="20180810 14:20:45.174" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:45.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.175" starttime="20180810 14:20:45.125"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from policy ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.177" level="TRACE">Arguments: [ 'Received response from policy {"healthy":true,"details":[{"name":"PDP-D","url":"self","healthy":true,"code":200,"message":"alive"},{"name":"PAP","url":"http://pap:9091/pap/test","healthy":true,"code":200,"message":""},{"name":"PDP","url":"http://pdp:8081/pdp/test","healthy":true,"code":200,"message":""}]}' ]</msg>
<msg timestamp="20180810 14:20:45.177" level="DEBUG">Test timeout 2 seconds active. 1.939 seconds left.</msg>
<msg timestamp="20180810 14:20:45.177" level="INFO">Received response from policy {"healthy":true,"details":[{"name":"PDP-D","url":"self","healthy":true,"code":200,"message":"alive"},{"name":"PAP","url":"http://pap:9091/pap/test","healthy":true,"code":200,"message":""},{"name":"PDP","url":"http://pdp:8081/pdp/test","healthy":true,"code":200,"message":""}]}</msg>
<msg timestamp="20180810 14:20:45.177" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.177" starttime="20180810 14:20:45.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.178" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.179" level="DEBUG">Test timeout 2 seconds active. 1.937 seconds left.</msg>
<msg timestamp="20180810 14:20:45.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.179" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.179" starttime="20180810 14:20:45.178"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp.json()['healthy']}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.180" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 14:20:45.180" level="DEBUG">Test timeout 2 seconds active. 1.936 seconds left.</msg>
<msg timestamp="20180810 14:20:45.180" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.181" starttime="20180810 14:20:45.180"></status>
</kw>
<kw name="Copy List" library="Collections">
<doc>Returns a copy of the given list.</doc>
<arguments>
<arg>${resp.json()['details']}</arg>
</arguments>
<assign>
<var>@{ITEMS}</var>
</assign>
<msg timestamp="20180810 14:20:45.182" level="TRACE">Arguments: [ [{'code': 200, 'healthy': True, 'message': 'alive', 'name': 'PDP-D', 'url': 'self'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PAP', 'url': 'http://pap:9091/pap/test'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PDP', 'url': 'http://pdp:8081/pdp/test'}] ]</msg>
<msg timestamp="20180810 14:20:45.182" level="DEBUG">Test timeout 2 seconds active. 1.934 seconds left.</msg>
<msg timestamp="20180810 14:20:45.182" level="TRACE">Return: [{'code': 200, 'healthy': True, 'message': 'alive', 'name': 'PDP-D', 'url': 'self'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PAP', 'url': 'http://pap:9091/pap/test'}, {'code': 200, 'healthy': True, 'message': '', 'name': 'PDP', 'url': 'http://pdp:8081/pdp/test'}]</msg>
<msg timestamp="20180810 14:20:45.183" level="INFO">@{ITEMS} = [ {u'url': u'self', u'healthy': True, u'message': u'alive', u'code': 200, u'name': u'PDP-D'} | {u'url': u'http://pap:9091/pap/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PAP'} |...</msg>
<status status="PASS" endtime="20180810 14:20:45.183" starttime="20180810 14:20:45.181"></status>
</kw>
<kw type="for" name="${ELEMENT} IN [ @{ITEMS} ]">
<kw type="foritem" name="${ELEMENT} = {u'url': u'self', u'healthy': True, u'message': u'alive', u'code': 200, u'name': u'PDP-D'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.185" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.185" level="DEBUG">Test timeout 2 seconds active. 1.931 seconds left.</msg>
<msg timestamp="20180810 14:20:45.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.185" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.185" starttime="20180810 14:20:45.184"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.186" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 14:20:45.186" level="DEBUG">Test timeout 2 seconds active. 1.93 seconds left.</msg>
<msg timestamp="20180810 14:20:45.187" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.187" starttime="20180810 14:20:45.186"></status>
</kw>
<status status="PASS" endtime="20180810 14:20:45.187" starttime="20180810 14:20:45.184"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = {u'url': u'http://pap:9091/pap/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PAP'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.188" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.188" level="DEBUG">Test timeout 2 seconds active. 1.928 seconds left.</msg>
<msg timestamp="20180810 14:20:45.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.188" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.188" starttime="20180810 14:20:45.187"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.189" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 14:20:45.190" level="DEBUG">Test timeout 2 seconds active. 1.926 seconds left.</msg>
<msg timestamp="20180810 14:20:45.190" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.190" starttime="20180810 14:20:45.189"></status>
</kw>
<status status="PASS" endtime="20180810 14:20:45.190" starttime="20180810 14:20:45.187"></status>
</kw>
<kw type="foritem" name="${ELEMENT} = {u'url': u'http://pdp:8081/pdp/test', u'healthy': True, u'message': u'', u'code': 200, u'name': u'PDP'}">
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ELEMENT['code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.190" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.191" level="DEBUG">Test timeout 2 seconds active. 1.925 seconds left.</msg>
<msg timestamp="20180810 14:20:45.191" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.191" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.191" starttime="20180810 14:20:45.190"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ELEMENT['healthy']}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.191" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20180810 14:20:45.192" level="DEBUG">Test timeout 2 seconds active. 1.924 seconds left.</msg>
<msg timestamp="20180810 14:20:45.192" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.192" starttime="20180810 14:20:45.191"></status>
</kw>
<status status="PASS" endtime="20180810 14:20:45.192" starttime="20180810 14:20:45.190"></status>
</kw>
<status status="PASS" endtime="20180810 14:20:45.192" starttime="20180810 14:20:45.184"></status>
</kw>
<msg timestamp="20180810 14:20:45.192" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.192" starttime="20180810 14:20:45.118"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:45.192" critical="yes" starttime="20180810 14:20:45.116"></status>
</test>
<test id="s1-s1-s1-s1-t18" name="Basic Portal Health Check">
<kw name="Run Portal Health Check" library="portal_interface">
<doc>Runs Portal Health check</doc>
<msg timestamp="20180810 14:20:45.194" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Portal Get Request" library="portal_interface">
<doc>Runs Portal Get request</doc>
<arguments>
<arg>${PORTAL_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:45.195" level="TRACE">Arguments: [ ${data_path}='/ONAPPORTAL/portalApi/healthCheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>portal</arg>
<arg>${PORTAL_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:45.195" level="TRACE">Arguments: [ 'portal' | 'http://192.168.61.16:8989' ]</msg>
<msg timestamp="20180810 14:20:45.196" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 14:20:45.196" level="INFO">Creating Session using : alias=portal, url=http://192.168.61.16:8989, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:45.196" level="DEBUG">Creating session: portal</msg>
<msg timestamp="20180810 14:20:45.196" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:45.196" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3843990&gt;</msg>
<msg timestamp="20180810 14:20:45.196" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3843990&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.196" starttime="20180810 14:20:45.195"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:45.197" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:45.197" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:45.197" level="TRACE">Return: UUID('73844326-8e12-4503-b6bc-fb1b0737177a')</msg>
<msg timestamp="20180810 14:20:45.197" level="INFO">${uuid} = 73844326-8e12-4503-b6bc-fb1b0737177a</msg>
<status status="PASS" endtime="20180810 14:20:45.197" starttime="20180810 14:20:45.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:45.198" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:45.198" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-73844326-8e12-4503-b6bc-fb1b0737177a'}</msg>
<msg timestamp="20180810 14:20:45.199" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-73844326-8e12-4503-b6bc-fb1b0737177a', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:45.199" starttime="20180810 14:20:45.198"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>portal</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:45.199" level="TRACE">Arguments: [ 'portal' | '/ONAPPORTAL/portalApi/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-73844326-8e12-4503-b6bc-fb1b0737177a'} ]</msg>
<msg timestamp="20180810 14:20:45.199" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:45.266" level="DEBUG">Starting new HTTP connection (1): 192.168.61.16</msg>
<msg timestamp="20180810 14:20:45.335" level="DEBUG">http://192.168.61.16:8989 "GET /ONAPPORTAL/portalApi/healthCheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 14:20:45.347" level="INFO">Get Request using : alias=portal, uri=/ONAPPORTAL/portalApi/healthCheck, headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-73844326-8e12-4503-b6bc-fb1b0737177a', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 14:20:45.347" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:45.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.348" starttime="20180810 14:20:45.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from portal ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:45.349" level="TRACE">Arguments: [ 'Received response from portal {"statusCode":200,"body":"[{\\"healthCheckComponent\\":\\"BE\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"65111bf67c9e\\",\\"ipAddress\\":\\"172.18.0.7\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"},{\\"healthCheckComponent\\":\\"FE\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"},{\\"healthCheckComponent\\":\\"DB\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"OK\\",\\"dbPermissions\\":\\"OK\\"},{\\"healthCheckComponent\\":\\"UEB\\",\\"healthCheckStatus\\":\\"UP\\",\\"version\\":\\"\\",\\"description\\":\\"OK\\",\\"hostName\\":\\"\\",\\"ipAddress\\":\\"\\",\\"dbClusterStatus\\":\\"\\",\\"dbPermissions\\":\\"\\"}]"}' ]</msg>
<msg timestamp="20180810 14:20:45.349" level="DEBUG">Test timeout 2 seconds active. 1.844 seconds left.</msg>
<msg timestamp="20180810 14:20:45.350" level="INFO">Received response from portal {"statusCode":200,"body":"[{\"healthCheckComponent\":\"BE\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"65111bf67c9e\",\"ipAddress\":\"172.18.0.7\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"},{\"healthCheckComponent\":\"FE\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"},{\"healthCheckComponent\":\"DB\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"OK\",\"dbPermissions\":\"OK\"},{\"healthCheckComponent\":\"UEB\",\"healthCheckStatus\":\"UP\",\"version\":\"\",\"description\":\"OK\",\"hostName\":\"\",\"ipAddress\":\"\",\"dbClusterStatus\":\"\",\"dbPermissions\":\"\"}]"}</msg>
<msg timestamp="20180810 14:20:45.350" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.350" starttime="20180810 14:20:45.348"></status>
</kw>
<msg timestamp="20180810 14:20:45.350" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:45.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.351" starttime="20180810 14:20:45.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.352" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.352" level="DEBUG">Test timeout 2 seconds active. 1.841 seconds left.</msg>
<msg timestamp="20180810 14:20:45.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.353" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.353" starttime="20180810 14:20:45.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['statusCode']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:45.354" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:45.354" level="DEBUG">Test timeout 2 seconds active. 1.839 seconds left.</msg>
<msg timestamp="20180810 14:20:45.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:45.355" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.355" starttime="20180810 14:20:45.354"></status>
</kw>
<msg timestamp="20180810 14:20:45.355" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:45.355" starttime="20180810 14:20:45.194"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:45.356" critical="yes" starttime="20180810 14:20:45.193"></status>
</test>
<test id="s1-s1-s1-s1-t19" name="Basic SDC Health Check">
<kw name="Run ASDC Health Check" library="asdc_interface">
<doc>Runs a ASDC health check</doc>
<msg timestamp="20180810 14:20:45.360" level="TRACE">Arguments: [  ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>asdc</arg>
<arg>${ASDC_FE_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:45.362" level="TRACE">Arguments: [ 'asdc' | 'http://10.0.3.1:8181' ]</msg>
<msg timestamp="20180810 14:20:45.362" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:45.362" level="INFO">Creating Session using : alias=asdc, url=http://10.0.3.1:8181, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:45.362" level="DEBUG">Creating session: asdc</msg>
<msg timestamp="20180810 14:20:45.363" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:45.363" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3850650&gt;</msg>
<msg timestamp="20180810 14:20:45.363" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3850650&gt;</msg>
<status status="PASS" endtime="20180810 14:20:45.363" starttime="20180810 14:20:45.361"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:45.364" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:45.364" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:45.364" level="TRACE">Return: UUID('43178d16-08b6-46b3-b78a-7e7395b90b3f')</msg>
<msg timestamp="20180810 14:20:45.364" level="INFO">${uuid} = 43178d16-08b6-46b3-b78a-7e7395b90b3f</msg>
<status status="PASS" endtime="20180810 14:20:45.364" starttime="20180810 14:20:45.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:45.365" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:45.366" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-43178d16-08b6-46b3-b78a-7e7395b90b3f'}</msg>
<msg timestamp="20180810 14:20:45.366" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-43178d16-08b6-46b3-b78a-7e7395b90b3f', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:45.366" starttime="20180810 14:20:45.365"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>asdc</arg>
<arg>${ASDC_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:45.367" level="TRACE">Arguments: [ 'asdc' | '/sdc1/rest/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-43178d16-08b6-46b3-b78a-7e7395b90b3f'} ]</msg>
<msg timestamp="20180810 14:20:45.367" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 14:20:45.369" level="DEBUG">Starting new HTTP connection (1): 10.0.3.1</msg>
<msg timestamp="20180810 14:20:47.358" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:47.358" starttime="20180810 14:20:45.367"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:47.359" starttime="20180810 14:20:45.360"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:47.359" critical="yes" starttime="20180810 14:20:45.357">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t20" name="Basic SDNC Health Check">
<kw name="Run SDNGC Health Check" library="sdngc_interface">
<doc>Runs an SDNGC healthcheck</doc>
<msg timestamp="20180810 14:20:47.364" level="TRACE">Arguments: [  ]</msg>
<kw name="Run SDNGC Post Request" library="sdngc_interface">
<doc>Runs an SDNGC post request</doc>
<arguments>
<arg>${SDNGC_INDEX PATH}${SDNCGC_HEALTHCHECK_OPERATION_PATH}</arg>
<arg>${None}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:47.366" level="TRACE">Arguments: [ ${data_path}='/restconf/operations/SLI-API:healthcheck' | ${data}=None ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_SDNGC_USERNAME}</arg>
<arg>${GLOBAL_SDNGC_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:47.369" level="TRACE">Arguments: [ b'admin' | b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U' ]</msg>
<msg timestamp="20180810 14:20:47.369" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:47.369" level="TRACE">Return: [b'admin', b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U']</msg>
<msg timestamp="20180810 14:20:47.369" level="INFO">${auth} = ['admin', 'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U']</msg>
<status status="PASS" endtime="20180810 14:20:47.369" starttime="20180810 14:20:47.368"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${SDNGC_REST_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 14:20:47.370" level="TRACE">Arguments: [ 'Creating session http://192.168.61.24:8282' ]</msg>
<msg timestamp="20180810 14:20:47.370" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 14:20:47.370" level="INFO">Creating session http://192.168.61.24:8282</msg>
<msg timestamp="20180810 14:20:47.371" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.371" starttime="20180810 14:20:47.370"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>sdngc</arg>
<arg>${SDNGC_REST_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:47.371" level="TRACE">Arguments: [ 'sdngc' | 'http://192.168.61.24:8282' | auth=[b'admin', b'Kp8bJ4SXszM0WXlhak3eHlcse2gAw84vaoGGmJvUy2U'] ]</msg>
<msg timestamp="20180810 14:20:47.372" level="DEBUG">Test timeout 2 seconds active. 1.99 seconds left.</msg>
<msg timestamp="20180810 14:20:47.372" level="INFO">Creating Session using : alias=sdngc, url=http://192.168.61.24:8282, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc4178950&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:47.372" level="DEBUG">Creating session: sdngc</msg>
<msg timestamp="20180810 14:20:47.373" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:47.373" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc419c250&gt;</msg>
<msg timestamp="20180810 14:20:47.373" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc419c250&gt;</msg>
<status status="PASS" endtime="20180810 14:20:47.374" starttime="20180810 14:20:47.371"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:47.375" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:47.375" level="DEBUG">Test timeout 2 seconds active. 1.987 seconds left.</msg>
<msg timestamp="20180810 14:20:47.375" level="TRACE">Return: UUID('cc55c037-a78a-4160-a78b-86b22fe702f1')</msg>
<msg timestamp="20180810 14:20:47.375" level="INFO">${uuid} = cc55c037-a78a-4160-a78b-86b22fe702f1</msg>
<status status="PASS" endtime="20180810 14:20:47.376" starttime="20180810 14:20:47.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:47.377" level="TRACE">Arguments: [ 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:47.378" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-cc55c037-a78a-4160-a78b-86b22fe702f1'}</msg>
<msg timestamp="20180810 14:20:47.379" level="INFO">${headers} = {u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-cc55c037-a78a-4160-a78b-86b22fe702f1', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:47.379" starttime="20180810 14:20:47.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>sdngc</arg>
<arg>${data_path}</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:47.380" level="TRACE">Arguments: [ 'sdngc' | '/restconf/operations/SLI-API:healthcheck' | data=None | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-cc55c037-a78a-4160-a78b-86b22fe702f1'} ]</msg>
<msg timestamp="20180810 14:20:47.380" level="DEBUG">Test timeout 2 seconds active. 1.982 seconds left.</msg>
<msg timestamp="20180810 14:20:47.381" level="DEBUG">Starting new HTTP connection (1): 192.168.61.24</msg>
<msg timestamp="20180810 14:20:47.414" level="DEBUG">http://192.168.61.24:8282 "POST /restconf/operations/SLI-API:healthcheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 14:20:47.416" level="DEBUG">post response: {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 14:20:47.416" level="INFO">Post Request using : alias=sdngc, uri=/restconf/operations/SLI-API:healthcheck, data=None,                     headers={u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-cc55c037-a78a-4160-a78b-86b22fe702f1', u'X-FromAppId': u'robot-ete'}, files=None, allow_redirects=True </msg>
<msg timestamp="20180810 14:20:47.416" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:47.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:47.417" starttime="20180810 14:20:47.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from sdngc ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:20:47.418" level="TRACE">Arguments: [ 'Received response from sdngc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}' ]</msg>
<msg timestamp="20180810 14:20:47.418" level="DEBUG">Test timeout 2 seconds active. 1.943 seconds left.</msg>
<msg timestamp="20180810 14:20:47.419" level="INFO">Received response from sdngc {"output":{"ack-final-indicator":"Y","response-code":"200","response-message":"SDN-C is healthy"}}</msg>
<msg timestamp="20180810 14:20:47.419" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.419" starttime="20180810 14:20:47.418"></status>
</kw>
<msg timestamp="20180810 14:20:47.419" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:47.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:47.419" starttime="20180810 14:20:47.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:47.420" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:47.421" level="DEBUG">Test timeout 2 seconds active. 1.941 seconds left.</msg>
<msg timestamp="20180810 14:20:47.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:47.421" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.421" starttime="20180810 14:20:47.420"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['output']['response-code']}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:47.422" level="TRACE">Arguments: [ '200' | '200' ]</msg>
<msg timestamp="20180810 14:20:47.423" level="DEBUG">Test timeout 2 seconds active. 1.939 seconds left.</msg>
<msg timestamp="20180810 14:20:47.423" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:47.423" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.423" starttime="20180810 14:20:47.422"></status>
</kw>
<msg timestamp="20180810 14:20:47.423" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.423" starttime="20180810 14:20:47.363"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:47.424" critical="yes" starttime="20180810 14:20:47.361"></status>
</test>
<test id="s1-s1-s1-s1-t21" name="Basic SO Health Check">
<kw name="Run MSO Health Check" library="mso_interface">
<doc>Runs an MSO global health check</doc>
<msg timestamp="20180810 14:20:47.426" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_MSO_USERNAME}</arg>
<arg>${GLOBAL_MSO_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:20:47.427" level="TRACE">Arguments: [ b'InfraPortalClient' | b'password1$' ]</msg>
<msg timestamp="20180810 14:20:47.428" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 14:20:47.428" level="TRACE">Return: [b'InfraPortalClient', b'password1$']</msg>
<msg timestamp="20180810 14:20:47.428" level="INFO">${auth} = ['InfraPortalClient', 'password1$']</msg>
<status status="PASS" endtime="20180810 14:20:47.428" starttime="20180810 14:20:47.427"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>mso</arg>
<arg>${MSO_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:47.429" level="TRACE">Arguments: [ 'mso' | 'http://192.168.61.25:8080' ]</msg>
<msg timestamp="20180810 14:20:47.429" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:47.429" level="INFO">Creating Session using : alias=mso, url=http://192.168.61.25:8080, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:47.429" level="DEBUG">Creating session: mso</msg>
<msg timestamp="20180810 14:20:47.430" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:47.430" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc419c090&gt;</msg>
<msg timestamp="20180810 14:20:47.430" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc419c090&gt;</msg>
<status status="PASS" endtime="20180810 14:20:47.430" starttime="20180810 14:20:47.429"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:20:47.430" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:20:47.430" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:47.431" level="TRACE">Return: UUID('34a63f9f-c337-43a2-9e78-7bcb0e4dd509')</msg>
<msg timestamp="20180810 14:20:47.431" level="INFO">${uuid} = 34a63f9f-c337-43a2-9e78-7bcb0e4dd509</msg>
<status status="PASS" endtime="20180810 14:20:47.431" starttime="20180810 14:20:47.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Accept=text/html</arg>
<arg>Content-Type=text/html</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:20:47.431" level="TRACE">Arguments: [ 'Accept=text/html' | 'Content-Type=text/html' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:20:47.432" level="TRACE">Return: {'Accept': 'text/html', 'Content-Type': 'text/html', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-34a63f9f-c337-43a2-9e78-7bcb0e4dd509'}</msg>
<msg timestamp="20180810 14:20:47.432" level="INFO">${headers} = {u'Accept': u'text/html', u'Content-Type': u'text/html', u'X-TransactionId': u'robot-ete-34a63f9f-c337-43a2-9e78-7bcb0e4dd509', u'X-FromAppId': u'robot-ete'}</msg>
<status status="PASS" endtime="20180810 14:20:47.432" starttime="20180810 14:20:47.431"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>mso</arg>
<arg>${MSO_HEALTH_CHECK_PATH}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:47.433" level="TRACE">Arguments: [ 'mso' | '/ecomp/mso/infra/globalhealthcheck' | headers={'Accept': 'text/html', 'Content-Type': 'text/html', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-34a63f9f-c337-43a2-9e78-7bcb0e4dd509'} ]</msg>
<msg timestamp="20180810 14:20:47.433" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:20:47.434" level="DEBUG">Starting new HTTP connection (1): 192.168.61.25</msg>
<msg timestamp="20180810 14:20:47.587" level="DEBUG">http://192.168.61.25:8080 "GET /ecomp/mso/infra/globalhealthcheck HTTP/1.1" 200 125</msg>
<msg timestamp="20180810 14:20:47.588" level="INFO">Get Request using : alias=mso, uri=/ecomp/mso/infra/globalhealthcheck, headers={u'Accept': u'text/html', u'Content-Type': u'text/html', u'X-TransactionId': u'robot-ete-34a63f9f-c337-43a2-9e78-7bcb0e4dd509', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 14:20:47.588" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:20:47.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:20:47.588" starttime="20180810 14:20:47.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:20:47.590" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:20:47.590" level="DEBUG">Test timeout 2 seconds active. 1.835 seconds left.</msg>
<msg timestamp="20180810 14:20:47.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:20:47.591" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.591" starttime="20180810 14:20:47.589"></status>
</kw>
<msg timestamp="20180810 14:20:47.591" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:20:47.591" starttime="20180810 14:20:47.426"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:20:47.592" critical="yes" starttime="20180810 14:20:47.425"></status>
</test>
<test id="s1-s1-s1-s1-t22" name="Basic UseCaseUI API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/iui/usecaseui/</arg>
</arguments>
<msg timestamp="20180810 14:20:47.596" level="TRACE">Arguments: [ ${data_path}='/iui/usecaseui/' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:47.597" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:47.597" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:47.598" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:47.598" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:47.598" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:47.598" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3871950&gt;</msg>
<msg timestamp="20180810 14:20:47.598" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3871950&gt;</msg>
<status status="PASS" endtime="20180810 14:20:47.599" starttime="20180810 14:20:47.597"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:47.599" level="TRACE">Arguments: [ 'msb' | '/iui/usecaseui/' ]</msg>
<msg timestamp="20180810 14:20:47.600" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:47.601" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:49.594" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:49.595" starttime="20180810 14:20:47.599"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:49.595" starttime="20180810 14:20:47.596"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:49.596" critical="yes" starttime="20180810 14:20:47.593">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t23" name="Basic VFC catalog API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/catalog/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:49.600" level="TRACE">Arguments: [ ${data_path}='/api/catalog/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:49.601" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:49.601" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:49.601" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:49.601" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:49.602" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:49.602" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3871b10&gt;</msg>
<msg timestamp="20180810 14:20:49.602" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3871b10&gt;</msg>
<status status="PASS" endtime="20180810 14:20:49.602" starttime="20180810 14:20:49.600"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:49.603" level="TRACE">Arguments: [ 'msb' | '/api/catalog/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:49.604" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:49.606" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:51.598" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:51.599" starttime="20180810 14:20:49.603"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:51.599" starttime="20180810 14:20:49.599"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:51.600" critical="yes" starttime="20180810 14:20:49.597">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t24" name="Basic VFC emsdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/emsdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:51.605" level="TRACE">Arguments: [ ${data_path}='/api/emsdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:51.606" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:51.606" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:51.606" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:51.606" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:51.607" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:51.607" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc43cd790&gt;</msg>
<msg timestamp="20180810 14:20:51.607" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc43cd790&gt;</msg>
<status status="PASS" endtime="20180810 14:20:51.607" starttime="20180810 14:20:51.606"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:51.608" level="TRACE">Arguments: [ 'msb' | '/api/emsdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:51.608" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:51.610" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:53.603" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:53.603" starttime="20180810 14:20:51.608"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:53.604" starttime="20180810 14:20:51.604"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:53.604" critical="yes" starttime="20180810 14:20:51.602">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t25" name="Basic VFC gvnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/gvnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:53.609" level="TRACE">Arguments: [ ${data_path}='/api/gvnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:53.611" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:53.611" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:20:53.611" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:53.612" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:53.612" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:53.612" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc43d4910&gt;</msg>
<msg timestamp="20180810 14:20:53.612" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc43d4910&gt;</msg>
<status status="PASS" endtime="20180810 14:20:53.613" starttime="20180810 14:20:53.610"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:53.614" level="TRACE">Arguments: [ 'msb' | '/api/gvnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:53.614" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:53.616" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:55.607" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:55.607" starttime="20180810 14:20:53.613"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:55.608" starttime="20180810 14:20:53.608"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:55.608" critical="yes" starttime="20180810 14:20:53.606">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t26" name="Basic VFC huaweivnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/huaweivnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:55.613" level="TRACE">Arguments: [ ${data_path}='/api/huaweivnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:55.614" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:55.614" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:55.614" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:55.614" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:55.615" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:55.615" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc43d4dd0&gt;</msg>
<msg timestamp="20180810 14:20:55.615" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc43d4dd0&gt;</msg>
<status status="PASS" endtime="20180810 14:20:55.615" starttime="20180810 14:20:55.614"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:55.616" level="TRACE">Arguments: [ 'msb' | '/api/huaweivnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:55.616" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:20:55.618" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:57.611" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:57.611" starttime="20180810 14:20:55.616"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:57.612" starttime="20180810 14:20:55.612"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:57.612" critical="yes" starttime="20180810 14:20:55.610">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t27" name="Basic VFC jujuvnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/jujuvnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:57.617" level="TRACE">Arguments: [ ${data_path}='/api/jujuvnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:57.619" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:57.619" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:57.619" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:57.619" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:57.620" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:57.620" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc419c4d0&gt;</msg>
<msg timestamp="20180810 14:20:57.621" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc419c4d0&gt;</msg>
<status status="PASS" endtime="20180810 14:20:57.621" starttime="20180810 14:20:57.618"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:57.622" level="TRACE">Arguments: [ 'msb' | '/api/jujuvnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:57.622" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:57.623" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:20:59.615" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:20:59.616" starttime="20180810 14:20:57.621"></status>
</kw>
<status status="FAIL" endtime="20180810 14:20:59.616" starttime="20180810 14:20:57.617"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:20:59.617" critical="yes" starttime="20180810 14:20:57.614">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t28" name="Basic VFC multivimproxy API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/multivimproxy/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:20:59.621" level="TRACE">Arguments: [ ${data_path}='/api/multivimproxy/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:20:59.623" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:20:59.623" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:20:59.623" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:20:59.623" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:20:59.624" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:20:59.624" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc4360e90&gt;</msg>
<msg timestamp="20180810 14:20:59.624" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc4360e90&gt;</msg>
<status status="PASS" endtime="20180810 14:20:59.624" starttime="20180810 14:20:59.622"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:20:59.626" level="TRACE">Arguments: [ 'msb' | '/api/multivimproxy/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:20:59.626" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:20:59.629" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:01.620" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:01.620" starttime="20180810 14:20:59.625"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:01.621" starttime="20180810 14:20:59.621"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:01.621" critical="yes" starttime="20180810 14:20:59.618">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t29" name="Basic VFC nokiavnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/nokiavnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:01.626" level="TRACE">Arguments: [ ${data_path}='/api/nokiavnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:01.627" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:01.627" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:01.628" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:01.628" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:01.628" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:01.629" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc3871d50&gt;</msg>
<msg timestamp="20180810 14:21:01.629" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc3871d50&gt;</msg>
<status status="PASS" endtime="20180810 14:21:01.629" starttime="20180810 14:21:01.627"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:01.631" level="TRACE">Arguments: [ 'msb' | '/api/nokiavnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:01.631" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:21:01.633" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:03.624" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:03.624" starttime="20180810 14:21:01.630"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:03.625" starttime="20180810 14:21:01.625"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:03.625" critical="yes" starttime="20180810 14:21:01.623">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t30" name="Basic VFC nokiav2driver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/NokiaSVNFM/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:03.630" level="TRACE">Arguments: [ ${data_path}='/api/NokiaSVNFM/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:03.631" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:03.631" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:03.631" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:03.632" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:03.632" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:03.633" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc43cd210&gt;</msg>
<msg timestamp="20180810 14:21:03.633" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc43cd210&gt;</msg>
<status status="PASS" endtime="20180810 14:21:03.633" starttime="20180810 14:21:03.631"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:03.635" level="TRACE">Arguments: [ 'msb' | '/api/NokiaSVNFM/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:03.635" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:21:03.637" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:05.628" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:05.628" starttime="20180810 14:21:03.634"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:05.629" starttime="20180810 14:21:03.629"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:05.630" critical="yes" starttime="20180810 14:21:03.627">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t31" name="Basic VFC nslcm API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/nslcm/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:05.634" level="TRACE">Arguments: [ ${data_path}='/api/nslcm/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:05.635" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:05.636" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:05.636" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:05.636" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:05.637" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:05.637" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc6229ed0&gt;</msg>
<msg timestamp="20180810 14:21:05.637" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc6229ed0&gt;</msg>
<status status="PASS" endtime="20180810 14:21:05.637" starttime="20180810 14:21:05.635"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:05.638" level="TRACE">Arguments: [ 'msb' | '/api/nslcm/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:05.638" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:21:05.640" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:07.633" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:07.633" starttime="20180810 14:21:05.638"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:07.634" starttime="20180810 14:21:05.634"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:07.635" critical="yes" starttime="20180810 14:21:05.631">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t32" name="Basic VFC resmgr API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/resmgr/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:07.639" level="TRACE">Arguments: [ ${data_path}='/api/resmgr/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:07.640" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:07.640" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:07.641" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:07.641" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:07.641" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:07.642" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc5e63a10&gt;</msg>
<msg timestamp="20180810 14:21:07.642" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc5e63a10&gt;</msg>
<status status="PASS" endtime="20180810 14:21:07.642" starttime="20180810 14:21:07.639"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:07.643" level="TRACE">Arguments: [ 'msb' | '/api/resmgr/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:07.643" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:21:07.645" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:09.637" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:09.637" starttime="20180810 14:21:07.643"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:09.637" starttime="20180810 14:21:07.638"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:09.638" critical="yes" starttime="20180810 14:21:07.636">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t33" name="Basic VFC vnflcm API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnflcm/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:09.642" level="TRACE">Arguments: [ ${data_path}='/api/vnflcm/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:09.643" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:09.644" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:09.644" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:09.644" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:09.644" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:09.645" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc6a22250&gt;</msg>
<msg timestamp="20180810 14:21:09.645" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc6a22250&gt;</msg>
<status status="PASS" endtime="20180810 14:21:09.645" starttime="20180810 14:21:09.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:09.646" level="TRACE">Arguments: [ 'msb' | '/api/vnflcm/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:09.646" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:21:09.648" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:11.640" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:11.640" starttime="20180810 14:21:09.646"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:11.641" starttime="20180810 14:21:09.641"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:11.641" critical="yes" starttime="20180810 14:21:09.639">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t34" name="Basic VFC vnfmgr API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnfmgr/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:11.645" level="TRACE">Arguments: [ ${data_path}='/api/vnfmgr/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:11.646" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:11.646" level="DEBUG">Test timeout 2 seconds active. 1.997 seconds left.</msg>
<msg timestamp="20180810 14:21:11.646" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:11.646" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:11.647" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:11.647" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc43dba90&gt;</msg>
<msg timestamp="20180810 14:21:11.647" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc43dba90&gt;</msg>
<status status="PASS" endtime="20180810 14:21:11.647" starttime="20180810 14:21:11.645"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:11.648" level="TRACE">Arguments: [ 'msb' | '/api/vnfmgr/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:11.648" level="DEBUG">Test timeout 2 seconds active. 1.995 seconds left.</msg>
<msg timestamp="20180810 14:21:11.650" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:13.644" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:13.644" starttime="20180810 14:21:11.648"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:13.644" starttime="20180810 14:21:11.644"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:13.645" critical="yes" starttime="20180810 14:21:11.643">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t35" name="Basic VFC vnfres API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/vnfres/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:13.649" level="TRACE">Arguments: [ ${data_path}='/api/vnfres/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:13.650" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:13.650" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:13.651" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:13.651" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:13.651" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:13.652" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc5ca9e90&gt;</msg>
<msg timestamp="20180810 14:21:13.652" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc5ca9e90&gt;</msg>
<status status="PASS" endtime="20180810 14:21:13.652" starttime="20180810 14:21:13.650"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:13.653" level="TRACE">Arguments: [ 'msb' | '/api/vnfres/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:13.653" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:21:13.655" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:15.648" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:15.648" starttime="20180810 14:21:13.653"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:15.649" starttime="20180810 14:21:13.648"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:15.649" critical="yes" starttime="20180810 14:21:13.646">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t36" name="Basic VFC workflow API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/workflow/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:15.654" level="TRACE">Arguments: [ ${data_path}='/api/workflow/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:15.655" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:15.655" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:15.655" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:15.655" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:15.656" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:15.656" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc38507d0&gt;</msg>
<msg timestamp="20180810 14:21:15.656" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc38507d0&gt;</msg>
<status status="PASS" endtime="20180810 14:21:15.657" starttime="20180810 14:21:15.655"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:15.657" level="TRACE">Arguments: [ 'msb' | '/api/workflow/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:15.658" level="DEBUG">Test timeout 2 seconds active. 1.994 seconds left.</msg>
<msg timestamp="20180810 14:21:15.659" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:17.652" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:17.653" starttime="20180810 14:21:15.657"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:17.653" starttime="20180810 14:21:15.653"></status>
</kw>
<tags>
<tag>api</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:17.654" critical="yes" starttime="20180810 14:21:15.651">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t37" name="Basic VFC ztesdncdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/ztesdncdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:17.657" level="TRACE">Arguments: [ ${data_path}='/api/ztesdncdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:17.658" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:17.659" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:17.659" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:17.659" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:17.660" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:17.660" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc6a22c10&gt;</msg>
<msg timestamp="20180810 14:21:17.660" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc6a22c10&gt;</msg>
<status status="PASS" endtime="20180810 14:21:17.660" starttime="20180810 14:21:17.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:17.662" level="TRACE">Arguments: [ 'msb' | '/api/ztesdncdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:17.662" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:21:17.664" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:19.656" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:19.656" starttime="20180810 14:21:17.662"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:19.656" starttime="20180810 14:21:17.656"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:19.657" critical="yes" starttime="20180810 14:21:17.655">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t38" name="Basic VFC ztevnfmdriver API Health Check">
<kw name="Run MSB Get Request" library="msb_interface">
<doc>Runs MSB Get request</doc>
<arguments>
<arg>/api/ztevnfmdriver/v1/swagger.json</arg>
</arguments>
<msg timestamp="20180810 14:21:19.661" level="TRACE">Arguments: [ ${data_path}='/api/ztevnfmdriver/v1/swagger.json' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>msb</arg>
<arg>${MSB_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:19.662" level="TRACE">Arguments: [ 'msb' | 'http://10.0.14.1:80' ]</msg>
<msg timestamp="20180810 14:21:19.663" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:19.663" level="INFO">Creating Session using : alias=msb, url=http://10.0.14.1:80, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:19.663" level="DEBUG">Creating session: msb</msg>
<msg timestamp="20180810 14:21:19.664" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:19.664" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc5dbe090&gt;</msg>
<msg timestamp="20180810 14:21:19.664" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc5dbe090&gt;</msg>
<status status="PASS" endtime="20180810 14:21:19.664" starttime="20180810 14:21:19.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>msb</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:19.665" level="TRACE">Arguments: [ 'msb' | '/api/ztevnfmdriver/v1/swagger.json' ]</msg>
<msg timestamp="20180810 14:21:19.666" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:21:19.667" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:21.659" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:21.660" starttime="20180810 14:21:19.665"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:21.660" starttime="20180810 14:21:19.661"></status>
</kw>
<tags>
<tag>3rdparty</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:21.661" critical="yes" starttime="20180810 14:21:19.658">Test timeout 2 seconds exceeded.</status>
</test>
<test id="s1-s1-s1-s1-t39" name="Basic VID Health Check">
<kw name="Run VID Health Check" library="vid_interface">
<doc>Logs in to VID GUI</doc>
<msg timestamp="20180810 14:21:21.666" level="TRACE">Arguments: [  ]</msg>
<kw name="Run VID Get Request" library="vid_interface">
<doc>Runs an VID get request</doc>
<arguments>
<arg>${VID_HEALTHCHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:21.668" level="TRACE">Arguments: [ ${data_path}='/vid/healthCheck' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${GLOBAL_VID_HEALTH_USERNAME}</arg>
<arg>${GLOBAL_VID_HEALTH_PASSWORD}</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20180810 14:21:21.669" level="TRACE">Arguments: [ b'Default' | b'AppPassword!1' ]</msg>
<msg timestamp="20180810 14:21:21.670" level="DEBUG">Test timeout 2 seconds active. 1.993 seconds left.</msg>
<msg timestamp="20180810 14:21:21.670" level="TRACE">Return: [b'Default', b'AppPassword!1']</msg>
<msg timestamp="20180810 14:21:21.670" level="INFO">${auth} = ['Default', 'AppPassword!1']</msg>
<status status="PASS" endtime="20180810 14:21:21.670" starttime="20180810 14:21:21.669"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Creating session ${VID_ENDPOINT}</arg>
</arguments>
<msg timestamp="20180810 14:21:21.671" level="TRACE">Arguments: [ 'Creating session http://192.168.61.32:8080' ]</msg>
<msg timestamp="20180810 14:21:21.671" level="DEBUG">Test timeout 2 seconds active. 1.992 seconds left.</msg>
<msg timestamp="20180810 14:21:21.671" level="INFO">Creating session http://192.168.61.32:8080</msg>
<msg timestamp="20180810 14:21:21.671" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:21:21.671" starttime="20180810 14:21:21.670"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>vid</arg>
<arg>${VID_ENDPOINT}</arg>
<arg>auth=${auth}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:21.672" level="TRACE">Arguments: [ 'vid' | 'http://192.168.61.32:8080' | auth=[b'Default', b'AppPassword!1'] ]</msg>
<msg timestamp="20180810 14:21:21.672" level="DEBUG">Test timeout 2 seconds active. 1.991 seconds left.</msg>
<msg timestamp="20180810 14:21:21.672" level="INFO">Creating Session using : alias=vid, url=http://192.168.61.32:8080, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7fafc5dbeb50&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:21.672" level="DEBUG">Creating session: vid</msg>
<msg timestamp="20180810 14:21:21.673" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:21.673" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc5dbe6d0&gt;</msg>
<msg timestamp="20180810 14:21:21.673" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc5dbe6d0&gt;</msg>
<status status="PASS" endtime="20180810 14:21:21.673" starttime="20180810 14:21:21.672"></status>
</kw>
<kw name="Generate UUID" library="UUID">
<doc>generate a uuid</doc>
<assign>
<var>${uuid}</var>
</assign>
<msg timestamp="20180810 14:21:21.674" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20180810 14:21:21.674" level="DEBUG">Test timeout 2 seconds active. 1.989 seconds left.</msg>
<msg timestamp="20180810 14:21:21.674" level="TRACE">Return: UUID('5627cc74-7ff5-44bd-acfc-c9ab41c966af')</msg>
<msg timestamp="20180810 14:21:21.674" level="INFO">${uuid} = 5627cc74-7ff5-44bd-acfc-c9ab41c966af</msg>
<status status="PASS" endtime="20180810 14:21:21.674" starttime="20180810 14:21:21.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>username=${GLOBAL_VID_HEALTH_USERNAME}</arg>
<arg>password=${GLOBAL_VID_HEALTH_PASSWORD}</arg>
<arg>Accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<arg>X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}</arg>
<arg>X-FromAppId=${GLOBAL_APPLICATION_ID}</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20180810 14:21:21.675" level="TRACE">Arguments: [ 'username=${GLOBAL_VID_HEALTH_USERNAME}' | 'password=${GLOBAL_VID_HEALTH_PASSWORD}' | 'Accept=application/json' | 'Content-Type=application/json' | 'X-TransactionId=${GLOBAL_APPLICATION_ID}-${uuid}' | 'X-FromAppId=${GLOBAL_APPLICATION_ID}' ]</msg>
<msg timestamp="20180810 14:21:21.676" level="TRACE">Return: {'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-5627cc74-7ff5-44bd-acfc-c9ab41c966af', 'password': b'AppPassword!1', 'username': b'Default'}</msg>
<msg timestamp="20180810 14:21:21.677" level="INFO">${headers} = {u'username': 'Default', u'password': 'AppPassword!1', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-5627cc74-7ff5-44bd-acfc-c9ab41c966af', u'X-...</msg>
<status status="PASS" endtime="20180810 14:21:21.677" starttime="20180810 14:21:21.675"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>vid</arg>
<arg>${data_path}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:21.678" level="TRACE">Arguments: [ 'vid' | '/vid/healthCheck' | headers={'Accept': 'application/json', 'Content-Type': 'application/json', 'X-FromAppId': 'robot-ete', 'X-TransactionId': 'robot-ete-5627cc74-7ff5-44bd-acfc-c9ab41c966af', 'password': b'AppPassword!1', 'username': b'Default'} ]</msg>
<msg timestamp="20180810 14:21:21.678" level="DEBUG">Test timeout 2 seconds active. 1.985 seconds left.</msg>
<msg timestamp="20180810 14:21:21.679" level="DEBUG">Starting new HTTP connection (1): 192.168.61.32</msg>
<msg timestamp="20180810 14:21:21.719" level="DEBUG">http://192.168.61.32:8080 "GET /vid/healthCheck HTTP/1.1" 200 None</msg>
<msg timestamp="20180810 14:21:21.720" level="INFO">Get Request using : alias=vid, uri=/vid/healthCheck, headers={u'username': 'Default', u'password': 'AppPassword!1', u'Accept': u'application/json', u'Content-Type': u'application/json', u'X-TransactionId': u'robot-ete-5627cc74-7ff5-44bd-acfc-c9ab41c966af', u'X-FromAppId': u'robot-ete'} </msg>
<msg timestamp="20180810 14:21:21.721" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:21:21.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:21:21.721" starttime="20180810 14:21:21.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Received response from vid ${resp.text}</arg>
</arguments>
<msg timestamp="20180810 14:21:21.723" level="TRACE">Arguments: [ 'Received response from vid {"statusCode":200,"message":"health check succeeded","date":null}' ]</msg>
<msg timestamp="20180810 14:21:21.723" level="DEBUG">Test timeout 2 seconds active. 1.94 seconds left.</msg>
<msg timestamp="20180810 14:21:21.724" level="INFO">Received response from vid {"statusCode":200,"message":"health check succeeded","date":null}</msg>
<msg timestamp="20180810 14:21:21.724" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:21:21.724" starttime="20180810 14:21:21.722"></status>
</kw>
<msg timestamp="20180810 14:21:21.724" level="TRACE">Return: &lt;Response [200]&gt;</msg>
<msg timestamp="20180810 14:21:21.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20180810 14:21:21.725" starttime="20180810 14:21:21.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20180810 14:21:21.726" level="TRACE">Arguments: [ 200 | '200' ]</msg>
<msg timestamp="20180810 14:21:21.726" level="DEBUG">Test timeout 2 seconds active. 1.937 seconds left.</msg>
<msg timestamp="20180810 14:21:21.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20180810 14:21:21.727" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:21:21.727" starttime="20180810 14:21:21.725"></status>
</kw>
<kw name="Should Be String" library="String">
<doc>Fails if the given ``item`` is not a string.</doc>
<arguments>
<arg>${resp.json()['message']}</arg>
</arguments>
<msg timestamp="20180810 14:21:21.728" level="TRACE">Arguments: [ 'health check succeeded' ]</msg>
<msg timestamp="20180810 14:21:21.728" level="DEBUG">Test timeout 2 seconds active. 1.935 seconds left.</msg>
<msg timestamp="20180810 14:21:21.729" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:21:21.729" starttime="20180810 14:21:21.728"></status>
</kw>
<msg timestamp="20180810 14:21:21.729" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20180810 14:21:21.729" starttime="20180810 14:21:21.665"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="PASS" endtime="20180810 14:21:21.730" critical="yes" starttime="20180810 14:21:21.663"></status>
</test>
<test id="s1-s1-s1-s1-t40" name="Basic VNFSDK Health Check">
<kw name="Run VNFSDK Health Check" library="vnfsdk_interface">
<doc>Runs VNFSDK Health check</doc>
<msg timestamp="20180810 14:21:21.732" level="TRACE">Arguments: [  ]</msg>
<kw name="Run VNFSDK Get Request" library="vnfsdk_interface">
<doc>Runs VNFSDK Get request</doc>
<arguments>
<arg>${VNFSDK_HEALTH_CHECK_PATH}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:21.732" level="TRACE">Arguments: [ ${data_path}='/onapapi/vnfsdk-marketplace/v1/PackageResource/healthcheck' ]</msg>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>vnfsdk</arg>
<arg>${VNFSDK_ENDPOINT}</arg>
</arguments>
<assign>
<var>${session}</var>
</assign>
<msg timestamp="20180810 14:21:21.733" level="TRACE">Arguments: [ 'vnfsdk' | 'http://10.0.14.1:8702' ]</msg>
<msg timestamp="20180810 14:21:21.733" level="DEBUG">Test timeout 2 seconds active. 1.998 seconds left.</msg>
<msg timestamp="20180810 14:21:21.733" level="INFO">Creating Session using : alias=vnfsdk, url=http://10.0.14.1:8702, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<msg timestamp="20180810 14:21:21.733" level="DEBUG">Creating session: vnfsdk</msg>
<msg timestamp="20180810 14:21:21.733" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20180810 14:21:21.734" level="TRACE">Return: &lt;requests.sessions.Session object at 0x7fafc61d4310&gt;</msg>
<msg timestamp="20180810 14:21:21.734" level="INFO">${session} = &lt;requests.sessions.Session object at 0x7fafc61d4310&gt;</msg>
<status status="PASS" endtime="20180810 14:21:21.734" starttime="20180810 14:21:21.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>vnfsdk</arg>
<arg>${data_path}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20180810 14:21:21.734" level="TRACE">Arguments: [ 'vnfsdk' | '/onapapi/vnfsdk-marketplace/v1/PackageResource/healthcheck' ]</msg>
<msg timestamp="20180810 14:21:21.734" level="DEBUG">Test timeout 2 seconds active. 1.996 seconds left.</msg>
<msg timestamp="20180810 14:21:21.736" level="DEBUG">Starting new HTTP connection (1): 10.0.14.1</msg>
<msg timestamp="20180810 14:21:23.731" level="FAIL">Test timeout 2 seconds exceeded.</msg>
<status status="FAIL" endtime="20180810 14:21:23.732" starttime="20180810 14:21:21.734"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:23.732" starttime="20180810 14:21:21.732"></status>
</kw>
<status status="FAIL" endtime="20180810 14:21:23.733" starttime="20180810 14:21:21.731"></status>
</kw>
<tags>
<tag>core</tag>
<tag>health</tag>
</tags>
<timeout value="2 seconds"></timeout>
<status status="FAIL" endtime="20180810 14:21:23.733" critical="yes" starttime="20180810 14:21:21.730">Test timeout 2 seconds exceeded.</status>
</test>
<doc>Testing ecomp components are available via calls.

Testing ecomp components are available via calls.</doc>
<status status="FAIL" endtime="20180810 14:21:23.743" starttime="20180810 14:20:19.523"></status>
</suite>
<status status="FAIL" endtime="20180810 14:21:23.792" starttime="20180810 14:20:19.521"></status>
</suite>
<status status="FAIL" endtime="20180810 14:21:23.824" starttime="20180810 14:20:19.518"></status>
</suite>
<status status="FAIL" endtime="20180810 14:21:23.852" starttime="20180810 14:20:19.495"></status>
</suite>
<statistics>
<total>
<stat fail="29" pass="11">Critical Tests</stat>
<stat fail="29" pass="11">All Tests</stat>
</total>
<tag>
<stat fail="9" pass="0">3rdparty</stat>
<stat fail="8" pass="1">api</stat>
<stat fail="7" pass="10">core</stat>
<stat fail="1" pass="0">dcae</stat>
<stat fail="0" pass="1">externalapi</stat>
<stat fail="29" pass="11">health</stat>
<stat fail="4" pass="0">multicloud</stat>
</tag>
<suite>
<stat fail="29" id="s1" name="OpenECOMP ETE" pass="11">OpenECOMP ETE</stat>
<stat fail="29" id="s1-s1" name="Robot" pass="11">OpenECOMP ETE.Robot</stat>
<stat fail="29" id="s1-s1-s1" name="Testsuites" pass="11">OpenECOMP ETE.Robot.Testsuites</stat>
<stat fail="29" id="s1-s1-s1-s1" name="Health-Check" pass="11">OpenECOMP ETE.Robot.Testsuites.Health-Check</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20180810 14:20:20.007" level="ERROR">Error in file '/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/resources/log_interface.robot': Setting variable '${LOG_ELASTICSEARCH_ENDPOINT}' failed: Variable '${GLOBAL_INJECTED_LOG_ELASTICSEARCH_IP_ADDR}' not found.</msg>
<msg timestamp="20180810 14:20:20.018" level="ERROR">Error in file '/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/resources/log_interface.robot': Setting variable '${LOG_KIBANA_ENDPOINT}' failed: Variable '${GLOBAL_INJECTED_LOG_KIBANA_IP_ADDR}' not found.</msg>
<msg timestamp="20180810 14:20:20.029" level="ERROR">Error in file '/home/argela/AplicationManagerGrpc/simple-grpc-client/src/test/resources/OpenECOMP_ETE/robot/resources/log_interface.robot': Setting variable '${LOG_LOGSTASH_ENDPOINT}' failed: Variable '${GLOBAL_INJECTED_LOG_LOGSTASH_IP_ADDR}' not found.</msg>
<msg timestamp="20180810 14:20:32.341" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42cf890&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 14:20:32.544" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42cf990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
<msg timestamp="20180810 14:20:32.949" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('&lt;urllib3.connection.HTTPConnection object at 0x7fafc42cafd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',)': /healthcheck</msg>
</errors>
</robot>
